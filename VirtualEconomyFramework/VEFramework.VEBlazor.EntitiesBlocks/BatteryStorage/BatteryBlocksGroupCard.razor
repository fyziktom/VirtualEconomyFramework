@inject AppData AppData

<Card Margin="Margin.Is4.FromBottom" Style="min-width:300px;max-width:450px;">
    <CardHeader>
        <Row>
            <Column>
                <CardTitle>Bateriové úložiště - @Name</CardTitle>
            </Column>
            <Column>
                <AddBatteryBlock @ref=addBatteryBlockModal
                                 Battery="@getBlock()"
                                 WithButton="true"
                                 BlockButton="false"
                                 FloatButton="Float.End"
                                 WithButtonIcon="true"
                                 WithButtonText="false"
                                 Added="@onBatteryBlockAdded" />
            </Column>
        </Row>
    </CardHeader>
    <CardBody Padding="Padding.Is0" Overflow="Overflow.Auto">
        @if (BatteryBlocks != null)
        {
            <Table>
                <TableHeader>
                    <TableHeaderCell>Název</TableHeaderCell>
                    <TableHeaderCell>Kapacita</TableHeaderCell>
                    <TableHeaderCell>Max nabíjení</TableHeaderCell>
                    <TableHeaderCell>Max vybíjení</TableHeaderCell>
                    <TableHeaderCell>Akce</TableHeaderCell>
                </TableHeader>
                <TableBody>
                    @foreach (var bblock in BatteryBlocks)
                    {
                        <TableRow>
                            <TableRowCell>@bblock.Name</TableRowCell>
                            <TableRowCell>@bblock.Capacity</TableRowCell>
                            <TableRowCell>@bblock.MaximumChargePower </TableRowCell>
                            <TableRowCell>@bblock.MaximumDischargePower</TableRowCell>
                            <TableRowCell>
                                <RemoveBatteryBlock Battery="@bblock"
                                            Removed="@onRemovedBatteryBlock"
                                            WithButton="true"
                                            WithButtonText="false"
                                            WithButtonIcon="true"
                                            FloatButton="Float.End" />
                            </TableRowCell>
                        </TableRow>
                    }
                </TableBody>
            </Table>
        }
    </CardBody>
</Card>

@code {
    [Parameter]
    public IEnumerable<BatteryBlock> BatteryBlocks { get; set; } = new List<BatteryBlock>();
    [Parameter]
    public string Name { get; set; } = string.Empty;
    [Parameter]
    public string GroupId { get; set; } = string.Empty;

    AddBatteryBlock? addBatteryBlockModal;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (addBatteryBlockModal != null)
            {
                await addBatteryBlockModal.Load(getBlock());
            }
        }
    }

    private BatteryBlock getBlock()
    {
        var batteryblock = AppData.BatteryStorage.CommonBattery.Clone();
        batteryblock.GroupId = GroupId;
        if (BatteryBlocks.Any())
        {
            batteryblock.Name = Name + $"-{BatteryBlocks.Count()}";
        }
        return batteryblock;
    }

    public async Task LoadData()
    {
        var batteryblocks = AppData.BatteryStorage.BatteryBlocks.Values.ToList();
        if (batteryblocks != null)
        {
            BatteryBlocks = batteryblocks;
            Name = AppData.BatteryStorage.Name;
            if (Name == null)
                Name = "Default";
        }

        await InvokeAsync(StateHasChanged);

        if (addBatteryBlockModal != null)
            await addBatteryBlockModal.Load(getBlock());

        await InvokeAsync(StateHasChanged);
    }

    private async void onBatteryBlockAdded(List<string> e)
    {
        await LoadData();
    }
    private async void onRemovedBatteryBlock(string e)
    {
        await LoadData();
    }
}
