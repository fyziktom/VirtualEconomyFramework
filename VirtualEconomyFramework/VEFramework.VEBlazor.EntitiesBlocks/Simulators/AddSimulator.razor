@inherits EntitiesBlocksComponentBase
@inject AppData AppData

<Modal @ref="AddModal">
    <ModalContent Centered Size="ModalSize.ExtraLarge">
        <ModalHeader>
            <ModalTitle>@(!simulatorChange ? "Add" : "Change") Simulator</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            @if (Item != null && Item.Id != null && simulator != null)
            {
                <Row>
                    <Column>
                        <Field>
                            <FieldLabel>Name</FieldLabel>
                            <TextEdit Placeholder="Entity Name" @bind-Text="@simulator.Name" />
                        </Field>
                    </Column>
                    
                </Row>
                <Row Margin="Margin.Is2.FromTop">
                    <Column>
                        <Field Margin="Margin.Is2.FromTop">
                            <FieldLabel>Maximum Power Consumption </FieldLabel>
                            <NumericPicker TValue="double" Min="0" Max="@double.MaxValue" @bind-Value="@((simulator as DeviceSimulator).DevicePowerConsumption)" Decimals="4" DecimalSeparator="." AlternativeDecimalSeparator="," />
                            <FieldHelp>Please fill device maximum consumption in kW</FieldHelp>
                        </Field>
                    </Column>
                </Row>
                <Row Margin="Margin.Is2.FromTop">
                    <Column>
                        <Span>Now fill the consumption ration for each hour of day. You can select from the templates.</Span>
                    </Column>
                </Row>

                <Row Margin="Margin.Is3.FromTop">
                    <Column>
                        <Button Margin="Margin.Is1.FromStart.Is1.FromTop" Color="Color.Primary" Outline Clicked="@(() => onTemplateClickedHandler("ac"))">Aircondition</Button>
                         <Button Margin="Margin.Is1.FromStart.Is1.FromTop" Color="Color.Primary" Outline Clicked="@(() => onTemplateClickedHandler("refrigerator"))">Refrigerator</Button>
                        <Button Margin="Margin.Is1.FromStart.Is1.FromTop" Color="Color.Primary" Outline Clicked="@(() => onTemplateClickedHandler("lights"))">Lights</Button>
                        <Button Margin="Margin.Is1.FromStart.Is1.FromTop" Color="Color.Primary" Outline Clicked="@(() => onTemplateClickedHandler("cooktop"))">Cooktop</Button>
                        <Button Margin="Margin.Is1.FromStart.Is1.FromTop" Color="Color.Primary" Outline Clicked="@(() => onTemplateClickedHandler("poolpump"))">Pool pump</Button>
                     </Column>
                </Row>

                <Row Margin="Margin.Is3.FromTop">
                    <Column>
                        <SimulatorDayProfileDataBarGraph @bind-Data="@((simulator as DeviceSimulator).DayProfileData)" />
                    </Column>
                   
                </Row>
                <Row Margin="Margin.Is4.FromTop">
                    <Column>
                            <Button Color="Color.Primary" Outline Clicked="@addSimulatorHandler">Add Simulator</Button>
                    </Column>
                </Row>
            }
            else
            {
                <Row Margin="Margin.Is4.FromTop">
                    <Column>
                        <Span>Please select the Entity to add new simulator. Click to entity in the Tree.</Span>
                    </Column>
                </Row>
            }
        </ModalBody>
    </ModalContent>
</Modal>

@if (WithButton)
{
    <Button Color="Color.Primary" Block="@BlockButton" Outline Float="@FloatButton" Clicked="@openAddSimulator">
        <Row>
            @if(WithButtonIcon)
            {
                <Column>
                    <Icon Name="IconName.Add" />
                </Column>
            }
            @if(WithButtonText)
            {
                <Column Margin="Margin.Is2.FromStart">
                    @ButtonText
                </Column>
            }
        </Row>
    </Button>
}

@code {

    [Parameter]
    public bool WithButton { get; set; } = false;
    [Parameter]
    public bool BlockButton { get; set; } = false;
    [Parameter]
    public Float FloatButton { get; set; } = Float.Default;
    [Parameter]
    public bool WithButtonIcon { get; set; } = false;
    [Parameter]
    public bool WithButtonText { get; set; } = false;
    [Parameter]
    public string ButtonText { get; set; } = "Add Simulator";
    [Parameter]
    public EventCallback<string> Added { get; set; }

    Modal? AddModal;
    bool simulatorChange = false;
    ISimulator simulator = new DeviceSimulator()
    {
        Name = "New Device Simulator",
        DevicePowerConsumption = 1.0,
        DayProfileData = new double[] { 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.3, 0.3, 0.4, 0.5, 0.5, 0.3, 0.3, 0.2, 0.2, 0.1, 0.1, 0.1, 0.1 }
    };

    [Inject] INotificationService NotificationService { get; set; }

    public async Task LoadSimulator(ISimulator input)
    {
        if (input != null)
            simulator = input;
        if (AddModal != null)
            await AddModal.Show();
        simulatorChange = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task openAddSimulator()
    {
        if (AddModal != null)
        {
            simulatorChange = false;
            await AddModal.Show();
        }
    }

    private async Task addSimulatorHandler()
    {
        if (Item != null && Item.Id != null)
        {
            if (simulator == null)
            {
                await NotificationService.Error("Simulator cannot be null.", "Cannot Add Simulator");
                return;
            }
            if (string.IsNullOrEmpty(simulator.Name))
            {
                await NotificationService.Error("Please fill the name of the simulator", "Cannot Add simulator");
                return;
            }

            AppData.EntitiesHandler.AddSimulatorToEntity(Item.Id, simulator);

            if (AddModal != null)
                await AddModal.Hide();

            await Added.InvokeAsync(Item.Id);
            await ItemChanged.InvokeAsync(Item);

            simulator = new DeviceSimulator()
                {
                    Name = "New Device Simulator",
                    DevicePowerConsumption = 1.0,
                    DayProfileData = new double[] { 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.3, 0.3, 0.4, 0.5, 0.5, 0.3, 0.3, 0.2, 0.2, 0.1, 0.1, 0.1, 0.1 }
                };
        }
    }

    private async Task onTemplateClickedHandler(string type)
    {
        if (string.IsNullOrEmpty(type))
            return;

        switch (type)
        {
            case "ac": simulator.Name = "Airconditioner";
                (simulator as DeviceSimulator).DevicePowerConsumption = 2;
                (simulator as DeviceSimulator).DayProfileData = new double[] { 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.3, 0.4, 0.5, 0.6, 0.6, 0.7, 0.5, 0.5, 0.4, 0.3, 0.2, 0.1, 0.1, 0.1, 0.1 };
                break;
            case "refrigerator": simulator.Name = "Refrigerator";
                (simulator as DeviceSimulator).DevicePowerConsumption = 0.12;
                (simulator as DeviceSimulator).DayProfileData = new double[] { 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.3, 0.4, 0.7, 0.7, 0.7, 0.7, 0.7, 0.8, 0.5, 0.3, 0.2, 0.2, 0.2, 0.2, 0.2 };
                break;
            case "lights": simulator.Name = "Lights";
                (simulator as DeviceSimulator).DevicePowerConsumption = 0.1;
                (simulator as DeviceSimulator).DayProfileData = new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8, 0.8, 0.7, 0.1, 0.0, 0.0 };
                break;
            case "cooktop":
                simulator.Name = "Cooktop";
                (simulator as DeviceSimulator).DevicePowerConsumption = 3;
                (simulator as DeviceSimulator).DayProfileData = new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2, 0.0, 0.0, 0.0, 0.1, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0 };
                break;
            case "poolpump":
                simulator.Name = "Pool pump";
                (simulator as DeviceSimulator).DevicePowerConsumption = 1.1;
                (simulator as DeviceSimulator).DayProfileData = new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
                break;
            default:
                break;
        }

        await InvokeAsync(StateHasChanged);
    }
}
