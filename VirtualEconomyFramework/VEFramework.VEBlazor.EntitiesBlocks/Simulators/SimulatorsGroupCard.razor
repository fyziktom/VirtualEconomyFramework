@inherits EntitiesBlocksComponentBase
@inject AppData AppData

<Card Margin="Margin.Is4.FromBottom" Style="min-width:300px;">
    <CardHeader>
        <Row Flex="Flex.AlignItems.Center">
            <Column ColumnSize="ColumnSize.Is9" Flex="Flex.AlignItems.Center">
                <CardTitle Flex="Flex.AlignItems.Center" Class="entity-group-title">
                    <Span Margin="Margin.Is1.FromEnd">
                        Simulators
                    </Span>
                </CardTitle>
            </Column>
            <Column>
                <AddSimulator @ref=addSimulatorModal 
                            WithButton="true" 
                            BlockButton="false"
                            FloatButton="Float.End" 
                            WithButtonIcon="true" 
                            WithButtonText="false"
                            Added="@onAddedHandler"/>
            </Column>
        </Row>
    </CardHeader>
    <CardBody Overflow="Overflow.Auto" Padding="Padding.Is0">
    @if (Simulators != null)
    {
                <Table>
                    <TableHeader>
                        <TableHeaderCell>Název</TableHeaderCell>
                        <TableHeaderCell>Id</TableHeaderCell>
                        <TableHeaderCell>Energie</TableHeaderCell>
                        <TableHeaderCell>DayProfile</TableHeaderCell>
                        <TableHeaderCell>Akce</TableHeaderCell>
                    </TableHeader>
                    <TableBody>
                        @foreach (var simulator in Simulators)
                        {
                            @if (simulator.Type == SimulatorTypes.Device)
                            {
                                var simId = simulator.Id;
                                <TableRow>
                                    <TableRowCell>@simulator.Name</TableRowCell>
                                    <TableRowCell>@simulator.Id</TableRowCell>
                                    <TableRowCell>@(Math.Round((simulator as DeviceSimulator).DevicePowerConsumption, 2))</TableRowCell>
                                    <TableRowCell>
                                        <Table>
                                            <TableHeader>
                                                <TableHeaderCell>Hour</TableHeaderCell>
                                                <TableHeaderCell>Power Ratio</TableHeaderCell>
                                            </TableHeader>
                                            <TableBody>
                                                    @for (int i = 0; i < (simulator as DeviceSimulator).DayProfileData.Length; i++)
                                                    {
                                                        var index = i;
                                                        <TableRow>
                                                            <TableRowCell>@(index):00</TableRowCell>
                                                            <TableRowCell>@(Math.Round((simulator as DeviceSimulator).DayProfileData[index],2))</TableRowCell>
                                                        </TableRow>
                                                    }
                                            </TableBody>
                                        </Table>

                                    </TableRowCell>
                                    
                                    <TableRowCell>
                                        <RemoveSimulator EntityId="@EntityId"
                                                            SimulatorId="@simId"
                                                            Removed="@onRemoved" 
                                                            WithButton="true"
                                                            WithButtonText="false" 
                                                            WithButtonIcon="true" 
                                                            FloatButton="Float.End"/>
                                    </TableRowCell>
                                </TableRow>
                            }
                        }
                    </TableBody>
                </Table>
    }
    </CardBody>
</Card>

@code {
    [Parameter]
    public IEnumerable<ISimulator> Simulators { get; set; } = new List<ISimulator>();
    [Parameter]
    public string Name { get; set; } = string.Empty;
    [Parameter]
    public string EntityId { get; set; } = string.Empty;

    IEntity? entity = new BaseEntity();

    AddSimulator? addSimulatorModal;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await LoadData(EntityId);
    }

    private void getEntity()
    {
        var r = AppData.EntitiesHandler.GetEntity(EntityId, EntityType.Both);
        if (r != null)
            entity = r;
    }


    public async Task LoadData(string entityId)
    {
        await LoadData(new TreeItem() { Id = entityId });
    }
    public async Task LoadData(TreeItem item)
    {
        if (item != null)
        {
            Item = item;
            if (!string.IsNullOrEmpty(item.Id))
                EntityId = item.Id;
            getEntity();
        }

        if (entity != null)
        {
            if (addSimulatorModal != null)
                addSimulatorModal.Item = Item;

            if (entity.Simulators != null)
                Simulators = entity.Simulators.Values.ToList();

            await InvokeAsync(StateHasChanged);
        }

    }

    private async void onAddedHandler(string e)
    {
        await LoadData(EntityId);
    }
    private async void onRemoved(string e)
    {
        await LoadData(EntityId);
    }
}
