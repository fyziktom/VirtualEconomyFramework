@inherits EntitiesBlocksComponentBase
@inject AppData AppData

<Card Margin="Margin.Is4.FromBottom">
    <CardHeader>
        <CardTitle>Main</CardTitle>
    </CardHeader>
    <CardBody>
        <Row>
            <Column>
                <AddBlock Item="@Item" WithButton="true" BlockChanged="@onEnergyBlockChangedHandler" />
            </Column>
        </Row>
        <Row>
            <Column>
                <Button Color="Color.Primary" Block Outline Clicked="@AddBlocks">Add Block preset</Button>
            </Column>
            <Column>
                <Button Color="Color.Primary" Block Outline Clicked="@AddBlocks2">Add Blocks preset 2</Button>
            </Column>
            <Column>
                <Button Color="Color.Primary" Block Outline Clicked="@( () => AddRepetitiveBlock(1,2))">Add Repetitive Block 1kW 8-10h</Button>
            </Column>
        </Row>
        <Row>
            <Column>
                <Button Color="Color.Primary" Block Outline Clicked="@( () => AddSolarBlocks(5))">Add Solar Blocks 5kW</Button>
            </Column>
            <Column>
                <Button Color="Color.Primary" Block Outline Clicked="@( () => AddSolarBlocksDayBlocks(5, 8, 18))">Add Solar Blocks 5kW 8-18h</Button>
            </Column>
            <Column>
                <Button Color="Color.Primary" Block Outline Clicked="@( () => AddSolarBlocks(3))">Add Solar Blocks 3kW</Button>
            </Column>
        </Row>
    </CardBody>
</Card>

@code {

    async Task onEnergyBlockChangedHandler(IBlock block)
    {
        await ItemChanged.InvokeAsync(Item);
    }

    private async Task AddBlocks()
    {
        if (Item == null) return;

        // add some custom blocks of simulated consumption
        var blockstoadd = new List<IBlock>();
        var id = Item.Id;
        var parent = Item.Parent?.Id ?? string.Empty;
        var Block = new BaseBlock();
        //device which consume 3kWh for 6 hours, started on 3rd of January in 00:00,
        blockstoadd.Add(Block.GetBlock(BlockType.Simulated,
                                       BlockDirection.Consumed,
                                       new DateTime(2022, 1, 3),
                                       new TimeSpan(6, 0, 0),
                                       3,
                                       id,
                                       "Dryer",
                                       null,
                                       parent));

        //device which consume 5kWh for 34 hours, started on 5th of January in 00:00,
        blockstoadd.Add(Block.GetBlock(BlockType.Simulated,
                                       BlockDirection.Consumed,
                                       new DateTime(2022, 1, 5),
                                       new TimeSpan(34, 0, 0),
                                       5,
                                       id,
                                       "Miner",
                                       null,
                                       parent));

        //device which consume 0.03kW and run 4480 hours, started on 3rd of January in 5am, for example PC
        blockstoadd.Add(Block.GetBlockByPower(BlockType.Simulated,
                                              BlockDirection.Consumed,
                                              new DateTime(2022, 1, 3, 5, 0, 0),
                                              new TimeSpan(4480, 0, 0),
                                              0.03,
                                              id,
                                              "Server",
                                              null,
                                              parent));

        //device which consume 0.1kW and run 2200 hours, started on 3rd of January in 5am, for example PC
        blockstoadd.Add(Block.GetBlockByPower(BlockType.Simulated,
                                              BlockDirection.Consumed,
                                              new DateTime(2022, 3, 3, 5, 0, 0),
                                              new TimeSpan(2200, 0, 0),
                                              0.1,
                                              id,
                                              "PC",
                                              null,
                                              parent));

        //device which consume 0.002kW and run 6200 hours, started on 3rd of January in 5am, for example PC
        blockstoadd.Add(Block.GetBlockByPower(BlockType.Simulated,
                                              BlockDirection.Consumed,
                                              new DateTime(2022, 3, 3, 5, 0, 0),
                                              new TimeSpan(6200, 0, 0),
                                              0.002,
                                              id,
                                              "Charger",
                                              null,
                                              parent));

        AppData.EntitiesHandler.AddBlocksToEntity(id, blockstoadd);
        await ItemChanged.InvokeAsync(Item);

    }

    private async Task AddBlocks2()
    {
        if (Item == null) return;

        // add some custom blocks of simulated consumption
        var blockstoadd = new List<IBlock>();
        var id = Item.Id;
        var parent = Item.Parent.Id;
        var Block = new BaseBlock();
        //device which consume 1kWh for 6 hours, started on 3rd of January in 00:00,
        blockstoadd.Add(Block.GetBlock(BlockType.Simulated,
                                       BlockDirection.Consumed,
                                       new DateTime(2022, 6, 3),
                                       new TimeSpan(6, 0, 0),
                                       1,
                                       id,
                                       "Microwave",
                                       null,
                                       parent));

        //device which consume 3kWh for 34 hours, started on 5th of January in 00:00,
        blockstoadd.Add(Block.GetBlock(BlockType.Simulated,
                                       BlockDirection.Consumed,
                                       new DateTime(2022, 1, 5),
                                       new TimeSpan(34, 0, 0),
                                       3,
                                       id,
                                       "Dryer",
                                       null,
                                       parent));

        //device which consume 0.03kW and run 4480 hours, started on 3rd of January in 5am, for example PC
        blockstoadd.Add(Block.GetBlockByPower(BlockType.Simulated,
                                              BlockDirection.Consumed,
                                              new DateTime(2022, 1, 5, 5, 0, 0),
                                              new TimeSpan(4480, 0, 0),
                                              0.03,
                                              id,
                                              "Charger",
                                              null,
                                              parent));

        //device which consume 0.08kW and run 2200 hours, started on 3rd of January in 5am, for example PC
        blockstoadd.Add(Block.GetBlockByPower(BlockType.Simulated,
                                              BlockDirection.Consumed,
                                              new DateTime(2022, 7, 3, 5, 0, 0),
                                              new TimeSpan(2200, 0, 0),
                                              0.08,
                                              id,
                                              "Server",
                                              null,
                                              parent));

        //device which consume 0.1kW and run 6200 hours, started on 3rd of January in 5am, for example PC
        blockstoadd.Add(Block.GetBlockByPower(BlockType.Simulated,
                                              BlockDirection.Consumed,
                                              new DateTime(2022, 3, 6, 5, 0, 0),
                                              new TimeSpan(6200, 0, 0),
                                              0.1,
                                              id,
                                              "Server 2",
                                              null,
                                              parent));

        AppData.EntitiesHandler.AddBlocksToEntity(id, blockstoadd);
        
        await ItemChanged.InvokeAsync(Item);
    }

    private async Task AddSolarBlocks(int power = 5)
    {
        if (Item != null && Item.Id != null && Item.Parent != null && Item.Parent.Id != null)
        {
            var blocks = BlockHelpers.PVECreateYearBlocks(2022, 2023, Item.Parent.Id, power, null);
            AppData.EntitiesHandler.AddBlocksToEntity(Item.Id, blocks);

            await ItemChanged.InvokeAsync(Item);
        }

    }
    private async Task AddSolarBlocksDayBlocks(int power = 5, int sunstart = 8, int sunend = 18)
    {
        if (Item != null && Item.Id != null && Item.Parent != null && Item.Parent.Id != null)
        {
            var sun = new DateTime(2022, 1, 1, sunstart, 0, 0);
            var sune = new DateTime(2022, 1, 1, sunend, 0, 0);
            var blocks = BlockHelpers.PVECreateYearDaysBlocks(2022, 2023, sun, sune, Item.Parent.Id, power, null);
            AppData.EntitiesHandler.AddBlocksToEntity(Item.Id, blocks);

            await ItemChanged.InvokeAsync(Item);
        }
    }


    private async Task AddRepetitiveBlock(int power = 1, int hourduration = 2)
    {
        if (Item != null && Item.Id != null && Item.Parent != null && Item.Parent.Id != null)
        {
            var start = new DateTime(2022, 1, 1, 8, 0, 0);
            var blocks = BlockHelpers.CreateRepetitiveDayBlock(start,
                                                               start.AddYears(1),
                                                               start,
                                                               start.AddHours(hourduration),
                                                               power,
                                                               "",
                                                               Item.Parent.Id,
                                                               BlockDirection.Consumed,
                                                               BlockType.Simulated,
                                                               false,
                                                               false,
                                                               "Airconditioner");

            AppData.EntitiesHandler.AddBlocksToEntity(Item.Id, blocks);

            await ItemChanged.InvokeAsync(Item);
        }

    }
}
