@inject AppData AppData

<Card Margin="Margin.Is4.FromBottom">
    <CardHeader>
        <CardTitle>Energy Entity Detail</CardTitle>
    </CardHeader>
    @if (Item != null)
    {
        <CardBody>
            <Span>Name: @Item.Name</Span>
            <Span>Type: @(Item.Type.ToString())</Span>
            </CardBody>
        <CardBody>
            <Row>
                <Column>
                    <Table>
                        <TableHeader>
                            <TableHeaderCell>Name</TableHeaderCell>
                            <TableHeaderCell>IsRepetitive</TableHeaderCell>
                            <TableHeaderCell>Total Amount [kWh]</TableHeaderCell>
                            <TableHeaderCell>StartTime</TableHeaderCell>
                            <TableHeaderCell>EndTime</TableHeaderCell>
                            <TableHeaderCell>Avg Power [kW]</TableHeaderCell>
                        </TableHeader>
                        <TableBody>
                            @for (var i = 0; i < items; i++)
                            {
                                var block = blocks[i];
                                <TableRow>
                                    <TableRowCell>@block.Name</TableRowCell>
                                    <TableRowCell>@(block.IsRepetitiveChild || block.IsRepetitiveSource ? "Yes": "No")</TableRowCell>
                                    <TableRowCell>@(Math.Round(block.Amount, 2))</TableRowCell>
                                        <TableRowCell>@block.StartTime</TableRowCell>
                                        <TableRowCell>@block.EndTime</TableRowCell>
                                        <TableRowCell>@(Math.Round(block.AvgConsumptionPerHour, 5))</TableRowCell>
                                    </TableRow>
                            }
                        </TableBody>
                    </Table>
                </Column>
            </Row>
            <Row>
                <Column>
                    @if (items < blocks.Count - 1)
                    {
                        <Button Color="Color.Primary" Outline Clicked="@loadMore">Load more</Button>
                    }
                </Column>
            </Row>
            
        </CardBody>
    }
</Card>

@code{
    [Parameter]
    public TreeItem? Item { get; set; } = null;

    private int items = 10;

    private List<IBlock> blocks { get; set; } = new List<IBlock>();

    public async Task Load(TreeItem item)
    {
        if (item != null)
        {
            Item = item;
            blocks = AppData.EntitiesHandler.GetEntityBlocks(Item.Id).ToList();
            if (blocks.Count > 10)
                items = 10;
            else
                items = blocks.Count;

            await InvokeAsync( StateHasChanged );
        }
    }

    public async Task Refresh()
    {
        if (Item != null)
        {
            blocks = AppData.EntitiesHandler.GetEntityBlocks(Item.Id).ToList();
            if (items >= blocks.Count)
                items = blocks.Count - 1;

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task loadMore()
    {
        if ((items + 10) < blocks.Count)
            items += 10;
        else
            items += blocks.Count - items - 1;
        await InvokeAsync(StateHasChanged);
    }
}