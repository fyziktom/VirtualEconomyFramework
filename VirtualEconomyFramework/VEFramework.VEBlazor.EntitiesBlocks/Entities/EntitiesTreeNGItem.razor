@using System.Text.Json
@{
    var children = Item.GetChilds();
    if (!children.Any())
    {

        <Div Flex="Flex.JustifyContent.Center.AlignItems.Center" Margin="Margin.Is3.FromBottom.Is3.OnX">

            <Div Flex="Flex.AlignItems.Center">
                <Div Margin="Margin.Is2.FromEnd" Style="width: 20px">
                    <Icon Name="@GetIcon(Item)" />
                </Div>
                <Heading Size="HeadingSize.Is5" Margin="Margin.Is0" TextAlignment="TextAlignment.Center" Padding="Padding.Is0">
                    @Item.Name
                </Heading>
            </Div>


        </Div>
    }
    else
    {
        <Collapse Visible="@isExpanded" Overflow="Overflow.Visible" Width="Width.Is100" Flex="Flex.Column.Order.Is10">
            <CollapseHeader Flex="Flex.JustifyContent.Center.AlignItems.Center" Background="Background.Transparent">

                <Div Width="Width.Is25" Flex="Flex.AlignItems.Center">
                    <Div Style="width: 20px">
                        <Icon Name="@GetIcon(Item)" />
                    </Div>
                    <Heading Margin="Margin.Is0" Size="HeadingSize.Is5" Padding="Padding.Is2.OnX">
                        @Item.Name
                    </Heading>

                </Div>
                <Div Margin="Margin.IsAuto.FromStart" Flex="Flex.AlignItems.Center">
                    <Button Clicked="@(()=>isExpanded = !isExpanded)" Margin="Margin.Is1.OnX">
                        <Icon Name="@("fa-chevron-down")" />
                    </Button>

                    <Collapse Visible="@isAddBlockExpanded" Flex="Flex.AlignItems.Center.Row" Border="Border.Is0" Position="Position.Relative">
                        <CollapseHeader Flex="Flex.JustifyContent.Center.AlignItems.Center" Padding="Padding.Is0.OnY.Is2.OnX" Border="Border.Is0">
                            <Button Clicked="@(()=>isAddBlockExpanded = !isAddBlockExpanded)">
                                <Icon Name="@("fa-plus")" />
                            </Button>
                        </CollapseHeader>
                        <CollapseBody Class="card-body-wrapper" Position="Position.Absolute.Top.Is100.Start.Is50.Translate.MiddleX" Padding="Padding.Is0" Style="z-index: 20;">
                            <Buttons Padding="Padding.Is0" Background="Background.White">
                                <Button Color="Color.Dark" Outline Clicked="@(()=>AddConsumerClicked(ConsumerType.Device))"> <Icon Name="@("fa-table")" /></Button>
                                <Button Color="Color.Dark" Outline Clicked="@(()=>AddProducerClicked(SourceType.PVE))"> <Icon Name="@("fa-solar-panel")" /></Button>
                                @* <Button Color="Color.Dark" Outline  Clicked="@(()=>AddProducerClicked(SourceType.PVE))" Flex="Flex.AlignItems.Center.JustifyContent.Center.Wrap"> *@
                                @*   <Div Border="Border.Is2.Dark" Padding="Padding.Is1"> *@
                                @*         <Icon Name="@("fa-solar-panel")" /> *@
                                @*     </Div> *@
                                @* </Button> *@
                                <Button Color="Color.Dark" Outline Clicked="@(()=>AddProducerClicked(SourceType.Battery))"> <Icon Name="@("fa-battery-full")" /></Button>
                                <Button Color="Color.Dark" Outline Clicked="@(()=>AddConsumerClicked(ConsumerType.DevicesGroup))"> <Icon Name="@("fa-building")" /></Button>
                            </Buttons>
                        </CollapseBody>
                    </Collapse>
                </Div>

            </CollapseHeader>
            <CollapseBody>
                <Accordion>
                    <Div Flex="Flex.Row.Wrap.JustifyContent.Center">
                        @foreach (var subItem in children)
                        {

                            <EntitiesTreeNGItem Item="@subItem"></EntitiesTreeNGItem>
                        }
                    </Div>
                </Accordion>
            </CollapseBody>
        </Collapse>
    }
}

@code {

    [Parameter]
    public TreeItem Item { get; set; }

    [CascadingParameter(Name = "AddDialog")]
    public AddEntityNG AddDialogRef { get; set; }

    private String GetIcon(TreeItem item)
    {
        if (item.Entity is ISource sourceItem)
        {
            switch (sourceItem.SourceType)
            {
                case SourceType.Battery: return "fa-battery-full";
                case SourceType.PowerGridSupplier: return "fa-bolt";
                case SourceType.PVE: return "fa-solar-panel";
            }

        }
        else if (item.Entity is IConsumer consumerItem)
        {
            switch (consumerItem.ConsumerType)
            {
                case ConsumerType.GroupNetwork: return "fa-city";
                case ConsumerType.DevicesGroup: return "fa-building";
                case ConsumerType.Device: return "fa-table";
            }
        }
        return "fa-diamond";
    }


    private bool isExpanded = true;
    private bool isAddBlockExpanded;

    private void AddConsumerClicked(ConsumerType consumerType)
    {
        AddDialogRef.AddEntity(ConsumerFactory.GetConsumer(consumerType, "", Item.Id ?? ""));
    }

    private void AddProducerClicked(SourceType sourceType)
    {
        AddDialogRef.AddEntity(SourceFactory.GetSource(sourceType, "", Item.Id ?? ""));
    }

}