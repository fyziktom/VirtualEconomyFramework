@inherits EntitiesBlocksComponentBase
@inject AppData AppData


@if (Item != null)
{
   <Card Margin="Margin.Is2.FromTop">
        <CardHeader>
            <Row>
                <Column>
                    <Span>Komunitní strom</Span>
                </Column>
            </Row>
        </CardHeader>
        <CardBody Margin="Margin.Is2.FromTop">
            
            <Row Margin="Margin.Is2.FromTop">
                <Column>
                    @if (Tree != null)
                    {
                        <CascadingValue Value="@addDialog" Name="AddDialog">
                            <Accordion>
                                @foreach (var item in Tree.GetChilds())
                                {
                                    <EntitiesTreeNGItem Item="@item"></EntitiesTreeNGItem>
                                }
                            </Accordion>
                        </CascadingValue>
                    }
                </Column>
            </Row>
        </CardBody>
    </Card>
}

<AddEntityNG @ref="@addDialog" ItemChanged="@OnChanged" ></AddEntityNG>

@code {
    [Parameter]
    public TreeItem Tree { get; set; } = new TreeItem();

    [Parameter]
    public bool DisplayRefreshButton { get; set; } = false;
    
    [Parameter]
    public string? RootItemId { get; set; }
    

    IList<TreeItem> ExpandedNodes = new List<TreeItem>();

    TreeView<TreeItem>? treeView;

    string? rootItemId;

    protected override async Task OnParametersSetAsync()
    {
        if (RootItemId != rootItemId)
        {
            await LoadData(rootItemId = RootItemId);
        }
        await base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        
        await base.OnInitializedAsync();
    }

    private async Task LoadData(string? rootId)
    {
        Console.WriteLine($"Loading data for {rootId}");
        var root = AppData.EntitiesHandler.GetTree(rootId);

        Tree = new TreeItem();
        await InvokeAsync(StateHasChanged);

        Tree.AddChild(root);
        Item = root;
        await InvokeAsync(StateHasChanged);

        ExpandedNodes = new List<TreeItem>();
        if (Tree.Children != null)
            foreach (var child in Tree.Children)
                ExpandedNodes.Add(child);

        await InvokeAsync(StateHasChanged);

        await ItemChanged.InvokeAsync(Item);
    }

    public async Task<TreeItem> LoadDataBasedOnItemName(string rootname)
    {
        var rootid = AppData.EntitiesHandler.Entities.Values.Where(b => b.Name.Contains(rootname)).FirstOrDefault()?.Id;
        if (rootid != null)
        {
            var root = AppData.EntitiesHandler.GetTree(rootid);
            if (root != null)
            {
                Tree = new TreeItem();
                await InvokeAsync(StateHasChanged);

                Tree.AddChild(root);
                Item = root;
                await InvokeAsync(StateHasChanged);

                ExpandedNodes = new List<TreeItem>();
                if (Tree.Children != null)
                    foreach (var child in Tree.Children)
                        ExpandedNodes.Add(child);

                await InvokeAsync(StateHasChanged);

                await ItemChanged.InvokeAsync(Item);

                return Item;
            }
        }
        return null;
    }

    private async Task SelectedNodeChangedHandler(TreeItem item)
    {
        Item = item;
        AppData.SelectedItem = item;
        await ItemChanged.InvokeAsync(Item);
    }

    private AddEntityNG addDialog;

    private async Task OnChanged()
    {
       Console.WriteLine("Item changed");
       await LoadData(rootItemId);
    }

}
