@using VEDriversLite
@using Microsoft.AspNetCore.WebUtilities
@using System.Globalization
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient _client
@inject AppData AppData
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@page "/dogeaccount"

<div class="container-fluid overflow-auto">
    <div class="row">
        <div class="col d-flex justify-content-center align-items-center">
            <h3>My Doge Account</h3>
        </div>
    </div>

    <VENFTApp_Blazor.Components.Doge.DogeAccountBalance />

    <div class="row" style="margin-top:10px;">
        <div class="col d-flex justify-content-center align-items-center">
            <hr />
        </div>
    </div>

    <div class="row" style="margin-bottom:20px;">
        <div class="col">
            <VENFTApp_Blazor.Components.Spin Spinning="@sendingTransaction" Tip="Sending Transaction...">
                <div class="card" style="margin-top:10px;">
                    <div class="card-header" style="padding-top: 5px;padding-bottom: 5px;">
                        <h5 class="text-center">Send Doge Transaction</h5>
                    </div>
                    <div class="card-body" style="padding: 5px;padding-left: 20px;padding-right: 20px;padding-bottom: 10px;">
                        <div class="row">
                            <div class="col">
                                <div class="row" style="margin-top:10px;">
                                    <div class="col d-flex justify-content-center align-items-center">
                                        <p>To Address:</p>
                                    </div>
                                </div>
                                <div class="row" style="margin-top:10px;">
                                    <div class="col d-flex justify-content-center align-items-center">
                                        <VENFTApp_Blazor.Components.Doge.DogeAddressInput Receiver="@receiver" AddressCheckedInputed="receiverAddressChangedHandler" />
                                        <!--<VENFTApp_Blazor.Components.LoadQRData MarginLeft="10" ReadedTextChanged="QRTextReaded" />-->
                                    </div>
                                </div>
                                <div class="row" style="margin-top:30px;">
                                    <div class="col d-flex justify-content-center align-items-center">
                                        <p>Amount of Doge:</p>
                                    </div>
                                </div>
                                <div class="row" style="margin-top:10px;">
                                    <div class="col d-flex justify-content-center align-items-center">
                                        <input type="number" step="1" min="1" max="@(AppData.DogeAccount.TotalBalance-1)" @bind="@AmountToSend" /> <img style="width: 25px;margin-left: 10px;" src="images/doge.jpg" />
                                    </div>
                                </div>
                                <div class="row" style="margin-top:20px;">
                                    <div class="col d-flex justify-content-center align-items-center">
                                        @if (withMessage)
                                        {
                                            <input type="checkbox" checked="checked" @onchange="eventArgs => { withMessageChanged(eventArgs.Value); }" /><span style="margin-left:10px;">With Message</span><br />
                                        }
                                        else
                                        {
                                            <input type="checkbox" @onchange="eventArgs => { withMessageChanged(eventArgs.Value); }" /><span style="margin-left:10px;">With Message</span><br />
                                        }
                                    </div>
                                    <div class="col d-flex justify-content-center align-items-center">
                                        <input type="checkbox" @onchange="eventArgs => { withImageChanged(eventArgs.Value); }" /><span style="margin-left:10px;">With Image</span><br />
                                    </div>
                                </div>

                                @if (withMessage)
                                {
                                    <div class="row" style="margin-top:10px;">
                                        <div class="col d-flex justify-content-center align-items-center">
                                            <Input Placeholder="Add Your Message" MaxLength="82" @bind-Value=@message Style="font-size:12px; min-width:250px; max-width:350px;" />
                                        </div>
                                    </div>
                                }
                                @if (withImage)
                                {
                                    <VENFTApp_Blazor.Components.UploadImage ImageLink="@message" ImageLinkChanged="@ImageLinkChanged" />
                                }
                                <div class="row" style="margin-top:20px; margin-bottom:10px;">
                                    <div class="col d-flex justify-content-center align-items-center">
                                        <button class="btn btn-primary" @onclick="SendTx">Send</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </VENFTApp_Blazor.Components.Spin>
        </div>
    </div>

    <div class="row" style="margin-bottom:20px;">
        <div class="col">
            <div class="card" style="margin-top:10px;">
                <div class="card-header" style="padding-top: 5px;padding-bottom: 5px;">
                    <h5 class="text-center">Received Transactions</h5>
                </div>
                <div class="card-body" style="padding: 5px;padding-left: 20px;padding-right: 20px;padding-bottom: 10px;">
                    <div class="row">
                        <div class="col">
                            <table style="width:100%;">
                                <thead style="width:100%;">
                                    <tr>
                                        <th>Date Time</th>
                                        <th>Total Amount</th>
                                        <th>Confirmations</th>
                                        <th>Details</th>
                                    </tr>
                                </thead>
                                <tbody style="width:100%;">
                                    @if (AppData.DogeAccount.ReceivedTransactions.Count > 0)
                                    {
                                        @for (var i = 0; i < AppData.DogeAccount.ReceivedTransactions.Count; i++)
                                        {
                                            @if (i < maxLoadedReceivedTxs && AppData.DogeAccount.ReceivedTransactions.Count > i)
                                            {
                                                var tx = AppData.DogeAccount.ReceivedTransactions[i];
                                                <tr>
                                                    <td>@TimeHelpers.UnixTimestampToDateTime(tx.Time * 1000).ToString()</td>
                                                    <td>@tx.Value</td>
                                                    <td>@tx.Confirmations</td>
                                                    <td><button class="btn btn-primary" @onclick="async () => ShowTxDetails(tx.TxId)"><i class="oi oi-info"></i></button></td>
                                                </tr>
                                            }
                                        }
                                    }
                                    @if (maxLoadedReceivedTxs < AppData.DogeAccount.ReceivedTransactions.Count)
                                    {
                                        var diff = AppData.DogeAccount.ReceivedTransactions.Count - maxLoadedSentTxs;
                                        @if (diff < 10)
                                        {
                                            <tr><td colspan="4" class="d-flex justify-content-center"> <button class="btn btn-secondary" @onclick="loadNextReceivedTx">Show Next @diff transactions</button></td></tr>
                                        }
                                        else
                                        {
                                            <tr><td colspan="4" class="d-flex justify-content-center"> <button class="btn btn-secondary" @onclick="loadNextReceivedTx">Show Next 10 transactions</button></td></tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row" style="margin-bottom:20px;">
        <div class="col">
            <div class="card" style="margin-top:10px;">
                <div class="card-header" style="padding-top: 5px;padding-bottom: 5px;">
                    <h5 class="text-center">Sent Transactions</h5>
                </div>
                <div class="card-body" style="padding: 5px;padding-left: 20px;padding-right: 20px;padding-bottom: 10px;">
                    <div class="row">
                        <div class="col">
                            <table style="width:100%;">
                                <thead style="width:100%;">
                                    <tr>
                                        <th>Date Time</th>
                                        <th>Total Amount</th>
                                        <th>Confirmations</th>
                                        <th>Details</th>
                                    </tr>
                                </thead>
                                <tbody style="width:100%;">
                                    @if (AppData.DogeAccount.SentTransactions.Count > 0)
                                    {
                                        @for (var i = 0; i < AppData.DogeAccount.SentTransactions.Count; i++)
                                        {
                                            @if (i < maxLoadedSentTxs && AppData.DogeAccount.SentTransactions.Count > i)
                                            {
                                                var tx = AppData.DogeAccount.SentTransactions[i];
                                                <tr>
                                                    <td>@TimeHelpers.UnixTimestampToDateTime(tx.Time * 1000).ToString()</td>
                                                    <td>@tx.Value</td>
                                                    <td>@tx.Confirmations</td>
                                                    <td><button class="btn btn-primary" @onclick="async () => ShowTxDetails(tx.TxId)"><i class="oi oi-info"></i></button></td>
                                                </tr>
                                            }
                                        }
                                    }
                                    @if (maxLoadedSentTxs < AppData.DogeAccount.SentTransactions.Count)
                                    {
                                        var diff = AppData.DogeAccount.SentTransactions.Count - maxLoadedSentTxs;
                                        @if (diff < 10)
                                        {
                                            <tr><td class="d-flex justify-content-center" colspan="4"> <button class="btn btn-secondary" @onclick="loadNextSentTx">Show Next @diff transactions</button></td></tr>
                                        }
                                        else
                                        {
                                            <tr><td class="d-flex justify-content-center" colspan="4"> <button class="btn btn-secondary" @onclick="loadNextSentTx">Show Next 10 transactions</button></td></tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row" style="margin-bottom:20px;">
        <div class="col">
            <div class="card" style="margin-top:10px;">
                <div class="card-header" style="padding-top: 5px;padding-bottom: 5px;">
                    <h5 class="text-center">Export Account Key</h5>
                </div>
                <div class="card-body" style="padding: 5px;padding-left: 20px;padding-right: 20px;padding-bottom: 10px;">
                    <div class="row">
                        <div class="col">
                            <div class="row" style="margin-top:10px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <span class="text-center">Please dont forget to save your private key!!! It is unique key for your Doge address. If you save it you can backup address anytime.</span>
                                </div>
                            </div>
                            <VENFTApp_Blazor.Components.Account.DisplayAccountKey DogeAccountKey="true" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!--
    <div class="row" style="margin-bottom:20px;">
        <div class="col">
            <div class="card" style="margin-top:10px;">
                <div class="card-header" style="padding-top: 5px;padding-bottom: 5px;">
                    <h5 class="text-center">Advanced Tools</h5>
                </div>
                <div class="card-body" style="padding: 5px;padding-left: 20px;padding-right: 20px;padding-bottom: 10px; min-height:600px;">
                    <div class="row d-flex justify-content-center align-items-center">
                        <div class="col d-flex justify-content-center align-items-center flex-wrap">
                            <VENFTApp_Blazor.Components.SignAndVerifyMessage />
                            <VENFTApp_Blazor.Components.NeblioPriceStats />
                            <VENFTApp_Blazor.Components.NeblioPriceConversion />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    -->

    <VENFTApp_Blazor.Components.Account.UnlockAccount Visible="@unlockAcocuntModalVisible" AccountUnlocked="AccountUnlocked" />

    <VENFTApp_Blazor.Components.InfoEventModal />
</div>

<VENFTApp_Blazor.Components.Modal.Modal @bind-Visible="@txDetailsVisible">
    <ModalHeader>
        <ModalTitle>Transaction Details</ModalTitle>
    </ModalHeader>
    <ModalBody>
        <VENFTApp_Blazor.Components.Doge.DogeTransactionDetails TxId="@txDetailsTxId" />
    </ModalBody>
    <VENFTApp_Blazor.Components.Modal.ModalFooter>
        <ModalButton Kind="ModalButtonKind.Cancel">Cancel</ModalButton>
        <ModalButton OnClick="@context.Cancel">Ok</ModalButton>
    </VENFTApp_Blazor.Components.Modal.ModalFooter>
</VENFTApp_Blazor.Components.Modal.Modal>

@code {

    private string receiver = string.Empty;
    public string Receiver
    {
        get => receiver;
        set
        {
            if (!string.IsNullOrEmpty(value) && receiver != value)
            {
                receiver = value;
                StateHasChanged();
            }
        }
    }

    private bool txDetailsVisible = false;
    private bool withMessage = false;
    private bool withImage = false;
    private bool accountUnlocked = true;
    private bool unlockAcocuntModalVisible = false;
    private bool sendingTransaction = false;

    private int maxLoadedReceivedTxs = 20;
    private int maxLoadedSentTxs = 20;

    private double AmountToSend = 1;

    private string txDetailsTxId = string.Empty;
    private string message = string.Empty;


    protected override Task OnInitializedAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(AppData.DogeAccount.Address))
                TryLogin();
            else
                Load();
        }
        catch (Exception ex)
        {
            Redirect();
        }

        return base.OnInitializedAsync();
    }

    private void RefreshedHandler(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    private async Task Redirect()
    {
        AppData.DogeAccount = new VEDriversLite.DogeAccount();
        await Task.Delay(500);
        NavManager.NavigateTo("/");
    }

    private void AccountUnlocked(string msg)
    {
        accountUnlocked = true;
        unlockAcocuntModalVisible = false;
        StateHasChanged();
        Load();
    }

    private async Task loadNextSentTx()
    {
        maxLoadedSentTxs += 10;
        StateHasChanged();
    }
    private async Task loadNextReceivedTx()
    {
        maxLoadedReceivedTxs += 10;
        StateHasChanged();
    }

    private async Task TryLogin()
    {
        try
        {
            var key = await localStorage.GetItemAsync<string>("key");
            if (!string.IsNullOrEmpty(key))
            {
                unlockAcocuntModalVisible = true;
                await Task.Delay(50);
                StateHasChanged();
            }
            else
            {
                Redirect();
            }

        }
        catch (Exception ex)
        {
            Redirect();
        }
    }

    private async Task withMessageChanged(object e)
    {
        if (withMessage != (bool)e)
            message = string.Empty;
        withMessage = (bool)e;
        if (withImage)
            withImage = false;
        StateHasChanged();
    }
    private async Task withImageChanged(object e)
    {
        if (withImage != (bool)e)
            message = string.Empty;
        withImage = (bool)e;
        if (withMessage)
            withMessage = false;
        StateHasChanged();
    }

    void ImageLinkChanged(string newLink)
    {
        message = newLink;
    }

    private async Task ShowTxDetails(string txId)
    {
        txDetailsTxId = txId;
        StateHasChanged();
        txDetailsVisible = true;
        StateHasChanged();
    }

    private void receiverAddressChangedHandler(string address)
    {
        if (!string.IsNullOrEmpty(address))
        {
            if (address.Length < 8)
            {
                Receiver = string.Empty;
                return;
            }
            if (receiver != address)
                receiver = address;
            StateHasChanged();
        }
        else
        {
            receiver = string.Empty;
        }
    }

    private async Task SendTx()
    {
        if (string.IsNullOrEmpty(receiver))
        {
            await JSRuntime.InvokeVoidAsync("alertMessage", "Please Fill Correct Receiver.");
            return;
        }
        try
        {
            sendingTransaction = true;
            StateHasChanged();

            var res = await AppData.DogeAccount.SendPayment(Receiver, AmountToSend, message);
            Console.WriteLine("Tx send result: " + res);
            if (!res.Item1)
            {
                await JSRuntime.InvokeVoidAsync("alertMessage", "Some error during minting: " + res.Item2);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            sendingTransaction = false;
            StateHasChanged();
        }
    }

    private async Task Load()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("add", out var add))
        {
            receiver = add;
        }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("msg", out var msg))
        {
            message = msg;
            withMessage = true;
        }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("amnt", out var amnt))
        {
            AmountToSend = Convert.ToDouble(amnt, CultureInfo.InvariantCulture);
        }

        if (AppData.DogeAccount != null)
            AppData.DogeAccount.Refreshed += RefreshedHandler;
    }

}
