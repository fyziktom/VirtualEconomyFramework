@using VEDriversLite
@using VEDriversLite.NeblioAPI
@using VEDriversLite.Security
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject HttpClient _client
@inject AppData AppData
@inject NavigationManager NavManager

@page "/"

<PageTitle>VENFT App</PageTitle>

<div class="container-fluid overflow-auto">
    <VENFTApp_Blazor.Components.Spin Spinning="@creatingAddressSpinner" Tip="Creating Address...">
        <div class="row">
            <div class="col">
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <h3>Welcome to VENFT App</h3>
                    </div>
                </div>
                <div class="row" style="margin-top:50px;">
                    <div class="col d-flex justify-content-center align-items-center">
                        <div class="row d-flex w-auto">
                            <div class="col d-flex justify-content-center align-items-center w-auto">
                                <img src="images/Stacked-Slogan_Dark.png" style="max-height:200px; max-width: 200px;" />
                            </div>
                            <div class="col d-flex justify-content-center align-items-center w-auto">
                                <img src="images/doge.jpg" style="max-height:200px; max-width: 200px;" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <hr />
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <span class="text-center">Welcome to <a href="https://nebl.io/" target="_blank">Neblio</a> NFT App written in C# with <a href="https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor" target="_blank">Blazor</a> and <a href="https://veframework.com/" target="_blank">VE Framework</a></span>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex justify-content-center align-items-center">
                        <span class="text-center"><a href="https://about.ve-nft.com/" target="_blank" class="ml-md-auto">Here you can find information about the Wallet and whole project</a></span>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex justify-content-center align-items-center">
                        <span class="text-center"><a href="https://about.ve-nft.com/gettingstarted.html" target="_blank" class="ml-md-auto">Here you can find Getting Started Guide.</a></span>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex justify-content-center align-items-center">
                        <span class="text-center"><a href="https://about.ve-nft.com/index.html#airdrop" target="_blank" class="ml-md-auto">Here you can request for the airdrop</a></span>
                    </div>
                </div>
            </div>
        </div>
        <VENFTApp_Blazor.Components.Account.CreateAccount Visible="@createNewAddressModalVisible" AccountCreated="AccountCreated" />

        <VENFTApp_Blazor.Components.Account.UnlockAccount Visible="@unlockAcocuntModalVisible" AccountUnlocked="AccountUnlocked" />

    </VENFTApp_Blazor.Components.Spin>
    <VENFTApp_Blazor.Components.InfoEventModal />
</div>

@if (accountCreated)
{
    <VENFTApp_Blazor.Components.Alert Type="VENFTApp_Blazor.Components.AlertType.Success">
        <Message>Your Neblio address was created and stored in your browser local memory.</Message>
    </VENFTApp_Blazor.Components.Alert>
}

@if (accountUnlocked)
{
    <VENFTApp_Blazor.Components.Alert Type="VENFTApp_Blazor.Components.AlertType.Success">
        <Message>Your Neblio address was successfully unlocked.</Message>
    </VENFTApp_Blazor.Components.Alert>
}

<Modal Title="Export and Save Private Key"
       Style="min-height:200px; min-width:200px;"
       Visible="@savePrivateKeyVisible"
       OnOk="@savePrivateKeyCancel"
       OnCancel="@savePrivateKeyCancel">
    <div class="row">
        <div class="col d-flex justify-content-center align-items-center">
            <span>Please Save your new private key to safe place. This will allow you to recovery the address.</span>
        </div>
    </div>
    <VENFTApp_Blazor.Components.Account.DisplayAccountKey />
</Modal>

<Modal Title="VENFT Help"
       Visible="@helpModalVisible"
       OnOk="@CloseHelpModal"
       OnCancel="@CloseHelpModal" ZIndex="10" Style="width:90%; height: max-content;">
    <iframe src=@infopageLink style="width: 100%; height: max-content; min-height:600px; min-width: 300px;" frameborder='0' allow='autoplay; encrypted-media; picture-in-picture' allowfullscreen></iframe>
</Modal>

@code {

    private bool helpModalVisible = false;
    private bool savePrivateKeyVisible = false;
    private bool accountCreated = false;
    private bool accountUnlocked = false;
    private bool creatingAddressSpinner = false;
    private bool createNewAddressModalVisible = false;
    private bool unlockAcocuntModalVisible = false;

    private string key = string.Empty;
    private string address = string.Empty;
    private string defaultInfopageLink = "https://about.ve-nft.com/gettingstarted.html";
    private string infopageLink = "https://about.ve-nft.com/gettingstarted.html";
    private string pageSection = string.Empty;

    protected override Task OnInitializedAsync()
    {
        try
        {
            Load().Wait();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Cannot init the page!" + ex.Message);
            try
            {
                AppData.Account = new NeblioAccount();
                Load().Wait();
            }
            catch (Exception e)
            {
                Console.WriteLine("Cannot init the page!" + e.Message);
            }
        }
        return base.OnInitializedAsync();
    }

    async Task Load()
    {
        if (string.IsNullOrEmpty(AppData.Account.Address))
        {
            address = await localStorage.GetItemAsync<string>("address");
            if (string.IsNullOrEmpty(address))
            {
                createNewAddressModalVisible = true;
                StateHasChanged();
            }
            else
            {
                key = await localStorage.GetItemAsync<string>("key");
                if (!string.IsNullOrEmpty(key))
                {
                    unlockAcocuntModalVisible = true;
                    await Task.Delay(50);
                    StateHasChanged();
                }
                else
                {
                    createNewAddressModalVisible = true;
                    StateHasChanged();
                }
            }
        }
    }

    public async Task OpenHelp(string _pageSection)
    {
        if (string.IsNullOrEmpty(_pageSection))
            _pageSection = string.Empty;
        infopageLink = defaultInfopageLink + "#" + _pageSection;
        helpModalVisible = true;
        StateHasChanged();
    }

    private async Task CloseHelpModal(MouseEventArgs e)
    {
        helpModalVisible = false;
        if (accountCreated)
            savePrivateKeyVisible = true;
        StateHasChanged();
    }

    private async Task savePrivateKeyCancel(MouseEventArgs e)
    {
        savePrivateKeyVisible = false;
        StateHasChanged();
        await WaitAndRedirect();
    }

    async Task WaitAndRedirect()
    {
        await Task.Delay(1000);
        NavManager.NavigateTo("/account");
        StateHasChanged();
    }

    private void AccountCreated(string msg)
    {
        accountCreated = true;
        createNewAddressModalVisible = false;

        StateHasChanged();
        OpenHelp("account");
    }

    private void AccountUnlocked(string msg)
    {
        accountUnlocked = true;
        unlockAcocuntModalVisible = false;

        StateHasChanged();
        WaitAndRedirect();
    }
}
