@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NFT.Coruzant
@using VEDriversLite.NeblioAPI
@using VEDriversLite.WooCommerce
@using VEDriversLite.WooCommerce.Dto
@using Tewr.Blazor.FileReader
@using System.Threading
@using System.Threading.Tasks
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AppData AppData
@inject HttpClient _client
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

@page "/mint"

<div class="container-fluid">

    <!--
    @if (!AppData.Account.EnoughBalanceToBuySourceTokens)
    {
        <Alert Type="@AlertType.Error"
               Message="Error"
               Description="Not enough of Neblio to buy the Source tokens. Please transfer at lease 1,0002 NEBL to this address"
               ShowIcon="true" />
    }
    -->

    <div class="row">
        <div class="col">

            <table>
                <tr>
                    <td>With Address:</td>
                    <td>
                        @if (!string.IsNullOrEmpty(selectedAccountAddress))
                        {
                            <span>@selectedAccountAddress</span>
                        }
                    </td>
                </tr>

                <tr>
                    <td>
                        <Dropdown>
                            <Overlay>
                                <Menu>
                                    <MenuItem>
                                        <a target="_blank" rel="noopener noreferrer" @onclick="selectMainAccount">
                                            Main Account
                                        </a>
                                    </MenuItem>
                                    @foreach (var acc in AppData.Account.SubAccounts.Values)
                                    {
                                        <MenuItem>
                                            <a rel="noopener noreferrer" @onclick="() => selectSubAddress(acc.Address)">
                                                @if (!string.IsNullOrEmpty(acc.Name))
                                                {
                                                    @acc.Name
                                                }
                                                else
                                                {
                                                    @acc.Address
                                                }
                                            </a>
                                        </MenuItem>
                                    }
                                </Menu>
                            </Overlay>
                            <ChildContent>
                                <a class="ant-dropdown-link" @onclick:preventDefault>
                                    Select Account <Icon Type="down" />
                                </a>
                            </ChildContent>
                        </Dropdown>
                    </td>

                    <td>
                        <div>
                            <VENFTApp_Blazor.Components.HelperButtons.HelpButton PageSection="mint" />
                        </div>

                        <div class="justify-content-center d-flex">
                            <div @ref=qrCodeRef></div>
                        </div>

                        <div>
                            <VENFTApp_Blazor.Components.Account.AccountBalances Address="@selectedAccountAddress" SubAccount="@subAccount" />
                        </div>
                    </td>
                </tr>
            </table>
        </div>

        <div class="col">
            <p>Mint with source token:</p>
            <ul>
                <RadioGroup @bind-Value="@NFTType">
                    <li><Radio Value="NFTTypes.Image">Image - Original</Radio></li>
                    <li><Radio Value="NFTTypes.Post">Post - Reusable</Radio></li>
                    <li><Radio Value="NFTTypes.Music">Music/Video - Original</Radio></li>
                    <li><Radio Value="NFTTypes.Event">Event</Radio></li>
                    <li><Radio Value="NFTTypes.Ticket">Ticket</Radio></li>
                    @if (SelectedAccountTotalSourceCORZT > 1 && tokenId == CoruzantNFTHelpers.CoruzantTokenId)
                    {

                        <li><Radio Value="NFTTypes.CoruzantProfile">CoruzantProfile</Radio></li>
                        <li><Radio Value="NFTTypes.CoruzantArticle">CoruzantArticle</Radio></li>
                        <!--<Radio Value="NFTTypes.CoruzantPodcast">CoruzantPodcast - Reusable</Radio>-->
                    }
                </RadioGroup>
            </ul>
        </div>

        <div class="col">

            @if (NFTType != NFTTypes.Ticket && NFTType != NFTTypes.Event && NFTType != NFTTypes.CoruzantArticle && NFTType != NFTTypes.CoruzantProfile)
            {
                <VENFTApp_Blazor.Components.NFTs.MintNFTForm TokenId="@tokenId" Address="@selectedAccountAddress" SubAccount="subAccount" NFTType="@NFTType" RedirectToNFTsAfterMint="false" />
            }
            else if (NFTType == NFTTypes.CoruzantArticle || NFTType == NFTTypes.CoruzantProfile)
            {
                <VENFTApp_Blazor.Components.Coruzant.MintCoruzantNFTForm SubAccount="subAccount" Address="@selectedAccountAddress" NFTType="@NFTType" RedirectToNFTsAfterMint="false" />
            }
            else
            {
                <VENFTApp_Blazor.Components.NFTs.Tickets.MintEventAndTickets SubAccount="subAccount" Address="@selectedAccountAddress" TokenId="@tokenId" NFTType="@NFTType" RedirectToNFTsAfterMint="false" />
            }
        </div>

    </div>

    <div class="row">
        <div class="col">

            <div class="row">
                <div class="col" style="margin-top:10px;">

                    <div class="row" style="margin-top:20px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            @if (SelectedAccountTotalSourceVENFT > 1 || SelectedAccountTotalSourceCORZT > 1)
                            {
                                <RadioGroup @bind-Value="@tokenId" OnChange="nftSourceTokensChangedHandler" TValue="string">
                                    @foreach (var t in SelectedAccountTokenSupply)
                                    {
                                        if (t.Value.Amount > 1 && NFTHelpers.AllowedTokens.Contains(t.Value.TokenId))
                                        {
                                            <Radio Value="t.Value.TokenId"><img style="width: 25px;margin-right: 10px;" src="@t.Value.ImageUrl" /> @t.Value.TokenSymbol - @t.Value.Amount</Radio>
                                        }
                                    }
                                </RadioGroup>
                            }
                            else if (SelectedAccountTotalSourceVENFT <= 1 || SelectedAccountTotalSourceCORZT <= 1)
                            {
                                <div class="row">
                                    <div class="col w-100">
                                        <div class="row w-100">
                                            <div class="col d-flex justify-content-center align-items-center">
                                                <span class="text-danger text-center" style="width:90%;">Please load Neblio and VENFT to allow create NFTs. If you do not have any please request free airdrop on project page.</span>
                                            </div>
                                        </div>
                                        <div class="row w-100" style="margin-top:10px;">
                                            <div class="col d-flex justify-content-center align-items-center">
                                                <small class="text-info text-center" style="width:90%;">Please copy your new Neblio Address first. You can find it on top of this page. Just click to  <i class="oi oi-share-boxed"></i> icon next to the address. Then just paste it to form on the Airdrop page with Ctrl+V (Win) or Cmd+V (MacOS).</small>
                                            </div>
                                        </div>
                                        <div class="row w-100" style="margin-top:10px;">
                                            <div class="col d-flex justify-content-center align-items-center">
                                                <a href="https://about.ve-nft.com/#airdrop" target="_blank">Request Free Airdrop Here</a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="row" style="margin-top:20px;">
                        <div class="col" style="margin-top:10px; margin-right:20px; max-width:250px;">
                            <div class="row" style="margin-top:10px; margin-bottom:10px;max-width:250px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <span>The 10 Newest NFTs</span>
                                </div>
                            </div>
                            <div class="row d-flex justify-content-center align-items-center" style="margin-top:10px; margin-bottom:10px; max-width:250px;">
                                <div class="col d-flex justify-content-center align-items-center" style="max-width:250px;">
                                    <div class="card-group d-flex">
                                        @for (var i = 0; i < 10; i++)
                                        {
                                            if (i < NFTs.Count)
                                            {
                                                var nft = NFTs[i];
                                                if (nft.Type == NFTTypes.CoruzantProfile || nft.Type == NFTTypes.CoruzantArticle || nft.Type == NFTTypes.CoruzantPodcast)
                                                {
                                                    <VENFTApp_Blazor.Components.Coruzant.CoruzantNFT Address="@selectedAccountAddress" SubAccount="@subAccount" InputNFT="@nft" OwnNFT="true" />
                                                }
                                                else if (nft.Type != NFTTypes.Message && nft.Type != NFTTypes.Profile && nft.Type != NFTTypes.Payment && nft.TypeText != "NFT Settings" && nft.Type != NFTTypes.Receipt && nft.Type != NFTTypes.Message && nft.Type != NFTTypes.IoTMessage)
                                                {
                                                    if (nft.Type != NFTTypes.Device && nft.Type != NFTTypes.IoTDevice)
                                                    {
                                                        <VENFTApp_Blazor.Components.NFTs.NFT Address="@selectedAccountAddress" SubAccount="@subAccount" InputNFT="@nft" OwnNFT="true" />
                                                    }
                                                    else
                                                    {
                                                        <!--TODO-->
                                                    }
                                                }
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <Modal Title="Buy Source tokens"
               Visible="@orderSourceTokensVisible"
               OnOk="@orderSourceTokensConfirm"
               OnCancel="@orderSourceTokensCancel">
            <div class="row" style="margin-top:10px;">
                <div class="col d-flex justify-content-center align-items-center">
                    <Spin Tip="Processing the Order..." Spinning="@orderingTokens">
                        <div class="row" style="margin-top:20px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <p>Do you want to buy 100 VENFT tokens? It costs 1 NEBL.</p>
                            </div>
                        </div>
                        <div class="row" style="margin-top:20px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <p>Whole order will be processed automatically. It can take few minutes due to speed of confirmations of the transactions.</p>
                            </div>
                        </div>
                        @if (orderingTokensDone)
                        {
                            <Alert Type="@AlertType.Success"
                               Message="Done."
                               Description="Tokens ordered correctly. Now it will take some minute to process order and delivery the tokens."
                               ShowIcon="true" />
                        }
                        <div class="row" style="margin-top:20px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <p>Order TxId: @orderTxId</p>
                            </div>
                        </div>
                    </Spin>
                </div>
            </div>
        </Modal>

        <VENFTApp_Blazor.Components.InfoEventModal />
    </div>
</div>

@code {

    public double SelectedAccountTotalSpendable
    {
        get
        {
            if (!string.IsNullOrEmpty(selectedAccountAddress))
                if (AppData.Account.SubAccounts.TryGetValue(selectedAccountAddress, out var acc))
                    return acc.TotalSpendableBalance;
            return AppData.Account.TotalSpendableBalance;
        }
    }
    public double SelectedAccountTotalUnconfirmed
    {
        get
        {
            if (!string.IsNullOrEmpty(selectedAccountAddress))
                if (AppData.Account.SubAccounts.TryGetValue(selectedAccountAddress, out var acc))
                    return acc.TotalUnconfirmedBalance;
            return AppData.Account.TotalUnconfirmedBalance;
        }
    }
    public double SelectedAccountTotalSourceVENFT
    {
        get
        {
            if (!string.IsNullOrEmpty(selectedAccountAddress))
                if (AppData.Account.SubAccounts.TryGetValue(selectedAccountAddress, out var acc))
                    return acc.SourceTokensBalance;
            return AppData.Account.SourceTokensBalance;
        }
    }
    public double SelectedAccountTotalSourceCORZT
    {
        get
        {
            if (!string.IsNullOrEmpty(selectedAccountAddress))
                if (AppData.Account.SubAccounts.TryGetValue(selectedAccountAddress, out var acc))
                    return acc.CoruzantSourceTokensBalance;
            return AppData.Account.CoruzantSourceTokensBalance;
        }
    }
    public Dictionary<string, TokenSupplyDto> SelectedAccountTokenSupply
    {
        get
        {
            if (!string.IsNullOrEmpty(selectedAccountAddress))
                if (AppData.Account.SubAccounts.TryGetValue(selectedAccountAddress, out var acc))
                    return acc.TokensSupplies;
            return AppData.Account.TokensSupplies;
        }
    }
    public List<INFT> NFTs
    {
        get
        {
            if (!string.IsNullOrEmpty(selectedAccountAddress))
                if (AppData.Account.SubAccounts.TryGetValue(selectedAccountAddress, out var acc))
                    return acc.NFTs;
            return AppData.Account.NFTs;
        }
    }

    private bool orderSourceTokensVisible = false;
    private bool orderingTokens = false;
    private bool orderingTokensDone = false;
    private bool mainAccountSelected = true;
    private bool subAccount = false;

    private string tokenId = NFTHelpers.TokenId;
    private string orderTxId = string.Empty;
    private string selectedAccountAddress = string.Empty;

    private TokenSupplyDto selectedToken = new TokenSupplyDto();
    private CancellationTokenSource cts = new CancellationTokenSource();
    private GetTokenMetadataResponse sourceTokensInfo = new GetTokenMetadataResponse();

    private NFTTypes NFTType = NFTTypes.Image;

    protected override Task OnInitializedAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(AppData.Account.Address))
            {
                Redirect();
            }
            else
            {
                if (AppData.Account != null)
                    AppData.Account.Refreshed += RefreshedHandler;
                selectedAccountAddress = AppData.Account.Address;
                if (AppData.Account.WithoutNFTs)
                    AppData.Account.WithoutNFTs = false;
                mainAccountSelected = true;

                loadQR();

            }
        }
        catch (Exception ex)
        {
            Redirect();
        }

        return base.OnInitializedAsync();
    }


    private void RefreshedHandler(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    private async Task nftTypeChangedHandler(NFTTypes type)
    {
        StateHasChanged();
    }

    private void nftSourceTokensChangedHandler(string tokid)
    {
        StateHasChanged();
    }


    private async Task Redirect()
    {
        AppData.Account = new NeblioAccount();
        await Task.Delay(500);
        NavManager.NavigateTo("/");
    }

    private async Task selectSubAddress(string address)
    {
        //await AppData.Account.StopSubAccountAutorefreshing(selectedAccountAddress);
        selectedAccountAddress = address;
        //await AppData.Account.AllowSubAccountAutorefreshing(address);
        selectedToken = new TokenSupplyDto();
        tokenId = NFTHelpers.TokenId;
        mainAccountSelected = false;
        subAccount = true;
        StateHasChanged();
        loadQR();
    }
    private async Task selectMainAccount(MouseEventArgs e)
    {
        //await AppData.Account.StopSubAccountAutorefreshing(selectedAccountAddress);
        selectedAccountAddress = AppData.Account.Address;
        selectedToken = new TokenSupplyDto();
        tokenId = NFTHelpers.TokenId;
        mainAccountSelected = true;
        subAccount = false;
        StateHasChanged();

        loadQR();
    }

    private async Task orderSourceTokensCancel(MouseEventArgs e)
    {
        orderSourceTokensVisible = false;
    }

    private async Task showOrderTokens()
    {
        orderSourceTokensVisible = true;
    }

    private async Task orderSourceTokensConfirm(MouseEventArgs e)
    {
        try
        {
            orderingTokens = true;
            StateHasChanged();
            var res = await AppData.Account.OrderSourceTokens(1);
            orderingTokens = false;
            if (res.Item1)
            {
                orderTxId = res.Item2;
                orderingTokensDone = true;
            }
            else
            {
                orderTxId = res.Item2;
            }
            orderSourceTokensVisible = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            orderTxId = ex.Message;
            orderingTokens = false;
            Console.WriteLine(ex.Message);
            StateHasChanged();
        }
    }



    private ElementReference qrCodeRef;

    private async Task loadQR()
    {
        await Task.Delay(50);
        await JSRuntime.InvokeVoidAsync("jsFunctions.getQRCode", new object[] { selectedAccountAddress, qrCodeRef });
        StateHasChanged();
    }
}