@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NeblioAPI
@using VEDriversLite.Dto
@using VEDriversLite.UnstoppableDomains
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject AppData AppData
@inject HttpClient _client
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@page "/send"

<div class="container-fluid overflow-auto">

    <VENFTApp_Blazor.Components.Spin Spinning="@sendingTransaction" Tip="Sending Transaction...">
        <div class="row">
            <div class="col">
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <h3>Send Payment</h3>
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <VENFTApp_Blazor.Components.HelperButtons.HelpButton PageSection="sendpayments" />
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex justify-content-center align-items-center">
                        <Dropdown>
                            <Overlay>
                                <Menu>
                                    <MenuItem>
                                        <a target="_blank" rel="noopener noreferrer" @onclick="selectMainAccount">
                                            Main Account
                                        </a>
                                    </MenuItem>
                                    @foreach (var acc in AppData.Account.SubAccounts.Values)
                                    {
                                        <MenuItem>
                                            <a rel="noopener noreferrer" @onclick="() => selectSubAddress(acc.Address)">
                                                @if (!string.IsNullOrEmpty(acc.Name))
                                                {
                                                    @acc.Name
                                                }
                                                else
                                                {
                                                    @acc.Address
                                                }
                                            </a>
                                        </MenuItem>
                                    }
                                </Menu>
                            </Overlay>
                            <ChildContent>
                                <a class="ant-dropdown-link" @onclick:preventDefault>
                                    Select Account <Icon Type="down" />
                                </a>
                            </ChildContent>
                        </Dropdown>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(selectedAccountAddress))
                {
                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <span>Selected Account:</span>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col d-flex justify-content-center align-items-center">
                            <span>@selectedAccountAddress</span>
                        </div>
                    </div>
                }
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex justify-content-center align-items-center">
                        <VENFTApp_Blazor.Components.Account.AccountBalances Address="@selectedAccountAddress" SubAccount="@subAccount" />
                    </div>
                </div>

                <div class="row" style="margin-top:20px;">
                    <div class="col d-flex justify-content-center align-items-center">
                        <RadioGroup @bind-Value="@txType">
                            <Radio Value="TxType.Neblio">Neblio</Radio>
                            <Radio Value="TxType.Tokens">Tokens</Radio>
                            <Radio Value="TxType.SplitNeblio">Split Neblio</Radio>
                            <Radio Value="TxType.SplitTokens">Split Tokens</Radio>
                        </RadioGroup>
                    </div>
                </div>
                @if (txType == TxType.Neblio || txType == TxType.Tokens)
                {
                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <p>To Address:</p>
                        </div>
                    </div>
                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <VENFTApp_Blazor.Components.Account.NeblioAddressInput AddressCheckedInputed="receiverAddressChangedHandler" />
                        </div>
                    </div>
                }
                @if (txType == TxType.Neblio)
                {
                    <div class="row" style="margin-top:30px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <p>Amount of Nebl:</p>
                        </div>
                    </div>
                    if (mainAccountSelected)
                    {
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <input type="number" step="0.0001" min="0.0001" max="@AppData.Account.TotalBalance" @bind="@AmountToSend" /> <img style="width: 25px;margin-left: 10px;" src="images/neblio-icon.png" />
                            </div>
                        </div>
                    }
                    else if (!mainAccountSelected && !string.IsNullOrEmpty(selectedAccountAddress))
                    {
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <input type="number" step="0.0001" min="0.0001" max="@SelectedAccountTotalSpendable" @bind="@AmountToSend" /> <img style="width: 25px;margin-left: 10px;" src="images/neblio-icon.png" />
                            </div>
                        </div>
                    }
                }
                else if (txType == TxType.SplitNeblio)
                {
                    <div class="row" style="margin-top:30px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <p>Amount of Nebl:</p>
                        </div>
                    </div>
                    if (mainAccountSelected)
                    {
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <input type="number" step="0.0001" min="0.0001" max="@Math.Round((AppData.Account.TotalBalance/splitNeblioDto.lots),5)" @bind="@splitNeblioDto.amount" /> <img style="width: 25px;margin-left: 10px;" src="images/neblio-icon.png" />
                            </div>
                        </div>
                    }
                    else if (!mainAccountSelected && !string.IsNullOrEmpty(selectedAccountAddress))
                    {
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <input type="number" step="0.0001" min="0.0001" max="@Math.Round((SelectedAccountTotalSpendable/splitNeblioDto.lots),5)" @bind="@splitNeblioDto.amount" /> <img style="width: 25px;margin-left: 10px;" src="images/neblio-icon.png" />
                            </div>
                        </div>
                    }
                    <div class="row" style="margin-top:30px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <p>Number of Lots:</p>
                        </div>
                    </div>
                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <input type="number" step="1" min="2" max="@NeblioAPIHelpers.MaximumNeblioOutpus" @bind="@splitNeblioDto.lots" />
                        </div>
                    </div>
                    <div class="row" style="margin-top:30px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <p>Total Amount is: @splitNeblioDto.TotalAmount NEBL <img style="width: 12px;margin-left: 5px; margin-bottom:4px;" src="images/neblio-icon.png" /> </p>
                        </div>
                    </div>
                    @if (splitNeblioDto.TotalAmount > SelectedAccountTotalSpendable)
                    {
                        <div class="row" style="margin-top:30px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small class="text-danger">Total Amount is bigger than total account balance.</small>
                            </div>
                        </div>
                    }
                    <div class="row" style="margin-top:30px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <p>Receivers:</p>
                        </div>
                    </div>
                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <small>If you will not add any receiver all outputs will be sended back to your address.</small>
                        </div>
                    </div>
                    <div class="row" style="margin-top:5px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <small>If you will add just one receiver all outputs will go to this address.</small>
                        </div>
                    </div>
                    <div class="row" style="margin-top:5px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <small>If you will select multiple receiver addresses the number of addresses must match the lots.</small>
                        </div>
                    </div>
                    <div class="row" style="margin-top:5px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <small>Add Receiver:</small>
                        </div>
                    </div>
                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <VENFTApp_Blazor.Components.Account.NeblioAddressInput AddressCheckedInputed="@splitNeblioReceiverAddressChangedHandler" />
                        </div>
                    </div>
                    <div class="row" style="margin-top:5px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <small>List of the receivers</small>
                        </div>
                    </div>
                    @foreach (var rec in splitNeblioDto.receivers)
                    {
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <span>@rec</span>
                                <i class="icon-trash" style="font-size:14px; margin-left:10px;" @onclick="() => removeReceiverFromSplitNeblio(rec)"></i>
                            </div>
                        </div>
                    }
                    @if (splitNeblioDto.receivers.Count > 1 && (splitNeblioDto.lots > splitNeblioDto.receivers.Count))
                    {
                        var rest = splitNeblioDto.lots - splitNeblioDto.receivers.Count;
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small class="text-info">Still need to add @rest receivers.</small>
                            </div>
                        </div>
                    }
                    @if (splitNeblioDto.receivers.Count > 1 && (splitNeblioDto.lots < splitNeblioDto.receivers.Count))
                    {
                        var rest = splitNeblioDto.receivers.Count - splitNeblioDto.lots;
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small class="text-danger">Too many receivers receivers. Please remove @rest.</small>
                            </div>
                        </div>
                    }
                    @if (splitNeblioDto.receivers.Count > 1 && (splitNeblioDto.lots == splitNeblioDto.receivers.Count))
                    {
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small class="text-success">Correct number of receivers</small>
                            </div>
                        </div>
                    }
                    @if (splitNeblioDto.receivers.Count == 1)
                    {
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small class="text-success text-center" style="max-width:150px;">Correct number of receivers. All outputs will be send to this one receiver.</small>
                            </div>
                        </div>
                    }
                    else if (splitNeblioDto.receivers.Count == 0)
                    {
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small class="text-success text-center" style="max-width:150px;">Correct number of receivers. All outputs will be send back to this address.</small>
                            </div>
                        </div>
                    }
                }
                else if (txType == TxType.SplitTokens)
                {
                    <div class="row" style="margin-top:30px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <p>Token Type:</p>
                        </div>
                    </div>

                    <div class="row" style="margin-top:20px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <RadioGroup @bind-Value="@selectedTokenId" OnChange="tokenTypeChangedHandler" TValue="string">
                                @foreach (var t in SelectedAccountTokenSupply)
                                {
                                    <Radio Value="t.Value.TokenId"><img style="width: 25px;margin-right: 10px;" src="@t.Value.ImageUrl" /> @t.Value.TokenSymbol - @t.Value.Amount</Radio>
                                }
                            </RadioGroup>
                        </div>
                    </div>

                    <div class="row" style="margin-top:30px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <p>Amount of Tokens:</p>
                        </div>
                    </div>
                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <input type="number" step="1" min="2" max="@Math.Round((selectedToken.Amount/splitNeblioTokenDto.lots),0)" @bind="@splitNeblioTokenDto.amount" /> <img style="width: 25px;margin-left: 10px;" src="@selectedToken.ImageUrl" />
                        </div>
                    </div> <div class="row" style="margin-top:30px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <p>Number of Lots:</p>
                        </div>
                    </div>
                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <input type="number" step="1" min="2" max="@NeblioAPIHelpers.MaximumTokensOutpus" @bind="@splitNeblioTokenDto.lots" />
                        </div>
                    </div>
                    <div class="row" style="margin-top:30px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <p>Total Amount is: @splitNeblioTokenDto.TotalAmount @selectedToken.TokenSymbol <img style="width: 12px;margin-right: 10px; margin-bottom:3px;" src="@selectedToken.ImageUrl" /> </p>
                        </div>
                    </div>
                    @if (splitNeblioTokenDto.TotalAmount > selectedToken.Amount)
                    {
                        <div class="row" style="margin-top:30px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small class="text-danger">Total Amount is bigger than total account balance.</small>
                            </div>
                        </div>
                    }
                    <div class="row" style="margin-top:30px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <p>Receivers:</p>
                        </div>
                    </div>
                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <small>If you will not add any receiver all outputs will be sended back to your address.</small>
                        </div>
                    </div>
                    <div class="row" style="margin-top:5px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <small>If you will add just one receiver all outputs will go to this address.</small>
                        </div>
                    </div>
                    <div class="row" style="margin-top:5px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <small>If you will select multiple receiver addresses the number of addresses must match the lots.</small>
                        </div>
                    </div>
                    <div class="row" style="margin-top:5px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <small>Add Receiver:</small>
                        </div>
                    </div>
                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <VENFTApp_Blazor.Components.Account.NeblioAddressInput AddressCheckedInputed="@splitTokensReceiverAddressChangedHandler" />
                        </div>
                    </div>
                    <div class="row" style="margin-top:5px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <small>List of the receivers</small>
                        </div>
                    </div>
                    @foreach (var rec in splitNeblioTokenDto.receivers)
                    {
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <span>@rec</span>
                                <i class="icon-trash" style="font-size:14px; margin-left:10px;" @onclick="() => removeReceiverFromSplitTokens(rec)"></i>
                            </div>
                        </div>
                    }
                    @if (splitNeblioTokenDto.receivers.Count > 1 && (splitNeblioTokenDto.lots > splitNeblioTokenDto.receivers.Count))
                    {
                        var rest = splitNeblioTokenDto.lots - splitNeblioTokenDto.receivers.Count;
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small class="text-info">Still need to add @rest receivers.</small>
                            </div>
                        </div>
                    }
                    @if (splitNeblioTokenDto.receivers.Count > 1 && (splitNeblioTokenDto.lots < splitNeblioTokenDto.receivers.Count))
                    {
                        var rest = splitNeblioTokenDto.receivers.Count - splitNeblioTokenDto.lots;
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small class="text-danger">Too many receivers receivers. Please remove @rest.</small>
                            </div>
                        </div>
                    }
                    @if (splitNeblioTokenDto.receivers.Count > 1 && (splitNeblioTokenDto.lots == splitNeblioTokenDto.receivers.Count))
                    {
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small class="text-success">Correct number of receivers</small>
                            </div>
                        </div>
                    }
                    @if (splitNeblioTokenDto.receivers.Count == 1)
                    {
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small class="text-success text-center" style="max-width:150px;">Correct number of receivers. All outputs will be send to this one receiver.</small>
                            </div>
                        </div>
                    }
                    else if (splitNeblioTokenDto.receivers.Count == 0)
                    {
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small class="text-success text-center" style="max-height:150px;">Correct number of receivers. All outputs will be send back to this address.</small>
                            </div>
                        </div>
                    }
                }
                else if (txType == TxType.Tokens)
                {
                    <div class="row" style="margin-top:30px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <p>Token Type:</p>
                        </div>
                    </div>
                    <div class="row" style="margin-top:20px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <RadioGroup @bind-Value="@selectedTokenId" OnChange="tokenTypeChangedHandler" TValue="string">
                                @foreach (var t in SelectedAccountTokenSupply)
                                {
                                    <Radio Value="t.Value.TokenId"><img style="width: 25px;margin-left: 10px;" src="@t.Value.ImageUrl" /> @t.Value.TokenSymbol - @t.Value.Amount</Radio>
                                }
                            </RadioGroup>
                        </div>
                    </div>
                    <div class="row" style="margin-top:30px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <p>Amount of tokens:</p>
                        </div>
                    </div>
                    <div class="row" style="margin-top:30px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <small>Available source tokens on address: @selectedToken.Amount</small>
                        </div>
                    </div>
                    <div class="row" style="margin-top:2px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <input type="number" step="1" min="2" max="@selectedToken.Amount" @bind="@AmountTokensToSend" /> <img style="width: 25px;margin-left: 10px;" src="@selectedToken.ImageUrl" />
                        </div>
                    </div>
                }

                @if ((selectedToken.Amount == 0 && txType == TxType.Tokens) || (mainAccountSelected && (AppData.Account.TotalSpendableBalance <= AmountToSend && txType == TxType.Neblio)) || (!mainAccountSelected && (SelectedAccountTotalSpendable <= AmountToSend && txType == TxType.Neblio)))
                {
                    <div class="row" style="margin-top:20px; margin-bottom:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <button class="btn btn-primary disabled" @onclick="SendTransaction">Wrong Amount</button>
                        </div>
                    </div>
                }
                else if ((string.IsNullOrEmpty(receiver) && (txType == TxType.Neblio || txType == TxType.Tokens)))
                {
                    <div class="row" style="margin-top:20px; margin-bottom:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <button class="btn btn-primary disabled" @onclick="SendTransaction">Wrong Receiver</button>
                        </div>
                    </div>
                }
                else if (txType == TxType.SplitTokens && (splitNeblioTokenDto.receivers.Count > 1 && (splitNeblioTokenDto.receivers.Count != splitNeblioTokenDto.lots)))
                {
                    <div class="row" style="margin-top:20px; margin-bottom:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <button class="btn btn-primary disabled" @onclick="SendTransaction">Receivers and Lots must Match</button>
                        </div>
                    </div>
                }
                else if (txType == TxType.SplitNeblio && (splitNeblioDto.receivers.Count > 1 && (splitNeblioDto.receivers.Count != splitNeblioDto.lots)))
                {
                    <div class="row" style="margin-top:20px; margin-bottom:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <button class="btn btn-primary disabled" @onclick="SendTransaction">Receivers and Lots must Match</button>
                        </div>
                    </div>
                }
                else
                {
                    @if (txType == TxType.Neblio && (AmountToSend >= SelectedAccountTotalSpendable))
                    {
                        <div class="row" style="margin-top:20px; margin-bottom:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <button class="btn btn-primary disabled" @onclick="SendTransaction">Not enough Neblio</button>
                            </div>
                        </div>
                    }
                    else if (txType == TxType.Tokens && (AmountTokensToSend >= selectedToken.Amount))
                    {
                        <div class="row" style="margin-top:20px; margin-bottom:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <button class="btn btn-primary disabled" @onclick="SendTransaction">Not enough Tokens</button>
                            </div>
                        </div>
                    }
                    else if (txType == TxType.SplitNeblio && (splitNeblioDto.TotalAmount >= SelectedAccountTotalSpendable))
                    {
                        <div class="row" style="margin-top:20px; margin-bottom:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <button class="btn btn-primary disabled" @onclick="SendTransaction">Not enough Neblio</button>
                            </div>
                        </div>
                    }
                    else if (txType == TxType.SplitTokens && (splitNeblioTokenDto.TotalAmount >= selectedToken.Amount))
                    {
                        <div class="row" style="margin-top:20px; margin-bottom:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <button class="btn btn-primary disabled" @onclick="SendTransaction">Not enough Tokens</button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row" style="margin-top:20px; margin-bottom:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <button class="btn btn-primary" @onclick="SendTransaction">Send</button>
                            </div>
                        </div>
                    }
                }
            </div>
            <div class="col w-25">
                <div class="row" style="margin-top:20px; margin-bottom:10px;">
                    <div class="col d-flex justify-content-center align-items-center">

                        @if (mainAccountSelected)
                        {
                            <VENFTApp_Blazor.Components.Account.TransactionsList SubAccount="false" Address="@AppData.Account.Address" />
                        }
                        else if (!mainAccountSelected && !string.IsNullOrEmpty(selectedAccountAddress))
                        {
                            <VENFTApp_Blazor.Components.Account.TransactionsList SubAccount="true" Address="@selectedAccountAddress" />
                        }
                    </div>
                </div>
            </div>
        </div>

    </VENFTApp_Blazor.Components.Spin>
    <VENFTApp_Blazor.Components.InfoEventModal />
</div>


@code {

    private string receiver = string.Empty;
    public string Receiver
    {
        get => receiver;
        set
        {
            if (!string.IsNullOrEmpty(value))
            {
                receiver = value;
                StateHasChanged();
            }
        }
    }
    public double SelectedAccountTotalSourceVENFT
    {
        get
        {
            if (!string.IsNullOrEmpty(selectedAccountAddress))
                if (AppData.Account.SubAccounts.TryGetValue(selectedAccountAddress, out var acc))
                    return acc.SourceTokensBalance;
            return AppData.Account.SourceTokensBalance;
        }
    }
    public double SelectedAccountTotalSourceCORZT
    {
        get
        {
            if (!string.IsNullOrEmpty(selectedAccountAddress))
                if (AppData.Account.SubAccounts.TryGetValue(selectedAccountAddress, out var acc))
                    return acc.CoruzantSourceTokensBalance;
            return AppData.Account.CoruzantSourceTokensBalance;
        }
    }
    public double SelectedAccountTotalSpendable
    {
        get
        {
            if (!string.IsNullOrEmpty(selectedAccountAddress))
                if (AppData.Account.SubAccounts.TryGetValue(selectedAccountAddress, out var acc))
                    return acc.TotalSpendableBalance;
            return AppData.Account.TotalSpendableBalance;
        }
    }
    public double SelectedAccountTotalUnconfirmed
    {
        get
        {
            if (!string.IsNullOrEmpty(selectedAccountAddress))
                if (AppData.Account.SubAccounts.TryGetValue(selectedAccountAddress, out var acc))
                    return acc.TotalUnconfirmedBalance;
            return AppData.Account.TotalUnconfirmedBalance;
        }
    }
    public Dictionary<string, TokenSupplyDto> SelectedAccountTokenSupply
    {
        get
        {
            if (!string.IsNullOrEmpty(selectedAccountAddress))
                if (AppData.Account.SubAccounts.TryGetValue(selectedAccountAddress, out var acc))
                    return acc.TokensSupplies;
            return AppData.Account.TokensSupplies;
        }
    }

    public enum TxType
    {
        Neblio,
        Tokens,
        SplitNeblio,
        SplitTokens
    }

    private TxType txType = TxType.Neblio;

    private SplitNeblioDto splitNeblioDto = new SplitNeblioDto();
    private SplitNeblioTokensDto splitNeblioTokenDto = new SplitNeblioTokensDto();
    private TokenSupplyDto selectedToken = new TokenSupplyDto();

    private bool sendingTransaction = false;
    private bool mainAccountSelected = false;
    private bool subAccount = false;

    private int AmountTokensToSend = 2;

    private double AmountToSend = 0.001;

    private string txid = string.Empty;
    private string selectedTokenId = NFTHelpers.TokenId;
    private string selectedAccountAddress = string.Empty;


    protected override Task OnInitializedAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(AppData.Account.Address))
            {
                Redirect();
            }
            else
            {
                if (AppData.Account != null)
                    AppData.Account.Refreshed += RefreshedHandler;
                selectedAccountAddress = AppData.Account.Address;
                mainAccountSelected = true;
                if (AppData.Account.TokensSupplies.TryGetValue(selectedTokenId, out var dto))
                {
                    selectedToken = dto;
                }
                else
                {
                    var ts = AppData.Account.TokensSupplies.Values.FirstOrDefault();
                    if (ts != null)
                    {
                        selectedToken = ts;
                        selectedTokenId = ts.TokenId;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Redirect();
        }
        return base.OnInitializedAsync();
    }

    private async Task QRTextReaded(string text)
    {
        Receiver = text;
    }

    private void RefreshedHandler(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    private void txTypeChangedHandler(TxType type)
    {
        StateHasChanged();
    }

    private async Task tokenTypeChangedHandler(string tokid)
    {
        if (mainAccountSelected)
        {
            if (AppData.Account.TokensSupplies.TryGetValue(selectedTokenId, out var dto))
                selectedToken = dto;
            else
                selectedToken = new TokenSupplyDto();
        }
        else if (!mainAccountSelected && !string.IsNullOrEmpty(selectedAccountAddress))
        {
            if (AppData.Account.SubAccounts.TryGetValue(selectedAccountAddress, out var acc))
            {
                if (acc.TokensSupplies.TryGetValue(selectedTokenId, out var dto))
                    selectedToken = dto;
                else
                    selectedToken = new TokenSupplyDto();
            }
        }
        splitNeblioTokenDto.tokenId = selectedTokenId;
        StateHasChanged();
    }

    private async Task Redirect()
    {
        AppData.Account = new NeblioAccount();
        await Task.Delay(500);
        NavManager.NavigateTo("/");
    }

    private async Task selectSubAddress(string address)
    {
        selectedAccountAddress = address;
        selectedToken = new TokenSupplyDto();
        selectedTokenId = string.Empty;
        mainAccountSelected = false;
        subAccount = true;
        StateHasChanged();
    }
    private async Task selectMainAccount(MouseEventArgs e)
    {
        selectedAccountAddress = AppData.Account.Address;
        selectedToken = new TokenSupplyDto();
        selectedTokenId = string.Empty;
        mainAccountSelected = true;
        subAccount = false;
        StateHasChanged();
    }

    private void receiverAddressChangedHandler(string address)
    {
        if (string.IsNullOrEmpty(address))
            return;
        if (address.Length < 8)
        {
            Receiver = string.Empty;
            return;
        }
        Receiver = address;
        StateHasChanged();
    }

    private void splitNeblioReceiverAddressChangedHandler(string address)
    {
        if (string.IsNullOrEmpty(address))
            return;
        if (address.Length < 8)
            return;
        if (splitNeblioDto.receivers.Count < NeblioAPIHelpers.MaximumNeblioOutpus)
            splitNeblioDto.receivers.Add(address);
        StateHasChanged();
    }
    private void splitTokensReceiverAddressChangedHandler(string address)
    {
        if (string.IsNullOrEmpty(address))
            return;
        if (address.Length < 8)
            return;
        if (splitNeblioTokenDto.receivers.Count < NeblioAPIHelpers.MaximumTokensOutpus)
            splitNeblioTokenDto.receivers.Add(address);
        StateHasChanged();
    }
    private async Task removeReceiverFromSplitTokens(string address)
    {
        if (string.IsNullOrEmpty(address))
            return;
        var recs = splitNeblioTokenDto.receivers;
        if (recs.Contains(address))
        {
            var i = recs.IndexOf(address);
            recs.RemoveAt(i);
        }
        splitNeblioTokenDto.receivers = recs;
        StateHasChanged();
    }
    private async Task removeReceiverFromSplitNeblio(string address)
    {
        if (string.IsNullOrEmpty(address))
            return;
        var recs = splitNeblioDto.receivers;
        if (recs.Contains(address))
        {
            var i = recs.IndexOf(address);
            recs.RemoveAt(i);
        }
        splitNeblioDto.receivers = recs;
        StateHasChanged();
    }

    private async Task SendTransaction()
    {
        switch (txType)
        {
            case TxType.Neblio:
                await SendTx();
                break;
            case TxType.Tokens:
                await SendTokenTx();
                break;
            case TxType.SplitNeblio:
                await SplitNeblio();
                break;
            case TxType.SplitTokens:
                await SplitNeblioTokens();
                break;
        }
    }

    private async Task SendTokenTx()
    {
        try
        {
            sendingTransaction = true;
            StateHasChanged();

            var metadata = new Dictionary<string, string>();
            metadata.Add("Data", "Sent with https://ve-nft.com/");

            (bool, string) res = (false, string.Empty);
            if (mainAccountSelected)
                res = await AppData.Account.SendNeblioTokenPayment(selectedToken.TokenId, metadata, Receiver, AmountTokensToSend);
            else if (!mainAccountSelected && !string.IsNullOrEmpty(selectedAccountAddress))
                if (AppData.Account.SubAccounts.TryGetValue(selectedAccountAddress, out var acc))
                    res = await acc.SendNeblioTokenPayment(selectedToken.TokenId, metadata, Receiver, AmountTokensToSend);
            Console.WriteLine("Tx send result: " + res.Item2);
            if (!res.Item1)
            {
                await JSRuntime.InvokeVoidAsync("alertMessage", "Some error during minting: " + res.Item2);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            sendingTransaction = false;
            StateHasChanged();
        }
    }

    private async Task SendTx()
    {
        try
        {
            sendingTransaction = true;
            StateHasChanged();

            (bool, string) res = (false, string.Empty);
            if (mainAccountSelected)
                res = await AppData.Account.SendNeblioPayment(Receiver, AmountToSend);
            else if (!mainAccountSelected && !string.IsNullOrEmpty(selectedAccountAddress))
                if (AppData.Account.SubAccounts.TryGetValue(selectedAccountAddress, out var acc))
                    res = await acc.SendNeblioPayment(Receiver, AmountToSend);
            Console.WriteLine("Tx send result: " + res.Item2);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            sendingTransaction = false;
            StateHasChanged();
        }
    }

    private async Task SplitNeblio()
    {
        try
        {
            sendingTransaction = true;
            StateHasChanged();

            (bool, string) res = (false, string.Empty);
            if (mainAccountSelected)
                res = await AppData.Account.SplitNeblioCoin(splitNeblioDto.receivers, splitNeblioDto.lots, splitNeblioDto.amount);
            else if (!mainAccountSelected && !string.IsNullOrEmpty(selectedAccountAddress))
                if (AppData.Account.SubAccounts.TryGetValue(selectedAccountAddress, out var acc))
                    res = await acc.SplitNeblioCoin(splitNeblioDto.receivers, splitNeblioDto.lots, splitNeblioDto.amount);
            Console.WriteLine("Tx send result: " + res.Item2);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            sendingTransaction = false;
            StateHasChanged();
        }
    }

    private async Task SplitNeblioTokens()
    {
        try
        {
            sendingTransaction = true;
            StateHasChanged();
            var metadata = new Dictionary<string, string>();
            metadata.Add("VENFT", "Sended with VENFT https://about.ve-nft.com/");
            (bool, string) res = (false, string.Empty);
            if (mainAccountSelected)
                res = await AppData.Account.SplitTokens(splitNeblioTokenDto.tokenId, metadata, splitNeblioTokenDto.receivers, splitNeblioTokenDto.lots, splitNeblioTokenDto.amount);
            else if (!mainAccountSelected && !string.IsNullOrEmpty(selectedAccountAddress))
                if (AppData.Account.SubAccounts.TryGetValue(selectedAccountAddress, out var acc))
                    res = await acc.SplitTokens(splitNeblioTokenDto.tokenId, metadata, splitNeblioTokenDto.receivers, splitNeblioTokenDto.lots, splitNeblioTokenDto.amount);
            Console.WriteLine("Tx send result: " + res.Item2);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            sendingTransaction = false;
            StateHasChanged();
        }
    }
}
