@using System.IO;
@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.Neblio
@using VEDriversLite.NeblioAPI
@using VEDriversLite.Extensions.WooCommerce
@using VEDriversLite.Extensions.WooCommerce.Dto
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AppData AppData
@inject HttpClient _client
@inject NavigationManager NavManager
@page "/nftexplorer"

<div class="container-fluid h-100 w-100 overflow-auto">
    <VENFTApp_Blazor.Components.Spin Tip="Loading NFT Explorer..." Spinning="@loadingBrowser">
        <div class="row h-100 w-100">
            <div class="col h-100 w-100">
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <VENFTApp_Blazor.Components.HelperButtons.HelpButton PageSection="yournfts" />
                    </div>
                </div>
                <VENFTApp_Blazor.Components.Account.AccountBalances Address="@AppData.Account.Address" SubAccount="false" />

                <!--<VENFTApp_Blazor.Components.MessageList Address="AppData.Account.Address"/>-->
                <div class="row w-100" style="margin-left:0px; padding:0px;">
                    <div class="col w-100 d-flex justify-content-center align-items-center" style="margin-left:0px; padding:0px;">

                        <Collapse DefaultActiveKey="@(new[]{"Add"})" OnChange="Callback" Accordion Style="width:100%;">
                            <Panel Header="Main Account NFTs" Key="MainAccountNFTs">
                                <HeaderTemplate>
                                    <span class="oi oi-home" aria-hidden="true"></span> Main Account NFTs
                                </HeaderTemplate>
                                <ChildContent>
                                    <div class="row" style="min-width:200px; width:100%; padding:0px;">
                                        <div class="col d-flex justify-content-center align-items-center" style="min-width:200px; width:100%; padding:0px;">
                                            <Collapse DefaultActiveKey="@(new[]{"ReceivedNFTPayments"})" Accordion Style="width:95%;">
                                                <Panel Header="Received NFT Payments" Key="ReceivedNFTPayments">
                                                    <HeaderTemplate>
                                                        <span class="oi oi-dollar" aria-hidden="true"></span> Received NFT Payments
                                                    </HeaderTemplate>
                                                    <ChildContent>
                                                        <VENFTApp_Blazor.Components.NFTs.Payments.PaymentsList Address="@AppData.Account.Address" MainAccount="true" SubAccount="false" />
                                                    </ChildContent>
                                                </Panel>
                                                <Panel Header="Received NFT Receipts" Key="ReceivedNFTReceipts">
                                                    <HeaderTemplate>
                                                        <span class="oi oi-paperclip" aria-hidden="true"></span> Received NFT Receipts
                                                    </HeaderTemplate>
                                                    <ChildContent>
                                                        <VENFTApp_Blazor.Components.NFTs.Payments.ReceiptsList Address="@AppData.Account.Address" MainAccount="true" SubAccount="false" />
                                                    </ChildContent>
                                                </Panel>
                                            </Collapse>
                                        </div>
                                    </div>

                                    <VENFTApp_Blazor.Components.NFTs.NFTList MainAccount="true" SubAccount="false" InBrowser="false"
                                                                        ProductsInTheShop="@ProductsInTheShop"
                                                                        Address="@AppData.Account.Address" />
                                </ChildContent>
                            </Panel>

                            @foreach (var mt in AppData.Account.SubAccounts.Values)
                            {
                                <Panel Key="@mt.Address" Style="width:100%;">
                                    <HeaderTemplate>
                                        @if (mt.BookmarkFromAccount != null && !string.IsNullOrEmpty(mt.BookmarkFromAccount.Name))
                                        {
                                            <span class="oi oi-person" aria-hidden="true"></span> @mt.BookmarkFromAccount.Name
                                        }
                                        else
                                        {
                                            <span class="oi oi-person" aria-hidden="true"></span> @mt.Address
                                        }
                                    </HeaderTemplate>
                                    <ChildContent>
                                        <div class="row" style="min-width:300px; padding:0px;">
                                            <div class="col w-100" style="min-width:300px; padding:0px;">
                                                <VENFTApp_Blazor.Components.Account.AccountBalances Address="@mt.Address" SubAccount="true" />
                                            </div>
                                        </div>
                                        <div class="row w-100" style="min-width:200px; padding:0px;">
                                            <div class="col w-100 d-flex justify-content-center align-items-center" style="min-width:200px; padding:0px;">
                                                <Collapse DefaultActiveKey="@(new[]{"ReceivedNFTPayments"})" Accordion Style="width:95%;">
                                                    <Panel Header="Received NFT Payments" Key="ReceivedNFTPayments">
                                                        <HeaderTemplate>
                                                            <span class="oi oi-dollar" aria-hidden="true"></span> Received NFT Payments
                                                        </HeaderTemplate>
                                                        <ChildContent>
                                                            <VENFTApp_Blazor.Components.NFTs.Payments.PaymentsList Address="@mt.Address" MainAccount="false" SubAccount="true" />
                                                        </ChildContent>
                                                    </Panel>
                                                    <Panel Header="Received NFT Receipts" Key="ReceivedNFTReceipts">
                                                        <HeaderTemplate>
                                                            <span class="oi oi-paperclip" aria-hidden="true"></span> Received NFT Receipts
                                                        </HeaderTemplate>
                                                        <ChildContent>
                                                            <VENFTApp_Blazor.Components.NFTs.Payments.ReceiptsList Address="@mt.Address" MainAccount="false" SubAccount="true" />
                                                        </ChildContent>
                                                    </Panel>
                                                </Collapse>
                                            </div>
                                        </div>
                                        <div class="row" style="min-width:300px; padding:0px;">
                                            <div class="col w-100" style="min-width:300px; padding:0px;">
                                                <VENFTApp_Blazor.Components.NFTs.NFTList SubAccount="true" MainAccount="false" ProductsInTheShop="@ProductsInTheShop" InBrowser="false" Address="@mt.Address" />
                                            </div>
                                        </div>
                                    </ChildContent>
                                </Panel>
                            }
                            <Panel Header="Add New" Key="Add">
                                <button @onclick="addNewSubAccountTab">Add New Sub Account</button>
                            </Panel>
                        </Collapse>
                    </div>
                </div>
            </div>
        </div>
    </VENFTApp_Blazor.Components.Spin>
    <VENFTApp_Blazor.Components.InfoEventModal />
</div>

<Modal Title="Add New SubAccount"
       Visible="@addSubAccountVisible"
       OnOk="@addSubAccountConfirm"
       OnCancel="@addSubAccountCancel">
    <div class="row">
        <div class="col">
            <div class="row" style="margin-top:10px;">
                <div class="col d-flex justify-content-center align-items-center">
                    <span>Input New Sub Account Name</span>
                </div>
            </div>
            <div class="row" style="margin-top:10px;">
                <div class="col d-flex justify-content-center align-items-center">
                    <Input Placeholder="Input New Sub Account Name" @bind-Value="@newSubAccountName" Style="font-size:12px; min-width:150px; max-width:250px;" />
                    <!--<VENFTApp_Blazor.Components.LoadQRData MarginLeft="10" ReadedTextChanged="QRTextReaded" />-->
                </div>
            </div>
            <div class="col d-flex justify-content-center align-items-center w-auto">
                <input type="checkbox" checked="checked" @onchange="eventArgs => { sendInitNeblioChanged(eventArgs.Value); }" /><span style="margin-left:10px;">Send init 0.05 NEBL to this address</span><br />
            </div>
        </div>
    </div>
</Modal>

@code {

    private bool mainNFTsTabVisible = false;
    private bool loadingBrowser = false;
    private bool sendInitPayment = true;
    private bool addSubAccountVisible = false;

    private string addressInOpenTab = string.Empty;
    private string newSubAccountName = string.Empty;
    private string selectedNewTabFromBookmarkName = "Select From Bookmark";

    private Dictionary<string, Product> ProductsInTheShop = new Dictionary<string, Product>();
    private System.Threading.Timer productInWooReloadTimer;

    protected override Task OnInitializedAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(AppData.Account.Address))
            {
                Redirect();
            }
            else
            {
                //InitWooCom();
                if (AppData.Account != null)
                    AppData.Account.Refreshed += RefreshedHandler;
                if (AppData.Account.WithoutNFTs)
                    AppData.Account.WithoutNFTs = false;
                LoadStateFromMemory();
            }
        }
        catch (Exception ex)
        {
            Redirect();
        }

        return base.OnInitializedAsync();
    }

    private void RefreshedHandler(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    private async Task sendInitNeblioChanged(object e)
    {
        sendInitPayment = (bool)e;
        StateHasChanged();
    }

    private async Task Redirect()
    {
        AppData.Account = new NeblioAccount();
        await Task.Delay(500);
        NavManager.NavigateTo("/");
    }

    void Callback(string[] keys)
    {
        var key = keys.Last();
        if (string.IsNullOrEmpty(key))
            return;
        if (key == "Add")
        {
            addSubAccountVisible = true;
            return;
        }
        else if (key == "MainAccountNFTs")
        {
            showMainNFTsTab(null);
            return;
        }
        Console.WriteLine(string.Join(',', keys));
    }

    private async Task InitWooCom()
    {
        if (!WooCommerceHelpers.IsInitialized)
        {
            var apiurl = await localStorage.GetItemAsync<string>("woocom-apiurl");
            if (apiurl == null) apiurl = string.Empty;
            var apikey = await localStorage.GetItemAsync<string>("woocom-apikey");
            if (apikey == null) apikey = string.Empty;
            var apisecret = await localStorage.GetItemAsync<string>("woocom-apisecret");
            if (apisecret == null) apisecret = string.Empty;
            var jwt = await localStorage.GetItemAsync<string>("woocom-jwt");
            if (jwt == null) jwt = string.Empty;
            if (!string.IsNullOrEmpty(apiurl) && !string.IsNullOrEmpty(apikey) && !string.IsNullOrEmpty(apisecret))
            {
                await WooCommerceHelpers.InitStoreApiConnection(apiurl, apikey, apisecret, jwt);
            }
        }

        if (WooCommerceHelpers.IsInitialized)
        {
            await ReloadProducsts();
            productInWooReloadTimer = new System.Threading.Timer(async (object stateInfo) =>
            {
                try
                {
                    await ReloadProducsts();
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Cannot reload woo commerce product list. " + ex.Message);
                }

            }, new System.Threading.AutoResetEvent(false), 10000, 10000);
        }
    }

    private async Task ReloadProducsts()
    {
        if (WooCommerceHelpers.IsInitialized)
        {
            try
            {
                await WooCommerceHelpers.Shop.ReLoadProducts();
                foreach (var p in WooCommerceHelpers.Shop.Products.Values)
                {
                    var utxo = string.Empty;
                    var index = string.Empty;
                    p.meta_data.ForEach(m =>
                    {
                        if (m.key == "Utxo") utxo = Convert.ToString(m.value);
                        if (m.key == "Utxoindex") index = Convert.ToString(m.value);
                    });
                    ProductsInTheShop.Add(utxo + ":" + index, p);
                }
                StateHasChanged();
            }
            catch(Exception ex)
            {
                Console.WriteLine("Cannot reload the eshop products. " + ex.Message);
            }
        }
    }

    private async Task LoadStateFromMemory()
    {
        try
        {
            loadingBrowser = true;

            if (AppData.Account.SubAccounts.Count == 0)
            {
                try
                {
                    var subAccounts = await localStorage.GetItemAsync<string>("subAccounts");
                    if (!string.IsNullOrEmpty(subAccounts))
                        await AppData.Account.LoadSubAccounts(subAccounts);
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Cannot load sub accounts from memory!" + ex.Message);
                }
            }
            loadingBrowser = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            //todo
            Console.WriteLine("Error during loading NFT Explorer. " + ex.Message);
            loadingBrowser = false;
        }
    }

    private async Task showMainNFTsTab(MouseEventArgs e)
    {
        mainNFTsTabVisible = true;
        StateHasChanged();
    }

    private async Task addNewSubAccountTab(MouseEventArgs e)
    {
        addSubAccountVisible = true;
        StateHasChanged();
    }

    private async Task addSubAccountConfirm(MouseEventArgs e)
    {
        await addSubAccount();
    }
    private async Task addSubAccountCancel(MouseEventArgs e)
    {
        addSubAccountVisible = false;
    }

    private async Task addSubAccount()
    {
        try
        {
            addSubAccountVisible = false;
            loadingBrowser = true;
            StateHasChanged();
            var res = await AppData.Account.AddSubAccount(newSubAccountName, sendInitPayment);
            await Task.Delay(50);
            if (res.Item1)
                await localStorage.SetItemAsync("subAccounts", res.Item2);
        }
        finally
        {
            loadingBrowser = false;
            StateHasChanged();
        }
    }

}
