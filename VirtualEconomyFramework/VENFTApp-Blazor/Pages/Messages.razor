@using System.IO;
@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.Messaging
@using VEDriversLite.NeblioAPI
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AppData AppData
@inject HttpClient _client
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@page "/messages"

<div class="container-fluid h-100 w-100 overflow-auto" style="padding:2px;">
    <VENFTApp_Blazor.Components.Spin Tip="Loading Message Browser..." Spinning="@loadingBrowser">
        <div class="row h-100 w-100" style="margin-left:0px; padding:5px;">
            <div class="col h-100 w-100" style="margin-left:0px; padding:0px;">
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <VENFTApp_Blazor.Components.HelperButtons.HelpButton PageSection="messaging" />
                    </div>
                </div>

                <!--<VENFTApp_Blazor.Components.MessageList Address="AppData.Account.Address"/>-->
                <div class="row w-100" style="margin-left:0px; padding:0px;">
                    <div class="col w-100 d-flex justify-content-center align-items-center" style="margin-left:0px; padding:0px;">

                        <Collapse Class="@(loadingBrowser?"disabled":"")" DefaultActiveKey="@(new[]{"Add"})" OnChange="Callback" Accordion Style="width:100%;">
                            <Panel Header="All My Received" Key="AllMyReceived">
                                <HeaderTemplate>
                                    <span class="oi oi-home" aria-hidden="true"></span> All My Received
                                </HeaderTemplate>
                                <ChildContent>
                                    <VENFTApp_Blazor.Components.NFTs.Messages.MessageList Address="@AppData.Account.Address"
                                                                                          MainAccount="true"
                                                                                          SubAccount="false"/>
                                </ChildContent>
                            </Panel>
                            @foreach (var mt in AppData.Account.MessageTabs)
                            {
                                <Panel Key="@mt.Address" Style="width:100%;">
                                    <HeaderTemplate>
                                        @if (mt.BookmarkFromAccount != null && !string.IsNullOrEmpty(mt.BookmarkFromAccount.Name))
                                        {
                                            <span class="oi oi-person" aria-hidden="true"></span> @mt.BookmarkFromAccount.Name
                                        }
                                        else
                                        {
                                            <span class="oi oi-person" aria-hidden="true"></span> @mt.ShortAddress
                                        }
                                    </HeaderTemplate>
                                    <ChildContent>
                                        <div class="row" style="min-width:300px; padding:0px;">
                                            <div class="col w-100" style="min-width:300px; padding:0px;">
                                                <VENFTApp_Blazor.Components.NFTs.Messages.MessagingTabContent InMessageTab="@selectedMessageTab" ReloadRequest="ReloadMessages" />
                                            </div>
                                        </div>
                                    </ChildContent>
                                </Panel>
                            }
                            <Panel Header="Add New Partner" Key="Add">
                                <button @onclick="addMessageTab">Add New Partner</button>
                            </Panel>
                        </Collapse>
                    </div>
                </div>


            </div>
        </div>
    </VENFTApp_Blazor.Components.Spin>
    <VENFTApp_Blazor.Components.InfoEventModal />
</div>

<Modal Title="Open Message Tab"
       Visible="@addMessageTabVisible"
       OnOk="@addMessageTabConfirm"
       OnCancel="@addMessageTabCancel">
    <div class="row">
        <div class="col">
            <div class="row">
                <div class="col d-flex justify-content-center align-items-center">
                    <span>Select from Bookmarks</span>
                </div>
            </div>
            <div class="row" style="margin-top:10px;">
                <div class="col d-flex justify-content-center align-items-center">
                    <Dropdown Trigger="@(new TriggerType[] { TriggerType.Click })">
                        <Overlay>
                            <Menu>
                                @foreach (var b in AppData.Account.Bookmarks)
                                {
                                    <MenuItem>
                                        <span @onclick="() => selectNewTabAddressFromBookmark(b.Address, b.Name)">@b.Name</span>
                                    </MenuItem>
                                }
                            </Menu>
                        </Overlay>
                        <ChildContent>
                            <a class="ant-dropdown-link" @onclick:preventDefault>
                                @selectedNewTabFromBookmarkName <Icon Type="down" />
                            </a>
                        </ChildContent>
                    </Dropdown>
                </div>
            </div>

            <div class="row" style="margin-top:10px;">
                <div class="col d-flex justify-content-center align-items-center">
                    <span>Or Input Neblio Address</span>
                </div>
            </div>
            <div class="row" style="margin-top:10px;">
                <div class="col d-flex justify-content-center align-items-center">
                    <VENFTApp_Blazor.Components.Account.NeblioAddressInput AddressCheckedInputed="newTabAddressChangedHandler" />
                    <!--<VENFTApp_Blazor.Components.LoadQRData MarginLeft="10" ReadedTextChanged="QRTextReaded" />-->
                </div>
            </div>
        </div>
    </div>
</Modal>

@code {

    private bool allMyVisible = false;
    private bool loadingBrowser = false;
    private bool addMessageTabVisible = false;
    private bool collapseNavMenu = true;

    private int refresh = 10;

    private string newTabAddress = string.Empty;
    private string selectedNewTabFromBookmarkName = "Select From Bookmark";
    private string addressInOpenTab = string.Empty;

    private MessageTab selectedMessageTab = new MessageTab("");


    protected override Task OnInitializedAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(AppData.Account.Address))
            {
                Redirect();
            }
            else
            {
                if (AppData.Account != null)
                    AppData.Account.Refreshed += RefreshedHandler;
                if (AppData.Account.WithoutNFTs)
                    AppData.Account.WithoutNFTs = false;
                LoadStateFromMemory();
            }
        }
        catch (Exception ex)
        {
            Redirect();
        }

        return base.OnInitializedAsync();
    }


    void RefreshedHandler(object sender, EventArgs e)
    {
        if (refresh < 0)
        {
            selectedMessageTab.Reload(AppData.Account.NFTs);
            refresh = 10;
        }
        else
        {
            refresh--;
        }
        StateHasChanged();
    }

    private void newTabAddressChangedHandler(string address)
    {
        if (address.Length < 8)
        {
            newTabAddress = string.Empty;
            return;
        }
        newTabAddress = address;
        StateHasChanged();
    }

    private void Callback(string[] keys)
    {
        if (loadingBrowser)
            return;

        var key = keys.Last();
        if (string.IsNullOrEmpty(key))
            return;
        if (key == "Add")
        {
            addMessageTabVisible = true;
            return;
        }
        else if (key == "AllMyReceived")
        {
            showAllMyMessageTab(null);
            return;
        }
        addressInOpenTab = keys.Last();
        selectTab(keys.Last());
        Console.WriteLine(string.Join(',', keys));
    }

    private async Task Redirect()
    {
        AppData.Account = new NeblioAccount();
        await Task.Delay(500);
        NavManager.NavigateTo("/");
    }

    private async Task ReloadMessages(string tabaddress)
    {
        await selectedMessageTab.Reload(AppData.Account.NFTs);
        StateHasChanged();
    }

    private async Task LoadStateFromMemory()
    {
        try
        {
            loadingBrowser = true;

            try
            {
                var msgTabs = await localStorage.GetItemAsync<string>("messagingTabs");
                if (!string.IsNullOrEmpty(msgTabs))
                {
                    if (AppData.Account.MessageTabs.Count == 0)
                    {
                        addressInOpenTab = await AppData.Account.LoadMessageTabs(msgTabs);
                        
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Cannot load message tabs from memory!" + ex.Message);
            }
            loadingBrowser = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            //todo
            Console.WriteLine("Error during loading browser. " + ex.Message);
            loadingBrowser = false;
        }
    }

    private async Task selectMessageTab(MessageTab mt)
    {
        addressInOpenTab = mt.Address;
        await selectTab(mt.Address);
        StateHasChanged();
    }

    private async Task showAllMyMessageTab(MouseEventArgs e)
    {
        allMyVisible = true;
        StateHasChanged();
    }

    private async Task addMessageTab(MouseEventArgs e)
    {
        addMessageTabVisible = true;
        StateHasChanged();
    }

    private async Task addMessageTabConfirm(MouseEventArgs e)
    {
        if (string.IsNullOrEmpty(newTabAddress))
        {
            await JSRuntime.InvokeVoidAsync("alertMessage", "Please Fill Correct Receiver.");
            return;
        }
        await addNewMessageTab();
    }
    private async Task addMessageTabCancel(MouseEventArgs e)
    {
        addMessageTabVisible = false;
    }

    private async Task addNewMessageTab()
    {
        try
        {
            addMessageTabVisible = false;
            var tab = AppData.Account.MessageTabs.Find(t => t.Address == newTabAddress);
            if (tab != null)
            {
                await selectTab(tab.Address);
                return;
            }
            loadingBrowser = true;
            StateHasChanged();
            var res = await AppData.Account.AddMessageTab(newTabAddress);
            await Task.Delay(50);
            if (res.Item1)
                await localStorage.SetItemAsync("messagingTabs", res.Item2);
            addressInOpenTab = newTabAddress;
            var ntab = AppData.Account.MessageTabs.Find(t => t.Address == newTabAddress);
            if (ntab != null)
            {
                await selectTab(ntab.Address);
            }
        }
        finally
        {
            loadingBrowser = false;
            StateHasChanged();
        }
    }

    private async Task selectTab(string address)
    {
        try
        {
            loadingBrowser = true;
            allMyVisible = false;
            StateHasChanged();
            await AppData.Account.SelectMessageTab(address);
            var ntab = AppData.Account.MessageTabs.Find(t => t.Address == address);
            if (ntab != null)
            {
                selectedMessageTab = ntab;
            }
            addressInOpenTab = address;
        }
        finally
        {
            loadingBrowser = false;
            StateHasChanged();
        }
    }

    private async Task removeTab(string address)
    {
        var tbs = await AppData.Account.RemoveMessageTab(address);
        if (tbs.Item1)
            await localStorage.SetItemAsync("messagingTabs", tbs.Item2);
    }

    private async Task selectNewTabAddressFromBookmark(string address, string name)
    {
        selectedNewTabFromBookmarkName = name;
        newTabAddress = address;
        StateHasChanged();
    }
}
