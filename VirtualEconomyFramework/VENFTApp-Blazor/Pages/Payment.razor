@using VEDriversLite
@using Microsoft.AspNetCore.WebUtilities
@using System.Globalization
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient _client
@inject AppData AppData
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@page "/payment"

<div class="container-fluid overflow-auto">
    <div class="row">
        <div class="col d-flex justify-content-center align-items-center">
            <h3>Payment Gateway</h3>
        </div>
    </div>

    @if (currecncy == Currecncy.NBL && !string.IsNullOrEmpty(AppData.Account.Address))
    {
        <VENFTApp_Blazor.Components.Account.AccountBalances Address="@AppData.Account.Address" HideNFTs="true" />
    }
    else if (currecncy == Currecncy.DGC && !string.IsNullOrEmpty(AppData.DogeAccount.Address))
    {
        <VENFTApp_Blazor.Components.Doge.DogeAccountBalance />
    }

    <div class="row" style="margin-top:10px;">
        <div class="col d-flex justify-content-center align-items-center">
            <hr />
        </div>
    </div>

    <div class="row" style="margin-bottom:20px;">
        <div class="col">
            <Spin spinning="@sendingTransaction" tip="Sending Transaction...">
                <div class="card" style="margin-top:10px;">
                    <div class="card-header" style="padding-top: 5px;padding-bottom: 5px;">
                        @if (currecncy == Currecncy.NBL && !string.IsNullOrEmpty(AppData.Account.Address))
                        {
                            <h5 class="text-center">Send Neblio Payment</h5>
                        }
                        else if (currecncy == Currecncy.DGC && !string.IsNullOrEmpty(AppData.DogeAccount.Address))
                        {
                            <h5 class="text-center">Send Doge Payment</h5>
                        }
                    </div>
                    <div class="card-body" style="padding: 5px;padding-left: 20px;padding-right: 20px;padding-bottom: 10px;">
                        <div class="row">
                            <div class="col">
                                <div class="row" style="margin-top:10px;">
                                    <div class="col d-flex justify-content-center align-items-center">
                                        <span>Receiver Address:</span>
                                        <VENFTApp_Blazor.Components.HelperButtons.CopyIcon TextToCopy="@receiver" MarginLeft="10" />
                                    </div>
                                </div>
                                <div class="row" style="margin-top:10px;">
                                    <div class="col d-flex justify-content-center align-items-center">
                                        @if (currecncy == Currecncy.NBL && !string.IsNullOrEmpty(AppData.Account.Address))
                                        {
                                            <a href="https://nft.ve-nft.com/address?add=@receiver" target="_blank">@receiver</a>
                                        }
                                        else if (currecncy == Currecncy.DGC && !string.IsNullOrEmpty(AppData.DogeAccount.Address))
                                        {
                                            <a href="https://dogechain.info/address/@receiver" target="_blank">@receiver</a>
                                        }
                                    </div>
                                </div>
                                @if (currecncy == Currecncy.NBL && !string.IsNullOrEmpty(AppData.Account.Address))
                                {
                                    <div class="row" style="margin-top:30px;">
                                        <div class="col d-flex justify-content-center align-items-center">
                                            <span>Amount of Neblio:</span>
                                        </div>
                                    </div>
                                    <div class="row" style="margin-top:10px;">
                                        <div class="col d-flex justify-content-center align-items-center">
                                            <span>@AmountToSend NEBL <img style="width: 20px;margin-left: 10px;" src="images/neblio-icon.png" /></span>
                                        </div>
                                    </div>
                                }
                                else if (currecncy == Currecncy.DGC && !string.IsNullOrEmpty(AppData.DogeAccount.Address))
                                {
                                    <div class="row" style="margin-top:30px;">
                                        <div class="col d-flex justify-content-center align-items-center">
                                            <span>Amount of Dogecoin:</span>
                                        </div>
                                    </div>
                                    <div class="row" style="margin-top:10px;">
                                        <div class="col d-flex justify-content-center align-items-center">
                                            <span>@AmountToSend DOGE <img style="width: 20px;margin-left: 10px;" src="images/doge.jpg" /></span>
                                        </div>
                                    </div>
                                }
                                <div class="row" style="margin-top:10px;">
                                    <div class="col d-flex justify-content-center align-items-center">
                                        <span>Payment Message:</span>
                                    </div>
                                </div>
                                <div class="row" style="margin-top:10px;">
                                    <div class="col d-flex justify-content-center align-items-center">
                                        <span>@message</span>
                                        <VENFTApp_Blazor.Components.HelperButtons.CopyIcon TextToCopy="@message" MarginLeft="10" />
                                    </div>
                                </div>

                                @if (currecncy == Currecncy.DGC && AmountToSend >= AppData.DogeAccount.TotalSpendableBalance)
                                {
                                    <div class="row" style="margin-top:20px; margin-bottom:10px;">
                                        <div class="col d-flex justify-content-center align-items-center">
                                            <button class="btn btn-secondary disabled" @onclick="SendTx">Not enought Doge</button>
                                        </div>
                                    </div>
                                }
                                else if (currecncy == Currecncy.NBL && AmountToSend >= AppData.Account.TotalSpendableBalance)
                                {
                                    <div class="row" style="margin-top:20px; margin-bottom:10px;">
                                        <div class="col d-flex justify-content-center align-items-center">
                                            <button class="btn btn-secondary" disabled @onclick="SendTx">Not enought Neblio</button>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="row" style="margin-top:20px; margin-bottom:10px;">
                                        <div class="col d-flex justify-content-center align-items-center">
                                            <button class="btn btn-primary" @onclick="SendTx">Send</button>
                                        </div>
                                    </div>
                                }

                                @if (sucessfullSend)
                                {
                                    <hr />
                                    <VENFTApp_Blazor.Components.Alert Type="VENFTApp_Blazor.Components.AlertType.Success">
                                        <Title>Payment Sent.</Title>
                                        <Message>Your payment has been sent :)</Message>
                                    </VENFTApp_Blazor.Components.Alert>
                                    <div class="row" style="margin-top:10px;">
                                        <div class="col d-flex justify-content-center align-items-center">
                                            <span>Transaction Id</span>
                                        </div>
                                    </div>
                                    <div class="row" style="margin-top:5px;">
                                        <div class="col d-flex justify-content-center align-items-center">
                                            @if (currecncy == Currecncy.NBL && !string.IsNullOrEmpty(AppData.Account.Address))
                                            {
                                                <a href="https://explorer.nebl.io/tx/@txid" target="_blank">@txid</a>
                                            }
                                            else if (currecncy == Currecncy.DGC && !string.IsNullOrEmpty(AppData.DogeAccount.Address))
                                            {
                                                <a href="https://dogechain.info/tx/@txid" target="_blank">@txid</a>
                                            }
                                            <VENFTApp_Blazor.Components.HelperButtons.CopyIcon TextToCopy="@txid" MarginLeft="10" />
                                        </div>
                                    </div>
                                    <hr />
                                    @if (!string.IsNullOrEmpty(redirect))
                                    {
                                        <div class="row" style="margin-top:10px; margin-bottom:20px;">
                                            <div class="col d-flex justify-content-center align-items-center">
                                                <button class="btn btn-primary" @onclick="GoBackToShop">Go Back to the Shop</button>
                                            </div>
                                        </div>
                                        <hr />
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </Spin>
        </div>
    </div>

    <VENFTApp_Blazor.Components.InfoEventModal />
</div>

<Modal Title="Unlock Account"
       Visible="@unlockAcocuntModalVisible"
       OnOk="@UnlockAccountConfirm"
       OnCancel="@UnclockAccountCancel">
    <div class="row">
        <div class="col">
            <Spin Tip="Unlocking..." Spinning="@unlockingAccount">
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <span>Please Input password</span>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex justify-content-center align-items-center">
                        <InputPassword AutoFocus="true" Placeholder="Input password" @bind-Value="@unlockPassword" @onkeydown="@UnlockAccountEnter" style="font-size:12px; min-width:150px; max-width:250px;" />
                    </div>
                </div>

                @if (unlockOrClearCashMessage)
                {
                    <VENFTApp_Blazor.Components.Alert Type="VENFTApp_Blazor.Components.AlertType.Error">
                        <Message>Unlock account.</Message>
                    </VENFTApp_Blazor.Components.Alert>
                }
                @if (accountUnlockingError)
                {
                    <VENFTApp_Blazor.Components.Alert Type="VENFTApp_Blazor.Components.AlertType.Error">
                        <Message>Wrong Password.</Message>
                    </VENFTApp_Blazor.Components.Alert>
                }
            </Spin>
        </div>
    </div>
</Modal>

<Modal Title="Redirecting back to the shop"
       Visible="@redirectingBackToShopVisible"
       Footer="null">
    <div class="row">
        <div class="col">
            <div class="row">
                <div class="col d-flex justify-content-center align-items-center">
                    <span>You will be redirected back to the Shop in </span>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex justify-content-center align-items-center">
                    <h6>@redirectingBackToShopCountDown @((redirectingBackToShopCountDown > 1)? "seconds" : "second")</h6>
                </div>
            </div>
            <div class="row" style="margin-top:10px;">
                <div class="col d-flex justify-content-center align-items-center">
                    <span>Redirect address:</span>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex justify-content-center align-items-center">
                    <span>@redirect</span>
                </div>
            </div>
        </div>
    </div>
</Modal>

@code {

    private enum Currecncy
    {
        NBL,
        DGC,
        BTC
    }

    private bool accountUnlocked = true;
    private bool unlockAcocuntModalVisible = false;
    private bool unlockOrClearCashMessage = false;
    private bool unlockingAccount = false;
    private bool accountUnlockingError = false;
    private bool redirectingBackToShopVisible = false;
    private bool sendingTransaction = false;
    private bool sucessfullSend = false;

    private int redirectingBackToShopCountDown = 5;

    private double AmountToSend = 1;

    private string receiver = string.Empty;
    private string message = string.Empty;
    private string currency = string.Empty;
    private string redirect = string.Empty;
    private string txid = string.Empty;
    private string unlockPassword = string.Empty;

    private Currecncy currecncy = Currecncy.NBL;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
                if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("add", out var add))
                {
                    receiver = add;
                }
                if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("msg", out var msg))
                {
                    message = msg;
                }
                if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("rdc", out var rdc))
                {
                    redirect = rdc;
                }
                if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("curr", out var curr))
                {
                    if (curr == "DGC") currecncy = Currecncy.DGC;
                    if (curr == "DOGE") currecncy = Currecncy.DGC;
                    if (curr == "NEBL") currecncy = Currecncy.NBL;
                    if (curr == "NBL") currecncy = Currecncy.NBL;
                }
                if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("amnt", out var amnt))
                {
                    AmountToSend = Convert.ToDouble(amnt, CultureInfo.InvariantCulture);
                }

                if (string.IsNullOrEmpty(AppData.DogeAccount.Address))
                    TryLogin();
            }
            catch (Exception ex)
            {
                Redirect();
            }
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    private void RefreshedHandler(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    private async Task Redirect()
    {
        AppData.DogeAccount = new VEDriversLite.DogeAccount();
        await Task.Delay(500);
        NavManager.NavigateTo("/");
    }

    private async Task TryLogin()
    {
        try
        {
            var key = await localStorage.GetItemAsync<string>("key");
            if (!string.IsNullOrEmpty(key))
            {
                unlockAcocuntModalVisible = true;
                await Task.Delay(50);
                StateHasChanged();
            }
            else
            {
                await Redirect();
            }
        }
        catch (Exception ex)
        {
            await Redirect();
        }
    }

    private async Task SendTx()
    {
        if (string.IsNullOrEmpty(receiver))
        {
            await JSRuntime.InvokeVoidAsync("alertMessage", "Please Fill Correct Receiver.");
            return;
        }
        try
        {
            sendingTransaction = true;
            StateHasChanged();
            (bool, string) res = (false, string.Empty);
            switch (currecncy)
            {
                case Currecncy.NBL:
                    res = await AppData.Account.SendNeblioPayment(receiver, AmountToSend, message);
                    break;
                case Currecncy.DGC:
                    res = await AppData.DogeAccount.SendPayment(receiver, AmountToSend, message);
                    break;
            }

            Console.WriteLine("Tx send result: " + res.Item2);
            if (!res.Item1)
            {
                txid = string.Empty;
                sucessfullSend = false;
                await JSRuntime.InvokeVoidAsync("alertMessage", "Some error during minting: " + res.Item2);
            }
            else
            {
                txid = res.Item2;
                sucessfullSend = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            sendingTransaction = false;
            StateHasChanged();
        }
    }

    public async Task GoBackToShop(MouseEventArgs e)
    {
        if (!string.IsNullOrEmpty(redirect))
        {
            redirectingBackToShopVisible = true;
            StateHasChanged();
            while (redirectingBackToShopCountDown > 0)
            {
                await Task.Delay(1000);
                redirectingBackToShopCountDown--;
                StateHasChanged();
            }
            NavManager.NavigateTo(redirect);
        }
    }

    private async Task UnlockAccountConfirm(MouseEventArgs e)
    {
        try
        {
            if (string.IsNullOrEmpty(unlockPassword))
                return;
            if (unlockPassword.Length < 5)
                return;

            unlockingAccount = true;
            StateHasChanged();

            var pass = unlockPassword;

            var load = false;
            switch (currecncy)
            {
                case Currecncy.NBL:
                    load = await LoadNeblioAccount();
                    break;
                case Currecncy.DGC:
                    load = await LoadDogeAccount();
                    break;
            }
            if (!load)
            {
                await JSRuntime.InvokeVoidAsync("alertMessage", "Cannot load the account.");
                unlockAcocuntModalVisible = false;
                unlockingAccount = false;
                accountUnlockingError = false;
                StateHasChanged();
                await Task.Delay(50);
                await Redirect();
            }
            else
            {
                unlockAcocuntModalVisible = false;
                unlockingAccount = false;
                accountUnlockingError = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            accountUnlockingError = true;
        }
        finally
        {
            unlockingAccount = false;
            unlockOrClearCashMessage = false;
            StateHasChanged();
        }
    }

    public void UnlockAccountEnter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            StateHasChanged();
            UnlockAccountConfirm(null);
        }
    }

    private void UnclockAccountCancel(MouseEventArgs e)
    {
        accountUnlockingError = false;
        unlockOrClearCashMessage = false;
        unlockAcocuntModalVisible = true;
        unlockOrClearCashMessage = true;
    }

    public async Task<bool> LoadDogeAccount()
    {
        if (string.IsNullOrEmpty(AppData.DogeAccount.Address))
        {
            var key = await localStorage.GetItemAsync<string>("dogekey");
            if (!string.IsNullOrEmpty(key))
            {
                await Task.Delay(100);
                if (!await AppData.DogeAccount.LoadAccount(unlockPassword, key, ""))
                {
                    await JSRuntime.InvokeVoidAsync("alertMessage", "Cannot unlock the doge account.");
                }
                else
                {
                    if (AppData.DogeAccount != null)
                        AppData.DogeAccount.Refreshed += RefreshedHandler;
                    return true;
                }
            }
        }

        return false;
    }

    public async Task<bool> LoadNeblioAccount()
    {
        if (string.IsNullOrEmpty(AppData.Account.Address))
        {
            var key = await localStorage.GetItemAsync<string>("key");
            if (!string.IsNullOrEmpty(key))
            {
                await Task.Delay(100);
                if (!await AppData.Account.LoadAccount(unlockPassword, key, "", withoutNFTs: true))
                {
                    await JSRuntime.InvokeVoidAsync("alertMessage", "Cannot unlock the doge account.");
                }
                else
                {
                    if (AppData.Account != null)
                        AppData.Account.Refreshed += RefreshedHandler;
                    return true;
                }
            }
        }

        return false;
    }
}
