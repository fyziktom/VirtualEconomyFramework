@using VEDriversLite
@using VEDriversLite.NeblioAPI
@using VEDriversLite.NFT
@using VEDriversLite.Dto
@using Newtonsoft.Json
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient _client
@inject AppData AppData
@inject NavigationManager NavManager

@page "/account"

<PageTitle>VENFT App - Account</PageTitle>

@if (AppData.Account != null && !string.IsNullOrEmpty(AppData.Account.Address))
{
    <div class="container-fluid overflow-auto">
        <div class="row">
            <div class="col d-flex justify-content-center align-items-center">
                <h3>Main Account</h3>
            </div>
        </div>

        <div class="row">
            <div class="col d-flex justify-content-center align-items-center">
                <VENFTApp_Blazor.Components.HelperButtons.HelpButton PageSection="account" />
            </div>
        </div>

        <VENFTApp_Blazor.Components.Account.AccountBalances Address="@AppData.Account.Address" SubAccount="false" />

        <div class="row" style="margin-top:10px;">
            <div class="col d-flex justify-content-center align-items-center">
                <hr />
            </div>
        </div>
        <div class="row" style="margin-bottom:20px;">
            <div class="col">
                <div class="card" style="margin-top:10px;">
                    <div class="card-header" style="padding-top: 5px;padding-bottom: 5px;">
                        <h5 class="text-center">Profile</h5>
                    </div>
                    <div class="card-body d-flex justify-content-center w-100">
                        @if (AppData.Account.SourceTokensBalance == 0 && AppData.Account.TotalSpendableBalance == 0)
                        {
                        <div class="row">
                            <div class="col w-100">
                                <div class="row w-100">
                                    <div class="col d-flex justify-content-center align-items-center">
                                        <span class="text-danger text-center" style="width:90%;">Please load Neblio and VENFT to allow create Profile. If you do not have any please request free airdrop on project page.</span>
                                    </div>
                                </div>
                                <div class="row w-100" style="margin-top:10px;">
                                    <div class="col d-flex justify-content-center align-items-center">
                                        <small class="text-info text-center" style="width:90%;">Please copy your new Neblio Address first. You can find it on top of this page. Just click to  <i class="oi oi-share-boxed"></i> icon next to the address. Then just paste it to form on the Airdrop page with Ctrl+V (Win) or Cmd+V (MacOS).</small>
                                    </div>
                                </div>
                                <div class="row w-100" style="margin-top:10px;">
                                    <div class="col d-flex justify-content-center align-items-center">
                                        <a href="https://about.ve-nft.com/#airdrop" target="_blank">Request Free Airdrop Here</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                        }
                        else
                        {
                            <VENFTApp_Blazor.Components.NFTs.Profile ReadOnlyProfile="@false" NFT="@AppData.Account.Profile" />
                        }
                    </div>
                </div>

                <div class="card" style="margin-top:10px;">
                    <div class="card-header" style="padding-top: 5px;padding-bottom: 5px;">
                        <h5 class="text-center">Request Payment</h5>
                    </div>
                    <div class="card-body" style="padding: 5px;padding-left: 20px;padding-right: 20px;padding-bottom: 10px;">
                        <div class="row" style="margin-top:10px; margin-bottom:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <span class="text-center">Here you can create QR code of request for a payment with specific amount and message which will go to your address.</span>
                            </div>
                        </div>
                        <VENFTApp_Blazor.Components.Account.RequestPayment Address="@AppData.Account.Address" DisplayButton="true" />
                    </div>
                </div>

                <div class="card" style="margin-top:10px;">
                    <div class="card-header" style="padding-top: 5px;padding-bottom: 5px;">
                        <h5 class="text-center">Tokens Supplies</h5>
                    </div>
                    <div class="card-body" style="padding: 5px;padding-left: 20px;padding-right: 20px;padding-bottom: 10px;">
                        <VENFTApp_Blazor.Components.Account.TokenSupplies />
                    </div>
                </div>

                <div class="card" style="margin-top:10px;">
                    <div class="card-header" style="padding-top: 5px;padding-bottom: 5px;">
                        <h5 class="text-center">Lock Unlock Account</h5>
                    </div>
                    <div class="card-body" style="padding: 5px;padding-left: 20px;padding-right: 20px;padding-bottom: 10px;">
                        <VENFTApp_Blazor.Components.Account.LockUnlockAccount />
                    </div>
                </div>
                <div class="card" style="margin-top:10px;">
                    <div class="card-header" style="padding-top: 5px;padding-bottom: 5px;">
                        <h5 class="text-center">Export Account Key</h5>
                    </div>
                    <div class="card-body" style="padding: 5px;padding-left: 20px;padding-right: 20px;padding-bottom: 10px;">
                        <div class="row">
                            <div class="col">
                                <div class="row" style="margin-top:10px;">
                                    <div class="col d-flex justify-content-center align-items-center">
                                        <span class="text-center">Please dont forget to save your private key!!! It is unique key for your Neblio address. If you save it you can backup address anytime.</span>
                                    </div>
                                </div>
                                <VENFTApp_Blazor.Components.Account.DisplayAccountKey DogeAccountKey="false" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card" style="margin-top:10px;">
                    <div class="card-header" style="padding-top: 5px;padding-bottom: 5px;">
                        <h5 class="text-center">Download backup file</h5>
                    </div>
                    <div class="card-body" style="padding: 5px;padding-left: 20px;padding-right: 20px;padding-bottom: 10px;">
                        <div class="row">
                            <div class="col">
                                <div class="row" style="margin-top:10px;">
                                    <div class="col d-flex justify-content-center align-items-center">
                                        <span class="text-center">Here you can download file with backup of VENFT App data</span>
                                    </div>
                                </div>
                                <div class="row" style="margin-top:10px;">
                                    <div class="col d-flex justify-content-center align-items-center">
                                        <button class="btn btn-primary" @onclick="downloadBackupData">Download VENFT App data</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col">
                <div class="card" style="margin-top:10px;">
                    <div class="card-header" style="padding-top: 5px;padding-bottom: 5px;">
                        <h5 class="text-center">Received NFT Payments</h5>
                    </div>
                    <div class="card-body d-flex justify-content-center align-items-center" style="min-height:150px; padding: 5px;padding-left: 20px;padding-right: 20px;padding-bottom: 10px;">
                        <VENFTApp_Blazor.Components.NFTs.Payments.PaymentsList Address="@AppData.Account.Address" MainAccount="true" />
                    </div>
                </div>
                <div class="card" style="margin-top:10px;">
                    <div class="card-header" style="padding-top: 5px;padding-bottom: 5px;">
                        <h5 class="text-center">Received NFT Receipts</h5>
                    </div>
                    <div class="card-body d-flex justify-content-center align-items-center" style="min-height:150px; padding: 5px;padding-left: 20px;padding-right: 20px;padding-bottom: 10px;">
                        <VENFTApp_Blazor.Components.NFTs.Payments.ReceiptsList Address="@AppData.Account.Address" MainAccount="true" />
                    </div>
                </div>
                <div class="card" style="margin-top:10px;">
                    <div class="card-header" style="padding-top: 5px;padding-bottom: 5px;">
                        <h5 class="text-center">Transactions List</h5>
                    </div>
                    <div class="card-body" style="min-height: 150px; padding: 5px; padding-left: 20px; padding-right: 20px; padding-bottom: 10px;">
                        <div class="row" style="margin-top:30px;">
                            <div class="col">
                                <div class="row" style="min-width:350px;">
                                    <div class="col w-100 d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                        <VENFTApp_Blazor.Components.Account.TransactionsList Address="@AppData.Account.Address" SubAccount="@false" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <Modal Title="Your Private Key"
               Visible="@downloadBackupDataVisible"
               OnOk="@DownloadBackupDataCancel"
               OnCancel="@DownloadBackupDataCancel">
            <div class="row">
                <div class="col">
                    <div class="row">
                        <div class="col d-flex justify-content-center align-items-center">
                            <span>Download Backup File</span>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col d-flex justify-content-center align-items-center">
                            <VENFTApp_Blazor.Components.HelperButtons.CopyIcon TextToCopy="@backupData" />
                            <VENFTApp_Blazor.Components.HelperButtons.SaveTextAsFile MarginLeft="10" TextToSave="@backupData" FileName="@filename" />
                        </div>
                    </div>
                </div>
            </div>
        </Modal>

        <VENFTApp_Blazor.Components.InfoEventModal />
    </div>
}
@code {

    private bool downloadBackupDataVisible = false;

    private string backupData = string.Empty;
    private string filename = string.Empty;

    protected override Task OnInitializedAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(AppData.Account.Address))
                Redirect();
            else
                Load();
        }
        catch (Exception ex)
        {
            Redirect();
        }

        return base.OnInitializedAsync();
    }

    private void RefreshedHandler(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    private void ProfileRefreshedHandler(object sender, INFT e)
    {
        StateHasChanged();
    }


    private async Task Load()
    {
        if (AppData.Account != null)
        {
            AppData.Account.Refreshed -= RefreshedHandler;
            AppData.Account.Refreshed += RefreshedHandler;
            AppData.Account.ProfileUpdated -= ProfileRefreshedHandler;
            AppData.Account.ProfileUpdated += ProfileRefreshedHandler;
            if (AppData.Account.WithoutNFTs)
                AppData.Account.WithoutNFTs = false;
        }

        try
        {
            await AppData.Account.ReloadAccountInfo();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Cannot refresh account tx list" + ex.Message);
        }
        if (AppData.Account.Bookmarks.Count == 0)
        {
            try
            {
                var bookmarks = await localStorage.GetItemAsync<string>("bookmarks");
                if (bookmarks == "{}" || bookmarks == "[]")
                    bookmarks = string.Empty;

                if (!string.IsNullOrEmpty(bookmarks))
                    await AppData.Account.LoadBookmarks(bookmarks);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Cannot load bookmarks!" + ex.Message);
            }
        }
        if (AppData.Account.SubAccounts.Count == 0)
        {
            try
            {
                var subAccounts = await localStorage.GetItemAsync<string>("subAccounts");
                if (!string.IsNullOrEmpty(subAccounts))
                    await AppData.Account.LoadSubAccounts(subAccounts);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Cannot load sub accounts from memory!" + ex.Message);
            }
        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("Account - Rendered");
        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task Redirect()
    {
        AppData.Account = new NeblioAccount();
        await Task.Delay(500);
        NavManager.NavigateTo("/");
    }

    private async Task DownloadBackupDataCancel(MouseEventArgs e)
    {
        downloadBackupDataVisible = false;
    }

    private async Task downloadBackupData(MouseEventArgs e)
    {
        var bookmarks = await localStorage.GetItemAsync<string>("bookmarks");
        var subAccounts = await localStorage.GetItemAsync<string>("subAccounts");
        var browserTabs = await localStorage.GetItemAsync<string>("browserTabs");
        var messageTabs = await localStorage.GetItemAsync<string>("messageTabs");
        var address = await localStorage.GetItemAsync<string>("address");
        var key = await localStorage.GetItemAsync<string>("key");
        var dogeaddress = await localStorage.GetItemAsync<string>("dogeaddress");
        var dogekey = await localStorage.GetItemAsync<string>("dogekey");

        var wocapiurl = await localStorage.GetItemAsync<string>("woocom-apiurl");
        var wocapikey = await localStorage.GetItemAsync<string>("woocom-apikey");
        var wocapisecret = await localStorage.GetItemAsync<string>("woocom-apisecret");
        var wocapijwt = await localStorage.GetItemAsync<string>("woocom-jwt");

        var dto = new BackupDataDto();
        if (!string.IsNullOrEmpty(bookmarks))
            dto.Bookmarks = bookmarks;
        if (!string.IsNullOrEmpty(browserTabs))
            dto.BrowserTabs = browserTabs;
        if (!string.IsNullOrEmpty(messageTabs))
            dto.MessageTabs = messageTabs;
        if (!string.IsNullOrEmpty(subAccounts))
            dto.SubAccounts = subAccounts;
        if (!string.IsNullOrEmpty(address))
            dto.Address = address;
        if (!string.IsNullOrEmpty(key))
            dto.Key = key;
        if (!string.IsNullOrEmpty(dogeaddress))
            dto.DogeAddress = dogeaddress;
        if (!string.IsNullOrEmpty(dogekey))
            dto.DogeKey = dogekey;
        if (!string.IsNullOrEmpty(wocapiurl))
            dto.WoCAPIUrl = wocapiurl;
        if (!string.IsNullOrEmpty(wocapikey))
            dto.WoCAPIKey = wocapikey;
        if (!string.IsNullOrEmpty(wocapisecret))
            dto.WoCAPISecret = wocapisecret;
        if (!string.IsNullOrEmpty(wocapijwt))
            dto.WoCAPIJWT = wocapijwt;

        filename = "Backup-Export-" + AppData.Account.Address + "-" + DateTime.UtcNow.ToString("dd-MM-yyyyThh_mm_ss") + ".txt";
        backupData = JsonConvert.SerializeObject(dto);
        downloadBackupDataVisible = true;
    }

}
