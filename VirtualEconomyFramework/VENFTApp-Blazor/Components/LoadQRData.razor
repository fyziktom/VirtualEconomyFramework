@inject IJSRuntime JSRuntime

<i class="oi oi-aperture" style="margin-left:@marginleft; padding-top:@paddingtop; padding-left:@padding; font-size:@fontsize;" @onclick="showQRDialogOpen"></i>

<Modal Title="Load Data From QR"
       Visible="@showQRDialogVisible"
       OnOk="@showQRDialogCancel"
       Style="width:auto; max-width:300px;"
       OnCancel="@showQRDialogCancel">
    <VENFTApp_Blazor.Components.Spin Tip="@status" Spinning="@doneVisible">
        <div class="row" style="margin-top:10px;">
            <div class="col d-flex justify-content-center align-items-center">
                <div id="CameraStream"></div>
            </div>
        </div>
        <div class="row" style="margin-top:10px;">
            <div class="col d-flex justify-content-center align-items-center">
                <VENFTApp_Blazor.Components.HelperButtons.CopyButton TextToCopy="@readedText" />
            </div>
        </div>
    </VENFTApp_Blazor.Components.Spin>
</Modal>

@code {

    [Parameter]
    public string ReadedText
    {
        get => readedText;
        set => readedText = value;
    }
    [Parameter]
    public EventCallback<string> ReadedTextChanged { get; set; }

    private string marginleft = "0px";
    [Parameter]
    public int MarginLeft
    {
        get => Convert.ToInt32(marginleft);
        set => marginleft = value.ToString() + "px";
    }
    private string fontsize = "12px";
    [Parameter]
    public int FontSize
    {
        get => Convert.ToInt32(FontSize);
        set => fontsize = value.ToString() + "px";
    }
    private string name = "LoadQRDataCameraStream";
    [Parameter]
    public string Name
    {
        get => name;
        set
        {
            if (!string.IsNullOrEmpty(value) && name != value)
            {
                name = value;
                //StateHasChanged();
            }
        }
    }

    private bool doneVisible = false;
    private bool showQRDialogVisible = false;
    private ElementReference qrCodeRef;
    private string paddingtop = "2px";
    private string padding = "0px";
    private string status = "Loading Camera...";
    private string readedText = string.Empty;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("jsFunctions.init", DotNetObjectReference.Create(this));
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override Task OnInitializedAsync()
    {
        //JSRuntime.InvokeVoidAsync("jsFunctions.init", DotNetObjectReference.Create(this));
        return base.OnInitializedAsync();
    }

    [JSInvokable]
    public void ReturnBarcodeResultsAsync(String text)
    {
        TextReadHandler(text);
    }

    [JSInvokable]
    public void CameraStoppedAsync(String text)
    {
        doneVisible = false;
        showQRDialogVisible = false;
        this.StateHasChanged();
    }
    [JSInvokable]
    public void CameraStartedAsync(String text)
    {
        doneVisible = false;
        this.StateHasChanged();
    }

    private async Task TextReadHandler(String text)
    {
        if (string.IsNullOrEmpty(text))
            return;

        //if (text != readedText)
        {
            status = "Done :)";
            doneVisible = true;
            StateHasChanged();
            await Task.Delay(150);
            readedText = text;
            await ReadedTextChanged.InvokeAsync(text);
            JSRuntime.InvokeVoidAsync("jsFunctions.stopScanning");
        }
    }

    private async Task showQRDialogOpen(MouseEventArgs e)
    {
        status = "Initializing Camera...";
        doneVisible = true;
        showQRDialogVisible = true;
        paddingtop = "5px";
        padding = "3px";
        StateHasChanged();
        await Task.Delay(50);
        JSRuntime.InvokeVoidAsync("jsFunctions.startScanning", "CameraStream");
        paddingtop = "2px";
        padding = "0px";
    }

    private async Task showQRDialogCancel(MouseEventArgs e)
    {
        status = "Stopping Cammera...";
        doneVisible = true;
        StateHasChanged();
        await Task.Delay(50);
        await JSRuntime.InvokeVoidAsync("jsFunctions.stopScanning");
    }
}

