@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NeblioAPI
@inject AppData AppData
@inject IJSRuntime JSRuntime

<VENFTApp_Blazor.Components.Spin Tip="Sending..." Spinning="@sendingTransaction">
    <button class="btn btn-primary" @onclick="ShowSendNFTDialog" style="width: 40px;height: 25px;padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;font-size: 12px;">
        <i class="oi oi-location" style="font-size:12px;"></i>
    </button>
</VENFTApp_Blazor.Components.Spin>
<Modal Title="Return NFT Payment"
       Visible="@sendNFTDialogVisible"
       OnOk="@sendNFTDialogOK"
       OnCancel="@sendNFTDialogCancel">
    <div class="row">
        <div class="col">
            <VENFTApp_Blazor.Components.Spin Tip="Sending..." Spinning="@sendingTransaction">
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        Returning payment was send from @receiverAddress
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <small>The payment was probably send right after the first buyer who already received this NFT. You must return the payment to the sender.</small>
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        Amount to return: @Price NEBL <img style="width: 12px;margin-left: 4px; margin-bottom:2px;" src="images/neblio-icon.png" />
                    </div>
                </div>
            </VENFTApp_Blazor.Components.Spin>
        </div>
    </div>
</Modal>

<Modal Title="@confirmTitle"
       Visible="@confirmVisible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
    <p>@confirmContent</p>
</Modal>

@code {

    [Parameter]
    public int UtxoIndex { get; set; }
    [Parameter]
    public string Utxo { get; set; }
    [Parameter]
    public double Price { get; set; }

    [Parameter]
    public bool OwnNFT { get; set; } = false;

    string receiverAddress = string.Empty;
    [Parameter]
    public string Receiver
    {
        set
        {
            if (!string.IsNullOrEmpty(value))
            {
                if (receiverAddress != value)
                    receiverAddress = value;
            }
        }
    }

    private PaymentNFT sourceNFT = new PaymentNFT("");
    [Parameter]
    public INFT NFT
    {
        get => sourceNFT;
        set
        {
            if (value != null && value.Type == NFTTypes.Payment && !string.IsNullOrEmpty(value.Utxo) && value.Utxo != sourceNFT.Utxo)
            {
                sourceNFT = value as PaymentNFT;
                receiverAddress = sourceNFT.Sender;
                Price = sourceNFT.Price;
                //LoadSender();
            }
        }
    }

    [Parameter]
    public EventCallback<string> NFTSent { get; set; }

    private bool sendingTransaction = false;
    private bool sendNFTDialogVisible = false;
    private bool confirmVisible = false;

    private string paymentSender = string.Empty;
    private string sendingTransactionState = "Sending Payment Back...";
    private string confirmTitle = "Return NFT Payment?";
    private string confirmContent = "Do you realy want to return this NFT Payment?";
    private string status = string.Empty;

    private async Task LoadSender()
    {
        paymentSender = await NeblioAPIHelpers.GetTransactionSender(sourceNFT.Utxo, sourceNFT.TxDetails);
        receiverAddress = paymentSender;
        StateHasChanged();
    }

    private async Task HandleOk(MouseEventArgs e)
    {
        if (!string.IsNullOrEmpty(Utxo))
            await sendNFT(Utxo);
    }

    private void HandleCancel(MouseEventArgs e)
    {
        confirmVisible = false;
    }

    private async Task sendNFTDialogOK(MouseEventArgs e)
    {
        confirmVisible = true;
    }

    private void sendNFTDialogCancel(MouseEventArgs e)
    {
        sendNFTDialogVisible = false;
    }

    private async Task ShowSendNFTDialog(MouseEventArgs e)
    {
        sendNFTDialogVisible = true;
    }

    private async Task sendNFT(string utxo)
    {
        try
        {
            status = "Sending...";
            confirmVisible = false;
            sendingTransaction = true;
            StateHasChanged();

            if (!string.IsNullOrEmpty(AppData.DogeAccount.Address))
                sourceNFT.DogeAddress = AppData.DogeAccount.Address;
            var res = await AppData.Account.ReturnNFTPayment(receiverAddress, sourceNFT);
            if (res.Item1)
                status = res.Item2;
            else
                await JSRuntime.InvokeVoidAsync("alertMessage", "Some error during minting: " + res.Item2);

            NFTSent.InvokeAsync(res.Item2);
        }
        catch (Exception ex)
        {
            status = ex.Message;
            Console.WriteLine(ex.Message);

        }
        finally
        {
            sendNFTDialogVisible = false;
            confirmVisible = false;
            sendingTransaction = false;
            StateHasChanged();
        }
    }
}
