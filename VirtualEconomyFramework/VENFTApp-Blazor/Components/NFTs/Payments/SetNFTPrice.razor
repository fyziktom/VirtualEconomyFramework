@using VEDriversLite
@using VEDriversLite.NFT
@inject AppData AppData
@inject IJSRuntime JSRuntime

<Modal Title="Set Price of NFT"
       Visible="@SetPriceNFTDialogVisible"
       OnOk="@setPriceNFTDialogOK"
       OnCancel="@setPriceNFTDialogCancel">
    <div class="row">
        <div class="col">
            <Spin Tip="Sending..." Spinning="@sendingTransaction">
                <div class="row" style="margin-top:20px;">

                    <div class="col d-flex justify-content-center align-items-center">
                        <input type="checkbox" @onchange="eventArgs => { withPriceChanged(eventArgs.Value); }" /><span style="margin-left:10px;">With Neblio Price</span><br />
                    </div>
                    <!--
                    <div class="col d-flex justify-content-center align-items-center">
                        <input type="checkbox" onchange="eventArgs => { withDogePriceChanged(eventArgs.Value); }" /><span style="margin-left:10px;">With Doge Price</span><br />
                    </div>-->
                </div>
                <div class="row" style="margin-top:5px;">
                    <div class="col d-flex justify-content-center align-items-center">
                        <small>Here you can setup the price. If you will leave it unchecked it will remove the Price from NFT.</small>
                    </div>
                </div>

                @if (withPrice)
                {
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        Fill Price in Neblio:
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <input type="number" step="0.0001" min="0.0005" @bind="@price" /> <img style="width: 25px;margin-left: 10px;" src="images/neblio-icon.png" />
                    </div>
                </div>
                }

                <div class="row" style="margin-top:5px;">
                    <div class="col d-flex justify-content-center align-items-center">
                        <small>Here you can setup if buyer will receive this original or you will mint for him just copy.</small>
                    </div>
                </div>
                <div class="row" style="margin-top:5px;">
                    <div class="col d-flex justify-content-center align-items-center">
                            <input type="checkbox" @onchange="eventArgs => { justCopyChanged(eventArgs.Value); }" /><span style="margin-left:10px;">Sell just coppies</span><br />
                    </div>
                </div>
                <!--
                if (withDogePrice)
                {
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        Fill Price in Doge:
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <input type="number" step="1" min="2" max="10000000000" bind="dogePrice" /> <img style="width: 25px;margin-left: 10px;" src="images/doge.jpg" />
                    </div>
                </div>
                }-->
            </Spin>
        </div>
    </div>
</Modal>
<Modal Title="Set Price Confirm"
       Visible="@confirmSetPriceVisible"
       OnOk="@setPriceNFTDialogConfirm"
       OnCancel="@setPriceConfirmNFTDialogCancel">
    <p>Do you really want to set the price of this NFT?</p>
</Modal>

@code {

        [Parameter]
        public EventCallback<string> NFTSent { get; set; }

        [Parameter]
        public bool SubAccount { get; set; } = false;

        [Parameter]
        public string Address { get; set; } = string.Empty;

        [Parameter]
        public bool SetPriceNFTDialogVisible { get; set; } = false;
        [Parameter]
        public EventCallback<bool> SetPriceNFTDialogVisibleChanged { get; set; }

    private INFT sourceNFT = new ImageNFT("");
    [Parameter]
    public INFT NFT
    {
        get => sourceNFT;
        set
        {
            if (value != null && !string.IsNullOrEmpty(value.Utxo) && value.Utxo != sourceNFT.Utxo)
            {
                sourceNFT = value;
                StateHasChanged();
            }
        }
    }

    private bool confirmSetPriceVisible = false;
    private bool withDogePrice = false;
    private bool withPrice = false;
    private bool sellJustCoppies = false;
    private bool sendingTransaction = false;

    private double dogePrice = 0.0;
    private double price = 1.0;

    private string receiverAddress = string.Empty;
    private string status = string.Empty;

    private async Task withDogePriceChanged(object e)
    {
        withDogePrice = (bool)e;
        if (!withDogePrice) dogePrice = 0.0;
        StateHasChanged();
    }
    private async Task withPriceChanged(object e)
    {
        withPrice = (bool)e;
        if (!withPrice) price = 0.0;
        StateHasChanged();
    }
    private async Task justCopyChanged(object e)
    {
        sellJustCoppies = (bool)e;
        StateHasChanged();
    }

    private async Task setPriceNFTDialogConfirm(MouseEventArgs e)
    {
        confirmSetPriceVisible = false;
        await sendNFT(NFT, true, price);
    }

    private async Task setPriceNFTDialogOK(MouseEventArgs e)
    {
        confirmSetPriceVisible = true;
    }

    private void setPriceNFTDialogCancel(MouseEventArgs e)
    {
        SetPriceNFTDialogVisible = false;
        StateHasChanged();
        SetPriceNFTDialogVisibleChanged.InvokeAsync(SetPriceNFTDialogVisible);
    }

    private void setPriceConfirmNFTDialogCancel(MouseEventArgs e)
    {
        confirmSetPriceVisible = false;
    }

    private async Task sendNFT(INFT nft, bool priceWrite, double price)
    {
        try
        {
            if (nft == null)
                return;

            sendingTransaction = true;

            if ((withPrice || withDogePrice))
            {
                confirmSetPriceVisible = false;
                //receiverAddress = AppData.Account.Address;
            }

            if (withPrice && price > 0)
                nft.Price = price;
            if (price > 0)
                nft.PriceActive = true;
            if (withDogePrice && dogePrice > 0)
                nft.DogePrice = dogePrice;
            if (dogePrice > 0)
                nft.DogePriceActive = true;
            if (sellJustCoppies)
                nft.SellJustCopy = true;

            status = "Sending...";

            StateHasChanged();

            if (!string.IsNullOrEmpty(AppData.DogeAccount.Address))
                nft.DogeAddress = AppData.DogeAccount.Address;

            (bool, string) res = (false, string.Empty);
            if (!SubAccount)
                res = await AppData.Account.SendNFT(receiverAddress, nft, withPrice, price, withDogePrice, dogePrice);
            else
                res = await AppData.Account.SendNFTFromSubAccount(Address, receiverAddress, nft, false, withPrice, price, withDogePrice, dogePrice);

            if (res.Item1)
            {
                status = res.Item2;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alertMessage", "Some error during minting: " + res.Item2);
                status = res.Item2;
            }
        }
        catch (Exception ex)
        {
            status = ex.Message;
            Console.WriteLine(ex.Message);
        }
        finally
        {
            sendingTransaction = false;
            NFTSent.InvokeAsync(status);
            SetPriceNFTDialogVisible = false;
            SetPriceNFTDialogVisibleChanged.InvokeAsync(SetPriceNFTDialogVisible);
            StateHasChanged();
        }
    }

}
