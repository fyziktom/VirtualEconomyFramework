@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NeblioAPI
@using VEDriversLite.Extensions.WooCommerce
@using VEDriversLite.Extensions.WooCommerce.Dto
@using Newtonsoft.Json
@using Markdig
@inject AppData AppData
@inject HttpClient _client
@inject IJSRuntime JSRuntime

<div class="row">
    <div class="col">
        <VENFTApp_Blazor.Components.Spin Tip="Loading..." Spinning="@loading">
            @if (!string.IsNullOrEmpty(NFT.Utxo))
            {
                <div style="position: absolute;right: 5px;top: -20px;">
                    @if (!string.IsNullOrEmpty(NFT.NFTOriginTxId))
                    {
                        <a href="https://explorer.nebl.io/tx/@NFT.NFTOriginTxId" target="_blank">
                            <span class="badge badge-primary">Mint Info</span>
                        </a>
                    }
                    <a href="https://explorer.nebl.io/tx/@NFT.Utxo" target="_blank">
                        <span class="badge badge-secondary" style="margin-left:5px;">Tx Info</span>
                    </a>
                    <span class="badge badge-warning" style="margin-left:5px;">Conf: @(NeblioTransactionHelpers.IsEnoughConfirmationsForSend((int)NFT.TxDetails.Confirmations))</span>
                </div>
                @if (OwnNFT)
                {
                    <div class="row" style="position: absolute;right: 7px;top: 30px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <VENFTApp_Blazor.Components.NFTs.Actions.DestroyNFTButton IsIcon="true"
                                                                                      NFTDestroyed="@NFTSentHandler"
                                                                                      FontSize="20"
                                                                                      InputNFT="@NFT"
                                                                                      Address="@Address"
                                                                                      MainAccount="@((OwnNFT && !SubAccount)?true:false)"
                                                                                      SubAccount="@SubAccount" />
                        </div>
                    </div>
                }
            }

            @switch (NFT.Type)
            {
                case NFTTypes.Image:<VENFTApp_Blazor.Components.NFTs.Images.ImageNFTDetails InputNFT="@NFT"
                                                                                            Address="@Address"
                                                                                            SubAccount="@SubAccount"
                                                                                            OwnNFT="@OwnNFT"
                                                                                            NFTSent="@NFTSentHandler" />
                    break;
                case NFTTypes.Product:<VENFTApp_Blazor.Components.NFTs.Products.ProductNFTDetails InputNFT="@NFT"
                                                                                                  Address="@Address"
                                                                                                  SubAccount="@SubAccount"
                                                                                                  OwnNFT="@OwnNFT"
                                                                                                  NFTSent="@NFTSentHandler" />
                    break;
                case NFTTypes.Invoice:<VENFTApp_Blazor.Components.NFTs.Payments.InvoiceNFTDetails InputNFT="@NFT"
                                                                                                  Address="@Address"
                                                                                                  SubAccount="@SubAccount"
                                                                                                  OwnNFT="@OwnNFT"
                                                                                                  NFTSent="@NFTSentHandler" />
                    break;
                case NFTTypes.Order:<VENFTApp_Blazor.Components.NFTs.Payments.OrderNFTDetails InputNFT="@NFT"
                                                                                                  Address="@Address"
                                                                                                  SubAccount="@SubAccount"
                                                                                                  OwnNFT="@OwnNFT"
                                                                                                  NFTSent="@NFTSentHandler" />
                    break;
                case NFTTypes.Post: <VENFTApp_Blazor.Components.NFTs.Posts.PostNFTDetails InputNFT="@NFT"
                                                                                          Address="@Address"
                                                                                          SubAccount="@SubAccount"
                                                                                          OwnNFT="@OwnNFT"
                                                                                          NFTSent="@NFTSentHandler" />
                    break;
                case NFTTypes.Music: <VENFTApp_Blazor.Components.NFTs.Music.MusicNFTDetails InputNFT="@NFT"
                                                                                            Address="@Address"
                                                                                            SubAccount="@SubAccount"
                                                                                            OwnNFT="@OwnNFT"
                                                                                            NFTSent="@NFTSentHandler" />
                    break;
                case NFTTypes.Profile: <VENFTApp_Blazor.Components.NFTs.Profiles.ProfileNFTDetails InputNFT="@NFT"
                                                                                                   Address="@Address"
                                                                                                   SubAccount="@SubAccount"
                                                                                                   OwnNFT="@OwnNFT"
                                                                                                   NFTSent="@NFTSentHandler" />
                    break;
                case NFTTypes.Ticket: <VENFTApp_Blazor.Components.NFTs.Tickets.TicketNFTDetails InputNFT="@NFT"
                                                                                                Address="@Address"
                                                                                                SubAccount="@SubAccount"
                                                                                                OwnNFT="@OwnNFT"
                                                                                                NFTSent="@NFTSentHandler" />
                    break;
                case NFTTypes.Event: <VENFTApp_Blazor.Components.NFTs.Tickets.EventNFTDetails InputNFT="@NFT"
                                                                                              Address="@Address"
                                                                                              SubAccount="@SubAccount"
                                                                                              OwnNFT="@OwnNFT"
                                                                                              NFTSent="@NFTSentHandler" />
                    break;

            }

            <NFTTags TagsList="@NFT.TagsList" />

            <div class="row" style="margin-top:20px;">
                @if (!NFT.IsInThePayments)
                {
                    @if (OwnNFT)
                    {
                        @if (NFT.PriceActive)
                        {
                            <div class="col w-100 d-flex justify-content-center align-items-center">
                                <small class="text-muted">Setted Price: @NFT.Price NEBL</small> <img style="width: 12px;margin-left: 4px; margin-bottom:2px;" src="images/neblio-icon.png" />
                            </div>
                        }
                        @if (NFT.DogePriceActive)
                        {
                            <div class="col w-100 d-flex justify-content-center align-items-center">
                                <small class="text-muted">Setted Price: @NFT.DogePrice DOGE</small> <img style="width: 12px;margin-left: 4px; margin-bottom:2px;" src="images/doge.jpg" />
                            </div>
                        }
                        if (NFT.SellJustCopy)
                        {
                            <div class="col w-100 d-flex justify-content-center align-items-center">
                                <small class="text-muted">Selling just coppies of this NFT</small>
                            </div>
                        }
                    }
                }
                else
                {
                    <div class="col w-100 d-flex justify-content-center align-items-center">
                        <small class="text-muted">Sold. Waiting for processing.</small>
                    </div>
                }
            </div>

            <VENFTApp_Blazor.Components.NFTs.Actions.NFTActions InputNFT="@NFT"
                                                                Utxo="@NFT.Utxo"
                                                                UtxoIndex="@NFT.UtxoIndex"
                                                                Address="@Address"
                                                                OwnNFT="@OwnNFT"
                                                                SubAccount="@SubAccount"
                                                                NFTSent="@NFTSentHandler" />

            <NFTHistory Utxo="@NFT.Utxo" NftType="@NFT.Type" />
        </VENFTApp_Blazor.Components.Spin>
    </div>

</div>

@code {

    private INFT NFT { get; set; } = new ImageNFT("");
    [Parameter]
    public INFT InputNFT
    {
        get => NFT;
        set
        {
            if (value != null && value.Utxo != NFT.Utxo)// && value.Utxo != NFT.Utxo)
                LoadNFT(value, false);
            else if (value != null && value.Utxo == NFT.Utxo && value.TxDetails.Confirmations != NFT.TxDetails.Confirmations)
                LoadNFT(value, true);
        }
    }

    private string _utxo = string.Empty;
    [Parameter]
    public string Utxo
    {
        get => _utxo;
        set
        {
            if (!string.IsNullOrEmpty(value) && _utxo != value)
                _utxo = value;
        }
    }

    private int _utxoIndex = 0;
    [Parameter]
    public int UtxoIndex
    {
        get => _utxoIndex;
        set
        {
            if (_utxoIndex != value)
                _utxoIndex = value;
        }
    }

    [Parameter]
    public bool OwnNFT { get; set; } = false;

    [Parameter]
    public bool SubAccount { get; set; } = false;

    [Parameter]
    public string Address { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> NFTSent { get; set; }

    public string NFTmarkuptext => Markdown.ToHtml(NFT.Text);
    public string NFTDescriptionMarkuptext => Markdown.ToHtml(NFT.Description);

    private bool loading = false;

    private string status = string.Empty;
    private string songName = string.Empty;

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (NFT.Type == NFTTypes.Music && !string.IsNullOrEmpty(NFT.Name) && NFT.Name != songName)
        {
            songName = NFT.Name;
            VideoStartedPlay();
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    private void TxDataRefreshedHandler(object sender, GetTransactionInfoResponse info)
    {
        StateHasChanged();
    }

    private async Task LoadNFT(INFT nft, bool same)
    {
        if (!same)
        {
            loading = true;
            StateHasChanged();
            if (!string.IsNullOrEmpty(NFT.Utxo))
            {
                NFT.TxDataRefreshed -= TxDataRefreshedHandler;
                await NFT.StopRefreshingData();
            }

            //NFT = await NFTFactory.CloneNFT(nft);
            NFT = nft;
            if (NFT == null)
                return;

            NFT.TxDataRefreshed += TxDataRefreshedHandler;
            await NFT.StartRefreshingTxData();

            loading = false;
            StateHasChanged();
        }
        else
        {
            await NFT.Fill(nft);
            StateHasChanged();
        }
    }

    private async Task VideoStartedPlay()
    {
        await JSRuntime.InvokeVoidAsync("setMusicInfo", NFT.Name, NFT.Author, NFT.Description);
    }

    private void NFTSentHandler(string e)
    {
        NFTSent.InvokeAsync(e);
        StateHasChanged();
    }
}
