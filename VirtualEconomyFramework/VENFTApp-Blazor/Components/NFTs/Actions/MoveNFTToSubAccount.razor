@using VEDriversLite
@using VEDriversLite.NFT
@inject AppData AppData
@inject IJSRuntime JSRuntime

<Modal Title="Move NFT To SubAccount"
       Visible="@SendNFTDialogVisible"
       OnOk="@sendNFTDialogOK"
       OnCancel="@sendNFTDialogCancel">
    <div class="row">
        <div class="col">
            <VENFTApp_Blazor.Components.Spin Tip="Sending..." Spinning="@sendingTransaction">

                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <span>Select SubAccount</span>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex justify-content-center align-items-center">
                        <Dropdown Trigger="@(new TriggerType[] { TriggerType.Click })">
                            <Overlay>
                                <Menu>
                                    @foreach (var sa in AppData.Account.SubAccounts.Values)
                                    {
                                        <MenuItem @onclick="() => selectNewTabAddressFromBookmark(sa.Address, sa.Name)">
                                            <span>@sa.Name</span>
                                        </MenuItem>
                                    }
                                    <MenuItem @onclick="() => selectNewTabAddressFromBookmark(AppData.Account.Address, null)">
                                        <span>Main Account</span>
                                    </MenuItem>
                                </Menu>
                            </Overlay>
                            <ChildContent>
                                <a class="ant-dropdown-link" @onclick:preventDefault>
                                    @selectedSubAccountName <Icon Type="down" />
                                </a>
                            </ChildContent>
                        </Dropdown>
                    </div>
                </div>
            </VENFTApp_Blazor.Components.Spin>
        </div>
    </div>
</Modal>

<Modal Title="Move NFT"
       Visible="@confirmVisible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
    <p>Do you really want to move this NFT?</p>
</Modal>

@code {

    [Parameter]
    public bool SendNFTDialogVisible { get; set; } = false;

    private INFT sourceNFT = new ImageNFT("");
    [Parameter]
    public INFT NFT
    {
        get => sourceNFT;
        set
        {
            if (value != null && !string.IsNullOrEmpty(value.Utxo) && value.Utxo != sourceNFT.Utxo)
            {
                sourceNFT = value;
                StateHasChanged();
            }
        }
    }

    [Parameter]
    public bool SubAccount { get; set; } = false;

    [Parameter]
    public string Address { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> NFTSent { get; set; }

    [Parameter]
    public EventCallback<bool> SendNFTDialogVisibleChanged { get; set; }

    private bool confirmVisible = false;
    private bool sendingTransaction = false;

    private string selectedSubAccountName = "Please select from the list";
    private string receiverAddress = string.Empty;
    private string status = string.Empty;

    private async Task HandleOk(MouseEventArgs e)
    {
        confirmVisible = false;
        await sendNFT(sourceNFT);
    }

    private void HandleCancel(MouseEventArgs e)
    {
        confirmVisible = false;
    }

    private async Task selectNewTabAddressFromBookmark(string address, string name)
    {
        receiverAddress = address;

        if (string.IsNullOrEmpty(name) && address == AppData.Account.Address)
            selectedSubAccountName = "Main Account";
        else if (!string.IsNullOrEmpty(name) && address != AppData.Account.Address)
            selectedSubAccountName = name;

        var add = await AppData.Account.GetSubAccountAddressByName(name);
        if (add.Item1)
            receiverAddress = add.Item2;
        Console.WriteLine("Selected account to move on the NFT: " + receiverAddress);
        await Task.Delay(50);
        StateHasChanged();
    }

    private async Task sendNFTDialogOK(MouseEventArgs e)
    {
        if (string.IsNullOrEmpty(receiverAddress))
        {
            await JSRuntime.InvokeVoidAsync("alertMessage", "Please Select SubAccount.");
            return;
        }
        confirmVisible = true;
    }

    private void sendNFTDialogCancel(MouseEventArgs e)
    {
        SendNFTDialogVisible = false;
        StateHasChanged();
        SendNFTDialogVisibleChanged.InvokeAsync(SendNFTDialogVisible);
    }

    private async Task sendNFT(INFT nft)
    {
        try
        {
            if (nft == null)
                return;

            sendingTransaction = true;

            status = "Sending...";

            StateHasChanged();

            if (!string.IsNullOrEmpty(AppData.DogeAccount.Address) && string.IsNullOrEmpty(nft.DogeAddress))
                nft.DogeAddress = AppData.DogeAccount.Address;

            (bool, string) res;
            if (!SubAccount)
                res = await AppData.Account.SendNFT(receiverAddress, nft, nft.PriceActive, nft.Price, nft.DogePriceActive, nft.DogePrice);
            else
                res = await AppData.Account.SendNFTFromSubAccount(Address, receiverAddress, nft, withDogePrice:nft.DogePriceActive,dogeprice:nft.DogePrice);

            if (res.Item1)
            {
                status = res.Item2;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alertMessage", "Some error during minting: " + res.Item2);
                status = res.Item2;
            }
        }
        catch (Exception ex)
        {
            status = ex.Message;
            Console.WriteLine(ex.Message);
        }
        finally
        {
            sendingTransaction = false;
            await SendNFTDialogVisibleChanged.InvokeAsync(SendNFTDialogVisible);
            await NFTSent.InvokeAsync(status);
            StateHasChanged();
        }
    }

}
