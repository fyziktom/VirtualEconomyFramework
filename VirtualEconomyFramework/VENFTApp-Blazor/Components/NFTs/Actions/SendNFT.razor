@using VEDriversLite
@using VEDriversLite.NFT
@inject AppData AppData
@inject IJSRuntime JSRuntime

<VENFTApp_Blazor.Components.Modal.Modal Visible="@SendNFTDialogVisible"
                                        OnCancel="@sendNFTDialogCancel">
    <ModalHeader>
        <ModalTitle>Send NFT</ModalTitle>
    </ModalHeader>
    <ModalBody>
        <div class="row">
            <div class="col">
                <VENFTApp_Blazor.Components.Spin Tip="Sending..." Spinning="@sendingTransaction">
                    <div class="row">
                        <div class="col d-flex justify-content-center align-items-center">
                            Fill Receiver Address:
                        </div>
                    </div>
                    <div class="row">
                        <div class="col d-flex justify-content-center align-items-center">
                            <VENFTApp_Blazor.Components.Account.NeblioAddressInput AddressCheckedInputed="receiverAddressChangedHandler" />
                        </div>
                    </div>
                </VENFTApp_Blazor.Components.Spin>
            </div>
        </div>
    </ModalBody>
    <VENFTApp_Blazor.Components.Modal.ModalFooter>
        <ModalButton Kind="ModalButtonKind.Cancel">Cancel</ModalButton>
        <ModalButton OnClick="@sendNFTDialogOK">Ok</ModalButton>
    </VENFTApp_Blazor.Components.Modal.ModalFooter>
</VENFTApp_Blazor.Components.Modal.Modal>

<VENFTApp_Blazor.Components.Modal.Modal @bind-Visible="@confirmVisible">
    <ModalHeader>
        <ModalTitle>Send NFT</ModalTitle>
    </ModalHeader>
    <ModalBody>
        <p>Do you really want to send this NFT?</p>
    </ModalBody>
    <VENFTApp_Blazor.Components.Modal.ModalFooter>
        <ModalButton Kind="ModalButtonKind.Cancel">Cancel</ModalButton>
        <ModalButton OnClick="@HandleOk">Ok</ModalButton>
    </VENFTApp_Blazor.Components.Modal.ModalFooter>
</VENFTApp_Blazor.Components.Modal.Modal>

@code {

    [Parameter]
    public EventCallback<string> NFTSent { get; set; }

    [Parameter]
    public bool SendNFTDialogVisible { get; set; } = false;
    [Parameter]
    public EventCallback<bool> SendNFTDialogVisibleChanged { get; set; }

    private INFT sourceNFT = new ImageNFT("");
    [Parameter]
    public INFT NFT
    {
        get => sourceNFT;
        set
        {
            if (value != null && !string.IsNullOrEmpty(value.Utxo) && value.Utxo != sourceNFT.Utxo)
            {
                sourceNFT = value;
                StateHasChanged();
            }
        }
    }

    [Parameter]
    public bool SubAccount { get; set; } = false;

    [Parameter]
    public string Address { get; set; } = string.Empty;

    private bool confirmVisible = false;
    private bool sendingTransaction = false;

    private string status = string.Empty;
    private string receiverAddress = string.Empty;

    private void receiverAddressChangedHandler(string address)
    {
        if (address.Length < 8)
        {
            receiverAddress = string.Empty;
            return;
        }
        receiverAddress = address;
        StateHasChanged();
    }

    private async Task HandleOk()
    {
        confirmVisible = false;
        await sendNFT(await NFTFactory.CloneNFT(NFT), false, 0.0002);
    }

    private async Task sendNFTDialogOK()
    {
        if (string.IsNullOrEmpty(receiverAddress))
        {
            await JSRuntime.InvokeVoidAsync("alertMessage", "Please Fill Correct Receiver.");
            return;
        }
        confirmVisible = true;
    }

    private void sendNFTDialogCancel()
    {
        SendNFTDialogVisible = false;
        StateHasChanged();
        SendNFTDialogVisibleChanged.InvokeAsync(SendNFTDialogVisible);
    }

    private async Task sendNFT(INFT nft, bool priceWrite, double price)
    {
        try
        {
            if (nft == null)
                return;

            sendingTransaction = true;

            if (priceWrite)
            {
                receiverAddress = AppData.Account.Address;
            }

            status = "Sending...";

            StateHasChanged();

            if (!string.IsNullOrEmpty(AppData.DogeAccount.Address) && string.IsNullOrEmpty(nft.DogeAddress))
                nft.DogeAddress = AppData.DogeAccount.Address;

            (bool, string) res;
            if (!SubAccount)
                res = await AppData.Account.SendNFT(receiverAddress, nft, priceWrite, price);
            else
                res = await AppData.Account.SendNFTFromSubAccount(Address, receiverAddress, nft);

            if (res.Item1)
            {
                status = res.Item2;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alertMessage", "Some error during minting: " + res.Item2);
                status = res.Item2;
            }
        }
        catch (Exception ex)
        {
            status = ex.Message;
            Console.WriteLine(ex.Message);
        }
        finally
        {
            sendingTransaction = false;
            await SendNFTDialogVisibleChanged.InvokeAsync(SendNFTDialogVisible);
            await NFTSent.InvokeAsync(status);
            StateHasChanged();
        }
    }

}
