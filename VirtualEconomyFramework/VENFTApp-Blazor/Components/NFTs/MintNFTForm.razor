@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NFT.Coruzant
@using Markdig
@inject AppData AppData
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime



<div class="row">

    <div class="col-auto">

        @if (nftType == NFTTypes.Profile || (nftType == NFTTypes.Post && !string.IsNullOrEmpty(NFT.Utxo)))
        {
            <!--no price or coppy option now-->
        }
        else
        {
            <div class="row text-nowrap" style="margin-top:20px;">
                <div class="col">
                    <input type="checkbox" @onchange="eventArgs => { withPriceChanged(eventArgs.Value); }" /><span class="ml-1">With Price</span>
                </div>
                <div class="col">
                    <input type="checkbox" @onchange="eventArgs => { withDogePriceChanged(eventArgs.Value); }" /><span class="ml-1">With Doge Price</span>
                </div>
                <div class="col">
                    <input type="checkbox" @onchange="eventArgs => { withCoppiesChanged(eventArgs.Value); }" /><span class="ml-1">With Copies</span>
                </div>
                <div class="col">
                    <input type="checkbox" @onchange="eventArgs => { toAnotherAddressChanged(eventArgs.Value); }" /><span class="ml-1">Mint To Another Address</span>
                </div>
            </div>

            <div class="row" style="margin-top:20px;">

                @if (withPrice)
                {
                    <div class="col-6">
                        <small>Price in Neblio</small>
                        <input type="number" step="0.0001" min="0.0005" max="1000000" @bind="@price" /> <img style="width: 25px;margin-left: 10px;" src="images/neblio-icon.png" />
                    </div>

                }
                @if (withDogePrice)
                {

                    <div class="col-6">
                        <small>Price in Doge</small>
                        <input type="number" step="1" min="2" max="100000000" @bind="@dogeprice" /> <img style="width: 25px;margin-left: 10px;" src="images/doge.jpg" />
                    </div>
                }

                @if (withCoppies)
                {
                    <div class="col-6">
                        <small>Copies</small>
                        <input type="number" step="1" min="0" max="20" @bind="@NumberOfCoppies" />
                    </div>
                }
                @if (toAnotherAddres)
                {
                    <div class="col-12">
                        <small>Fill Receiver Address</small>
                        <VENFTApp_Blazor.Components.Account.CreateNeblioSubAccount NewAddressCreated="newSubAccountCreated" />
                        <VENFTApp_Blazor.Components.Account.NeblioAddressInput AddressCheckedInputed="mintReceiverAddressChecked" Receiver="@mintReceiverAddress" />
                    </div>

                }
            </div>
        }
    </div>


    <div class="col-auto text-center">
        <Spin spinning="@processingMinting" tip="Sending...">
            <div class="row">
                <div class="col-6">
                    @if (nftType == NFTTypes.Profile)
                    {
                        <small>Name</small>
                        <Input Placeholder="Type your Name" MaxLength="50" @bind-Value=@name Style="font-size:12px; min-width:250px; max-width:350px;" />
                    }
                    else
                    {
                        <small>Name</small>
                        <Input Placeholder="Add Name of the NFT" MaxLength="100" @bind-Value=@name Style="font-size:12px; min-width:250px; max-width:350px;" />
                    }
                </div>
                @if (nftType == NFTTypes.Profile)
                {
                    <div class="col-6">
                        <small>Surname</small>
                        <Input Placeholder="Type your surname" MaxLength="50" @bind-Value=@surname Style="font-size:12px; min-width:250px; max-width:350px;" />
                    </div>
                    <div class="col-6">
                        <small>Nickname</small>
                        <Input MaxLength="100" Placeholder="Type your nickname" @bind-Value=@nickname Style="font-size:12px; min-width:250px; max-width:350px;" />
                    </div>
                    <div class="col-6">
                        <small>ID</small>
                    </div>
                    <div class="col-6">
                        <Input MaxLength="100" Placeholder="Type your ID" @bind-Value=@profileId Style="font-size:12px; min-width:250px; max-width:350px;" />
                    </div>
                }
                else
                {
                    <div class="col-6">
                        <small>Author</small>

                        <Input Placeholder="Add Author of the NFT" MaxLength="50" @bind-Value=@author Style="font-size:12px; min-width:250px; max-width:350px;" />
                    </div>
                }
                @if (nftType != NFTTypes.Profile)
                {
                    @if (nftType != NFTTypes.Music)
                    {

                        <div class="col-6">
                            <small>Webpage</small>
                            <Input Placeholder="Add your webpage" MaxLength="200" @bind-Value=@link Style="font-size:12px; min-width:250px; max-width:350px;" />
                        </div>
                        @if (!string.IsNullOrEmpty(link))
                        {
                            <div class="col d-flex justify-content-center align-items-center">
                                <a href="@link" target="_blank" class="text-info">Test the link</a>
                            </div>
                        }
                    }
                    <div class="col-6">
                        <small>Description</small>
                        <TextArea Placeholder="Add Description of the NFT" MaxLength="160" @bind-Value=@description Style="font-size:12px; min-width:250px; max-width:350px; min-height:50px;" />
                    </div>
                }
                else
                {
                    <div class="col-6">
                        <small>Bio</small>
                        <TextArea Placeholder="Type your Bio" MaxLength="300" @bind-Value=@description Style="font-size:12px; min-width:250px; max-width:350px; min-height:50px;" />
                    </div>
                }
                @if (!string.IsNullOrEmpty(description))
                {
                    <div class="col-6">
                        <small class="text-info">Remaining @(300-description.Length) from 300 characters.</small>
                    </div>
                }
                @if (nftType == NFTTypes.Post)
                {
                    <div class="col-6">
                        <small>Text</small>
                        <TextArea Placeholder="Add Text" MaxLength="8000" @bind-Value=@text Style="font-size:12px; min-width:250px; width:350px; max-width:350px; min-height:400px;" />
                    </div>
                    @if (!string.IsNullOrEmpty(text))
                    {
                        <div class="col-6" style="width: 350px; min-height:400px; max-width:350px;">
                            <span class="border-light">@((MarkupString)NFTmarkuptext)</span>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(text))
                    {
                        <div class="col-6">
                            <small class="text-info">Remaining @(8000-text.Length) from 8000 characters.</small>
                        </div>
                    }
                }


                <div class="col-6">
                    <small>Tags</small>
                    <Input Placeholder="Add Tags - splitted by space" MaxLength="200" @bind-Value=@tags Style="font-size:12px; min-width:250px; max-width:350px;" />
                </div>

                @if (nftType == NFTTypes.Music)
                {
                    <small>Uplod Music</small>
                    <VENFTApp_Blazor.Components.UploadImage NFTType="@NFTTypes.Music" ImageLink="@link" ImageLinkChanged="@LinkChanged" />
                }
                else
                {
                    <VENFTApp_Blazor.Components.UploadImage NFTType="@nftType" ImageLink="@imagelink" ImageLinkChanged="@ImageLinkChanged" />
                }

                @if (string.IsNullOrEmpty(sourceUtxo))
                {
                    <div class="col-6">
                        <small class="text-center">Minting costs 0.0002 NEBL (fee) and @(NumberOfCoppies + 1) VENFT (carrier). The VENFT token will stay on your address as NFT. </small>
                    </div>
                }
                else
                {
                    <div class="col-6">
                        <small class="text-center">Edit costs 0.0002 NEBL (fee).</small>
                    </div>
                }
                @if ((string.IsNullOrEmpty(imagelink) && (nftType == NFTTypes.Image)) || (string.IsNullOrEmpty(link) && (nftType == NFTTypes.Music)))
                {
                    <div class="col-6">
                        <button class="btn btn-primary disabled" @onclick="ShowMintConfirm">Create NFT</button>
                    </div>
                }
                else
                {
                    <div class="col-6">
                        <button class="btn btn-primary" @onclick="ShowMintConfirm">@(string.IsNullOrEmpty(sourceUtxo)? "Create NFT" : "Apply Changes")</button>
                    </div>
                    @if (!string.IsNullOrEmpty(multimintStatus))
                    {
                        <div class="col-6">
                            <span>@multimintStatus</span>
                        </div>
                    }
                }
            </div>
        </Spin>





        <Modal Title="@(string.IsNullOrEmpty(NFT.Utxo)?"Mint New NFT":"Update NFT")"
               Visible="@confirmVisible"
               OnOk="@HandleOk"
               OnCancel="@HandleCancel">
            @if (!string.IsNullOrEmpty(NFT.Utxo))
            {
                switch (nftType)
                {
                    case NFTTypes.Post:
                        <p>Do you realy want to update this Post?</p>
                        break;
                    case NFTTypes.Profile:
                        <p>Do you realy want to update this Profile?</p>
                        break;
                }
            }
            else
            {
                switch (nftType)
                {
                    case NFTTypes.Post:
                        <p>Do you realy want to create this Post?</p>
                        break;
                    case NFTTypes.Profile:
                        <p>Do you realy want to create this Profile?</p>
                        break;
                    case NFTTypes.Image:
                        <p>Do you realy want to create this Image?</p>
                        break;
                    case NFTTypes.Music:
                        <p>Do you realy want to create this Music?</p>
                        break;
                }
            }

        </Modal>

        <Modal Title="Mint To Another Address"
               Visible="@mintToAnotherAddressConfirmModalVisible"
               OnOk="@MintToAnotherAddressOk"
               OnCancel="@MintToAnotherAddressCancel">
            <p>"You selected another address as receiver of these NFTs. Is it correct?"</p>
        </Modal>

    </div>
</div>

@code {

    [Parameter]
    public bool RedirectToNFTsAfterMint { get; set; } = false;

    [Parameter]
    public bool SubAccount { get; set; } = false;

    [Parameter]
    public string Address { get; set; } = string.Empty;

    [Parameter]
    public string TokenId { get; set; } = string.Empty;

    private NFTTypes nftType = NFTTypes.Image;
    [Parameter]
    public NFTTypes NFTType
    {
        get => nftType;
        set => nftType = value;
    }

    private INFT sourceNFT = new ImageNFT("");
    [Parameter]
    public INFT NFT
    {
        get => sourceNFT;
        set
        {
            if (value != null && !string.IsNullOrEmpty(value.Utxo) && value.Utxo != sourceNFT.Utxo)
            {
                sourceNFT = null;
                sourceNFT = value;
                LoadData();
                sourceUtxo = value.Utxo;
                StateHasChanged();
            }
        }
    }

    [Parameter]
    public EventCallback<string> NFTMinted { get; set; }

    public string NFTmarkuptext => Markdown.ToHtml(text);

    private int NumberOfCoppies = 0;

    private bool uploadingImage = false;
    private bool confirmVisible = false;
    private bool mintToAnotherAddressConfirmModalVisible = false;
    private bool processingMinting = false;
    private bool withPrice = false;
    private bool withDogePrice = false;
    private bool withCoppies = false;
    private bool toAnotherAddres = false;

    private double price = 0.0;
    private double dogeprice = 0.0;

    private string name = string.Empty;
    private string description = string.Empty;
    private string text = string.Empty;
    private string tags = string.Empty;
    private string surname = string.Empty;
    private string nickname = string.Empty;
    private string profileId = string.Empty;
    private string author = string.Empty;
    private string imagelink = string.Empty;
    private string link = string.Empty;
    private string sourceUtxo = string.Empty;
    private string multimintStatus = string.Empty;
    private string mintReceiverAddress = string.Empty;

    private INFT newNFT = new ImageNFT("");
    private ProfileNFT newProfileNFT = new ProfileNFT("");

    protected override async Task OnInitializedAsync()
    {
        if (AppData.Account != null)
        {
            if (!string.IsNullOrEmpty(AppData.Account.Profile.Nickname))
                nickname = AppData.Account.Profile.Nickname;
            if (!string.IsNullOrEmpty(AppData.Account.Profile.Name))
                author = AppData.Account.Profile.Name + " " + AppData.Account.Profile.Surname;
        }
        if (!string.IsNullOrEmpty(AppData.Account.Address))
        {
            AppData.Account.NewMintingProcessInfo -= multimintStateChangedHandler;
            AppData.Account.NewMintingProcessInfo += multimintStateChangedHandler;
        }
    }

    private void multimintStateChangedHandler(object sender, string e)
    {
        multimintStatus = e;
        StateHasChanged();
    }

    void ImageLinkChanged(string newLink)
    {
        imagelink = newLink;
    }

    void LinkChanged(string newLink)
    {
        link = newLink;
    }

    private void newSubAccountCreated(string address)
    {
        if (!string.IsNullOrEmpty(address))
        {
            mintReceiverAddress = address;
        }
        StateHasChanged();
    }
    private void mintReceiverAddressChecked(string address)
    {
        if (!string.IsNullOrEmpty(address))
        {
            mintReceiverAddress = address;
        }
        StateHasChanged();
    }
    private async Task toAnotherAddressChanged(object e)
    {
        toAnotherAddres = (bool)e;
        StateHasChanged();
    }

    private async Task withPriceChanged(object e)
    {
        withPrice = (bool)e;
        if (withPrice)
            price = 0.0005;
        else
            price = 0;
        StateHasChanged();
    }
    private async Task withDogePriceChanged(object e)
    {
        withDogePrice = (bool)e;
        if (withDogePrice)
            dogeprice = 2;
        else
            dogeprice = 0;
        StateHasChanged();
    }
    private async Task withCoppiesChanged(object e)
    {
        withCoppies = (bool)e;
        StateHasChanged();
    }

    void ShowMintConfirm()
    {
        if (!string.IsNullOrEmpty(mintReceiverAddress))
            mintToAnotherAddressConfirmModalVisible = true;
        else
            confirmVisible = true;
    }

    private async Task HandleOk(MouseEventArgs e)
    {
        await MintNewNFT();
    }
    private void HandleCancel(MouseEventArgs e)
    {
        confirmVisible = false;
    }

    private async Task MintToAnotherAddressOk(MouseEventArgs e)
    {
        mintToAnotherAddressConfirmModalVisible = false;
        confirmVisible = true;
    }
    private void MintToAnotherAddressCancel(MouseEventArgs e)
    {
        mintToAnotherAddressConfirmModalVisible = false;
    }

    private async Task LoadData()
    {
        if (sourceNFT != null)
        {
            switch (sourceNFT.Type)
            {
                case NFTTypes.Profile:
                    newNFT = new ProfileNFT("");
                    surname = (sourceNFT as ProfileNFT).Surname;
                    nickname = (sourceNFT as ProfileNFT).Nickname;
                    profileId = (sourceNFT as ProfileNFT).ID;
                    break;
                case NFTTypes.Post:
                    newNFT = new PostNFT("");
                    break;
            }
            description = sourceNFT.Description;
            text = sourceNFT.Text;
            tags = sourceNFT.Tags;
            name = sourceNFT.Name;
            author = sourceNFT.Author;
            imagelink = sourceNFT.ImageLink;
            link = sourceNFT.Link;
            newNFT.Utxo = sourceNFT.Utxo;
            newNFT.UtxoIndex = sourceNFT.UtxoIndex;
            sourceUtxo = newNFT.Utxo;
            StateHasChanged();
        }
    }

    private async Task MintNewNFT()
    {
        try
        {
            processingMinting = true;
            confirmVisible = false;
            StateHasChanged();

            newNFT.Type = nftType;

            if (!withPrice)
                newNFT.Price = 0.0;

            if (!string.IsNullOrEmpty(TokenId))
                newNFT.TokenId = TokenId;

            switch (nftType)
            {
                case NFTTypes.Profile:
                    newNFT = new ProfileNFT("")
                        {
                            Surname = surname,
                            Nickname = nickname,
                            ID = profileId
                        };
                    break;
                case NFTTypes.Music:
                    newNFT = new MusicNFT("");
                    break;
                case NFTTypes.Post:
                    //
                    break;
            }

            if (!string.IsNullOrEmpty(TokenId))
                newNFT.TokenId = TokenId;

            if (name != null)
                newNFT.Name = name;
            if (tags != null)
                newNFT.Tags = tags;
            if (author != null)
                newNFT.Author = author;
            if (description != null)
                newNFT.Description = description;
            if (text != null)
                newNFT.Text = text;
            if (link != null)
                newNFT.Link = link;
            if (imagelink != null)
                newNFT.ImageLink = imagelink;

            newNFT.Price = price;
            if (price > 0)
                newNFT.PriceActive = true;
            newNFT.DogePrice = dogeprice;
            if (dogeprice > 0)
                newNFT.DogePriceActive = true;

            if (!string.IsNullOrEmpty(sourceNFT.Utxo))
            {
                newNFT.Utxo = sourceNFT.Utxo;
                newNFT.UtxoIndex = sourceNFT.UtxoIndex;
                newNFT.NFTOriginTxId = sourceNFT.NFTOriginTxId;
            }

            if (!string.IsNullOrEmpty(AppData.DogeAccount.Address))
                newNFT.DogeAddress = AppData.DogeAccount.Address;

            (bool, string) res;
            if (!string.IsNullOrEmpty(newNFT.Utxo))
            {
                if (!SubAccount)
                    res = await AppData.Account.ChangeNFT(newNFT);
                else
                    res = await AppData.Account.ChangeNFTOnSubAccount(Address, newNFT);
            }
            else if (string.IsNullOrEmpty(newNFT.Utxo) && NumberOfCoppies > 0 && nftType != NFTTypes.Profile)
            {
                if (!SubAccount)
                    res = await AppData.Account.MintMultiNFT(newNFT, NumberOfCoppies);
                else
                    res = await AppData.Account.MultimintNFTLargeOnSubAccount(Address, newNFT, NumberOfCoppies);
            }
            else
            {
                if (!SubAccount)
                    res = await AppData.Account.MintNFT(newNFT);
                else
                    res = await AppData.Account.MintNFTOnSubAccount(Address, newNFT);
            }

            if (res.Item1)
            {
                await NFTMinted.InvokeAsync(res.Item2);

                if (RedirectToNFTsAfterMint)
                {
                    processingMinting = false;
                    StateHasChanged();
                    await Task.Delay(500);
                    NavManager.NavigateTo("/nfts");
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alertMessage", "Some error during minting: " + res.Item2);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            processingMinting = false;
            StateHasChanged();
        }
    }
}
