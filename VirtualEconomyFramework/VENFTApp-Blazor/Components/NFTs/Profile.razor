@using System.IO;
@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NeblioAPI
@using System.Threading
@using System.Threading.Tasks
@inject AppData AppData
@inject HttpClient _client

<VENFTApp_Blazor.Components.Spin Spinning="@loadingProfile" Tip="Loading Profile...">
    <div class="row d-flex justify-content-center" style="min-width:250px;">
        <div class="col">
            <div class="row">
                <div class="col d-flex justify-content-center align-items-center">
                    <img src="@profileNFT.ImageLink" style="min-height:50px; max-height:100px; width:auto;" />
                </div>
            </div>
            <div class="row" style="margin-top:15px;">
                <div class="col d-flex justify-content-center align-items-center">
                    <span>@profileNFT.Name @profileNFT.Surname</span>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex justify-content-center align-items-center">
                    <small class="text-muted"> @profileNFT.Nickname </small>
                </div>
            </div>
            <div class="row" style="margin-top:10px;">
                <div class="col d-flex justify-content-center align-items-center">
                    <span class="text-center" style="max-width:150px;">@profileNFT.Description</span>
                </div>
            </div>
            <div class="row" style="margin-top:10px;">
                <div class="col d-flex justify-content-center align-items-center">
                    <a href="@profileNFT.Link" target="_blank">Webpage</a>
                </div>
            </div>
            @if (!ReadOnlyProfile)
            {
                @if (createNewProfile)
                {
                    <div class="row">
                        <div class="col d-flex justify-content-center align-items-center">
                            <button class="btn btn-primary" @onclick="showNewProfileDialog" style="margin-top:20px;">Create New Profile</button>
                        </div>
                    </div>
                }
                else
                {
                    @if (AppData.Account.CoruzantSourceTokensBalance > 0 || AppData.Account.SourceTokensBalance > 0)
                    {
                        <div class="row">
                            <div class="col d-flex justify-content-center align-items-center">
                                <button class="btn btn-primary" @onclick="showNewProfileDialog" style="margin-top:20px;">Edit Profile</button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row">
                            <div class="col d-flex justify-content-center align-items-center">
                                <span class="text-warning">Please load tokens first for creating profile.</span>
                            </div>
                        </div>
                    }
                }
            }
        </div>
    </div>
</VENFTApp_Blazor.Components.Spin>

<Modal Title="Create new profile NFT"
       Visible="@createNewProfileVisible"
       OnCancel="@createNewProfileCancel"
       Footer="null">
        <MintNFTForm NFTType="NFTTypes.Profile" NFT="@profileNFT" RedirectToNFTsAfterMint="false" NFTMinted="ProfileChanged" TokenId="@tokenIdForProfile" />
</Modal>

@code {

    [Parameter]
    public bool ReadOnlyProfile { get; set; } = true;

    private ProfileNFT profileNFT = new ProfileNFT("");
    [Parameter]
    public ProfileNFT NFT
    {
        get => profileNFT;
        set
        {
            if (value != null)
            {
                if (profileNFT.Utxo != value.Utxo)
                {
                    profileNFT = value;
                    if (string.IsNullOrEmpty(profileNFT.Utxo))
                    {
                        createNewProfile = true;
                        change = false;
                    }
                    else
                    {
                        createNewProfile = false;
                        change = true;
                    }
                    StateHasChanged();
                }
            }
        }
    }

    private bool loadingProfile = true;
    private bool createNewProfileVisible = false;
    private bool createNewProfile = false;
    private bool change = false;
    private bool processingMinting = false;
    private string tokenIdForProfile = NFTHelpers.TokenId;

    private ProfileNFT newProfileNFT = new ProfileNFT("");

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (string.IsNullOrEmpty(profileNFT.Utxo))
            {
                createNewProfile = true;
                change = false;
            }
            else
            {
                createNewProfile = false;
                change = true;
            }
            StateHasChanged();
        }
        base.OnAfterRender(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        if (AppData.Account != null)
        {
            AppData.Account.Refreshed -= RefreshedHandler;
            AppData.Account.Refreshed += RefreshedHandler;
        }
        await LoadProfile();
    }

    void RefreshedHandler(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    void ProfileChanged(string txid)
    {
        loadingProfile = false;
        createNewProfileVisible = false;
        ReloadProfile();
        StateHasChanged();
    }

    private async Task LoadProfile()
    {
        loadingProfile = false;
        StateHasChanged();
        if (string.IsNullOrEmpty(profileNFT.Utxo))
        {
            createNewProfile = true;
            change = false;
        }
        else
        {
            createNewProfile = false;
            change = true;
        }
        loadingProfile = false;
        StateHasChanged();
    }

    private async Task showNewProfileDialog(MouseEventArgs e)
    {
        if (!string.IsNullOrEmpty(profileNFT.Utxo))
        {
            try
            {
                var nft = await NFTFactory.CloneNFT(profileNFT);//await NFTFactory.GetNFT("", profileNFT.Utxo, 0, 0, true);
                newProfileNFT = nft as ProfileNFT;
                StateHasChanged();
            }
            catch(Exception ex)
            {
                loadingProfile = false;
                processingMinting = false;
                Console.WriteLine("Cannot load last profile. " + ex.Message);
            }
        }
        else
        {
            if (AppData.Account.TokensSupplies.TryGetValue(NFTHelpers.TokenId, out var ts))
            {
                tokenIdForProfile = ts.TokenId;
            }
            else
            {
                var to = AppData.Account.TokensSupplies.Values.FirstOrDefault(t => t.Amount > 5);
                if (to != null)
                    tokenIdForProfile = to.TokenId;
                else
                    return;
            }
        }
        createNewProfileVisible = true;
    }

    private async Task createNewProfileCancel(MouseEventArgs e)
    {
        createNewProfileVisible = false;
    }

    private async Task ReloadProfile()
    {
        await AppData.Account.ReloadUtxos();
        await AppData.Account.ReLoadNFTs();
        profileNFT = AppData.Account.Profile;
        StateHasChanged();
    }
}
