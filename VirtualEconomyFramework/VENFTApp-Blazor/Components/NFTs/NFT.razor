@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NFT.Coruzant
@inject AppData AppData
@inject IJSRuntime jsRuntime


    @if (nft != null && !string.IsNullOrEmpty(nft.Utxo))
    {
    <div class="card" style="margin-left:10px; margin-top:10px;min-width:250px; width:250px; max-width:250px; min-height:400px; max-height:600px;">
        <div class="card-header" style="padding: 0px;">
            <div class="row" style="max-width: 250px;height:200px;margin: 0px;">
                <div class="col d-flex justify-content-center align-items-center" style="padding: 0px;">
                    @if (DisplayCheckField)
                    {
                        <input type="checkbox" style="position : absolute; right: 220px; top: 20px; z-index:10;" @onchange="eventArgs => { checkNFTChanged(eventArgs.Value); }" />
                    }
                    @switch (nft.Type)
                    {
                        case NFTTypes.Image:
                            @if (!string.IsNullOrEmpty(nft.ImageLink))
                            {
                                <img src="@nft.ImageLink" @onclick="async () => await OpenModalWithImage(nft.ImageLink)" style="max-height:200px; max-width:250px;" />
                            }
                            else if (string.IsNullOrEmpty(nft.ImageLink) && !nft.IsLoaded)
                            {
                                <Spin Tip="Loading..." Style="min-width:50px;">
                                    <NoImageLoaded />
                                </Spin>
                            }
                            else
                            {
                                <NoImageLoaded />
                            }
                            break;
                        case NFTTypes.Invoice:
                            @if (!string.IsNullOrEmpty(nft.ImageLink))
                            {
                                <img src="@nft.ImageLink" @onclick="async () => await OpenModalWithImage(nft.ImageLink)" style="max-height:200px; max-width:250px;" />
                            }
                            else if (string.IsNullOrEmpty(nft.ImageLink) && !nft.IsLoaded)
                            {
                                <Spin Tip="Loading..." Style="min-width:50px;">
                                    <NoImageLoaded />
                                </Spin>
                            }
                            else
                            {
                                <NoImageLoaded />
                            }
                            break;
                        case NFTTypes.Product:
                            @if (!string.IsNullOrEmpty(nft.ImageLink))
                            {
                                <img src="@nft.ImageLink" @onclick="async () => await OpenModalWithImage(nft.ImageLink)" style="max-height:200px; max-width:250px;" />
                            }
                            else if (string.IsNullOrEmpty(nft.ImageLink) && !nft.IsLoaded)
                            {
                                <Spin Tip="Loading..." Style="min-width:50px;">
                                    <NoImageLoaded />
                                </Spin>
                            }
                            else
                            {
                                <NoImageLoaded />
                            }
                            break;
                        case NFTTypes.Profile:
                            @if (!string.IsNullOrEmpty(nft.ImageLink))
                            {
                                <img src="@nft.ImageLink" @onclick="async () => await OpenModalWithImage(nft.ImageLink)" style="max-height:200px; max-width:250px;" />
                            }
                            else
                            {
                                <NoImageLoaded />
                            }
                            break;
                        case NFTTypes.Ticket:
                            var tnft = nft as TicketNFT;
                            @if (!string.IsNullOrEmpty(nft.ImageLink) || !string.IsNullOrEmpty(nft.Link))
                            {
                                @if (tnft.MusicInLink)
                                {
                                    <video name="media" style="max-width:250px; width:250px; max-height:200px; margin-bottom:70px;" controls>
                                        <source src="@nft.Link" type="audio/mpeg" autostart="false">
                                    </video>
                                }
                                else
                                {
                                    @if (!string.IsNullOrEmpty(nft.ImageLink))
                                    {
                                        <img src="@nft.ImageLink" @onclick="async () => await OpenModalWithImage(nft.ImageLink)" style="max-height:200px; max-width:250px;" />
                                    }
                                }
                            }
                            else
                            {
                                <NoImageLoaded />
                            }
                            break;
                        case NFTTypes.Event:
                            var enft = nft as EventNFT;
                            @if (!string.IsNullOrEmpty(nft.ImageLink) || !string.IsNullOrEmpty(nft.Link))
                            {
                                @if (enft.MusicInLink)
                                {
                                    <video name="media" style="max-width:250px; width:250px; max-height:200px; margin-bottom:70px;" controls>
                                        <source src="@nft.Link" type="audio/mpeg" autostart="false">
                                    </video>
                                }
                                else
                                {
                                    @if (!string.IsNullOrEmpty(nft.ImageLink))
                                    {
                                        <img src="@nft.ImageLink" @onclick="async () => await OpenModalWithImage(nft.ImageLink)" style="max-height:200px; max-width:250px;" />
                                    }
                                }
                            }
                            else
                            {
                                <NoImageLoaded />
                            }
                            break;
                        case NFTTypes.Post:
                            @if (!string.IsNullOrEmpty(nft.ImageLink))
                            {
                                <img src="@nft.ImageLink" @onclick="async () => await OpenModalWithImage(nft.ImageLink)" style="max-height:200px; max-width:250px;" />
                            }
                            else if (string.IsNullOrEmpty(nft.ImageLink) && !nft.IsLoaded)
                            {
                                <Spin Tip="Loading...">
                                    <NoImageLoaded />
                                </Spin>
                            }
                            else
                            {
                                <NoImageLoaded />
                            }
                            break;
                        case NFTTypes.Music:
                            @if (!string.IsNullOrEmpty(nft.Link))
                            {
                                <video name="media" style="max-width:250px; width:250px; max-height:200px; margin-bottom:70px;" controls>
                                    <source src="@nft.Link" type="audio/mpeg" autostart="false">
                                </video>
                            }
                            else if (!string.IsNullOrEmpty(nft.ImageLink) && string.IsNullOrEmpty(nft.Link))
                            {
                                <video name="media" style="max-width:250px; width:250px; margin-bottom:70px;" controls>
                                    <source src="@nft.Link" type="audio/mpeg" autostart="false">
                                </video>
                            }
                            break;
                    }
                </div>
            </div>
        </div>
    
        <div class="card-body d-flex justify-content-center align-items-end @NFTCheckedBgColor">

            @if (nft.TokenId == NFTHelpers.TokenId)
            {
                <span class="badge badge-warning" style="position: absolute;right: 200px;top: 207px;">VENFT</span>
                @if (IsInWooCom)
                {
                    <span class="badge badge-info" style="position: absolute;right: 155px;top: 207px;">Eshop</span>
                }
            }
            else if (nft.TokenId == CoruzantNFTHelpers.CoruzantTokenId)
            {
                <span class="badge badge-primary" style="position: absolute;right: 190px;top: 207px;">Coruzant</span>
                @if (IsInWooCom)
                {
                    <span class="badge badge-info" style="position: absolute;right: 150px;top: 207px;">Eshop</span>
                }
            }

            <div style="position: absolute;right: 7px;top: 203px; padding:0px; margin:0px;">
                @if (nft.Type == NFTTypes.Ticket)
                {
                    var tnft = nft as TicketNFT;
                    <VENFTApp_Blazor.Components.NFTs.Tickets.TicketDurationBadge TicketDuration="@tnft.TicketDuration" />
                    <VENFTApp_Blazor.Components.NFTs.Tickets.TicketClassBadge TicketClass="@tnft.TicketClass" />
                }
                else if (nft.Type == NFTTypes.Event)
                {
                    var enft = nft as EventNFT;
                    <VENFTApp_Blazor.Components.NFTs.Tickets.NFTEventClass EventClass="@enft.EventClass" />
                }

                <VENFTApp_Blazor.Components.NFTs.NFTTypeBadge NFTType="@nft.Type"/>
            </div>

            <button class="btn btn-light" @onclick="ShowShareNFT"
                    style="position:absolute; right: 7px;top: 230px; width: 30px;height: 25px;padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;font-size: 12px;">
                <i class="oi oi-share" style="font-size:12px;"></i>
            </button>
            <div class="row" style="margin: 0px;">
                <div class="col" style="padding: 0px;">
                    <div class="row text-center" style="margin: 0px;">
                        <div class="col text-center" style="padding: 0px;">
                            @if (!string.IsNullOrEmpty(nft.Name))
                            {
                                @if (nft.Name.Length > 20)
                                {
                                    <h6 class="text-center">@nft.Name.Substring(0, 19) ...</h6>
                                }
                                else
                                {
                                    <h6 class="text-center">@nft.Name</h6>
                                }
                            }
                        </div>
                    </div>
                    <div class="row text-center" style="margin: 0px;">
                        <div class="col text-center" style="padding: 0px;">
                            @if (!string.IsNullOrEmpty(nft.Author))
                            {
                                @if (nft.Author.Length > 30)
                                {
                                    <small class="text-center">@nft.Author.Substring(0, 29) ...</small>
                                }
                                else
                                {
                                    <small class="text-center">@nft.Author</small>
                                }
                            }
                        </div>
                    </div>
                    <div class="row text-center" style="margin: 0px;">
                        <div class="col text-center" style="padding: 0px;">
                            @if (!string.IsNullOrEmpty(nft.Description))
                            {
                                @if (nft.Description.Length > 80)
                                {
                                    <small class="text-center">@nft.Description.Substring(0, 79) ...</small>
                                }
                                else
                                {
                                    <small class="text-center">@nft.Description</small>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @if (!HideButtons)
        {
            <div class="card-footer d-flex justify-content-center align-items-center">
                <small class="text-muted">
                    <div class="row d-flex justify-content-center align-items-center">
                        <div class="col d-flex w-auto">
                            <button class="btn btn-primary" @onclick="async () => ShowNFTDetails(nft.Utxo)" style="width: 40px;height: 25px;padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;font-size: 12px;">
                                <i class="oi oi-info" style="font-size:12px;"></i>
                            </button>
                        </div>

                        @if (AllowBuy && !_isInThePayments && !OwnNFT && nft.PriceActive && nft.Type != NFTTypes.Payment && !string.IsNullOrEmpty(_address))
                        {
                            <div class="col d-flex w-auto" style="margin-left:15px;">
                                <VENFTApp_Blazor.Components.NFTs.Payments.SendNFTPayment NFT="@nft" 
                                                                                         Utxo="@nft.Utxo" 
                                                                                         UtxoIndex="@nft.UtxoIndex" 
                                                                                         OwnNFT="false" 
                                                                                         Receiver="@_address" 
                                                                                         Price="@nft.Price" 
                                                                                         NFTSent="@NFTSent" />
                            </div>
                        }
                    </div>

                    <div class="row d-flex justify-content-center align-items-center">
                        @if (!_isInThePayments)
                        {
                            @if (OwnNFT && nft.PriceActive)
                            {
                                <div class="col">
                                    <small class="text-muted">Setted Price: @nft.Price NEBL <img style="width: 8px;margin-left: 4px; margin-bottom:2px;" src="images/neblio-icon.png" /></small>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="col">
                                <small class="text-muted">Sold. Waiting for processing.</small>
                            </div>
                        }
                    </div>
                    
                </small>
            </div>
        }
    </div>

    <!--NFT Details Modal-->
    <Modal Title="NFT Details"
           Visible="@nftDetailsVisible"
           OnCancel="@CloseNFTDetails"
           Footer="null">
        <VENFTApp_Blazor.Components.NFTs.NFTDetails UtxoIndex="@nft.UtxoIndex" 
                                               Utxo="@nft.Utxo"
                                               InputNFT="@nft"
                                               NFTSent="@NFTSentHandler" 
                                               OwnNFT="@OwnNFT"
                                               Address="@_address"
                                               SubAccount="@SubAccount"/>
    </Modal>

    <!--Modal With Image-->
    <Modal Title="NFT Image"
           Style="min-height:200px; min-width:200px;"
           Visible="@modalWithImageVisible"
           OnCancel="@modalWithImageClose"
           Footer="null">
        <div class="row">
            <div class="col d-flex justify-content-center align-items-center">
                <img class="card-img-top" src="@modalWithImageLink" style="min-height:100px; height:auto; min-width:200px; width:auto;" />
            </div>
        </div>
    </Modal>

    <VENFTApp_Blazor.Components.NFTs.ShareNFT NFTUtxo="@nft.Utxo" 
                                              NFTUtxoIndex="@nft.UtxoIndex" 
                                              DisplayButton="false" 
                                              ShowShareNFTDialog="@shareNFTVisible"
                                              DialogClosed="ShareDialogClosedHandler"/>
}

@code {

    [Parameter]
    public bool HideButtons { get; set; } = false;

    [Parameter]
    public bool SubAccount { get; set; } = false;

    [Parameter]
    public bool IsInWooCom { get; set; } = false;

    [Parameter]
    public bool AllowBuy { get; set; } = true;

    [Parameter]
    public bool DisplayCheckField { get; set; } = false;

    private INFT nft = new ImageNFT("");
    [Parameter]
    public INFT InputNFT
    {
        get => nft;
        set
        {
            if (value != null)
            {
                NFTChecked = false;
                nft = value;
                _isInThePayments = IsInThePayments(nft.Utxo);
                nft.IsInThePayments = _isInThePayments;
                setBgColor();
            }
        }
    }

    string _address = string.Empty;
    [Parameter]
    public string Address
    {
        get => _address;
        set
        {
            if (!string.IsNullOrEmpty(value))
            {
                _address = value;
            }
        }
    }

    [Parameter]
    public bool OwnNFT { get; set; } = false;

    [Parameter]
    public EventCallback<string> NFTSent { get; set; }

    [Parameter]
    public EventCallback<(INFT, bool)> NFTCheckedChanged { get; set; }

    public bool NFTChecked { get; set; } = false;
    public string NFTCheckedBgColor { get; set; } = string.Empty;

    private bool _isInThePayments = false;
    private bool shareNFTVisible = false;
    private bool nftDetailsVisible = false;
    private bool modalWithImageVisible = false;

    private string modalWithImageLink = string.Empty;

    protected override Task OnInitializedAsync()
    {
        RegisterEvents();
        return base.OnInitializedAsync();
    }

    private void RegisterEvents()
    {
        if (!string.IsNullOrEmpty(AppData.Account.Address))
        {
            AppData.Account.NFTAddedToPayments -= NFTInPaymentsHandler;
            AppData.Account.NFTAddedToPayments += NFTInPaymentsHandler;
        }
    }

    private void NFTSentHandler(string nfttx)
    {
        nftDetailsVisible = false;
        shareNFTVisible = false;
        StateHasChanged();
        NFTSent.InvokeAsync(nfttx);
    }

    private void ShareDialogClosedHandler(bool e)
    {
        shareNFTVisible = false;
    }

    private void NFTInPaymentsHandler(object sender, (string, int) e)
    {
        if (!string.IsNullOrEmpty(e.Item1) && (string)sender == _address)
        {
            if (e.Item1 == nft.Utxo && e.Item2 == nft.UtxoIndex)
            {
                _isInThePayments = true;
                nft.IsInThePayments = true;
                StateHasChanged();
            }
        }
    }

    private async Task checkNFTChanged(object e)
    {
        NFTChecked = (bool)e;
        await setBgColor();
        await NFTCheckedChanged.InvokeAsync((nft, NFTChecked));
    }

    private async Task setBgColor()
    {
        if (NFTChecked)
            NFTCheckedBgColor = "bg-info";
        else
            NFTCheckedBgColor = string.Empty;
        StateHasChanged();
    }

    private bool IsInThePayments(string utxo)
    {
        if (NFTHelpers.IsBuyableNFT(nft.Type))
        {
            if (OwnNFT)
            {
                if (!SubAccount)
                {
                    if (AppData.Account.ReceivedPayments.TryGetValue(utxo, out var mnft))
                        if ((mnft as PaymentNFT).NFTUtxoIndex == nft.UtxoIndex)
                            return true;
                }
                else
                {
                    if (AppData.Account.SubAccounts.TryGetValue(Address, out var sa))
                        if (sa.ReceivedPayments.TryGetValue(utxo, out var mnft))
                            if ((mnft as PaymentNFT).NFTUtxoIndex == nft.UtxoIndex)
                                return true;
                }
            }
            else
            {
                if (!string.IsNullOrEmpty(_address))
                {
                    var tab = AppData.Account.Tabs.Find(t => t.Address == _address);
                    if (tab != null && tab.ReceivedPayments.TryGetValue(utxo, out var nnft))
                        if ((nnft as PaymentNFT).NFTUtxoIndex == nft.UtxoIndex)
                            return true;
                }
            }
        }
        return false;
    }

    private void ShowShareNFT()
    {
        StateHasChanged();
        shareNFTVisible = true;
    }

    private async Task CloseShareNFT(MouseEventArgs e)
    {
        shareNFTVisible = false;
    }

    private async Task ShowNFTDetails(string utxo)
    {
        nftDetailsVisible = true;
    }

    private async Task CloseNFTDetails(MouseEventArgs e)
    {
        await nft.StopRefreshingData();
        nftDetailsVisible = false;
    }

    public async Task OpenModalWithImage(string url)
    {
        modalWithImageVisible = true;
        modalWithImageLink = url;
    }

    public async Task modalWithImageClose(MouseEventArgs e)
    {
        modalWithImageVisible = false;
    }
}
