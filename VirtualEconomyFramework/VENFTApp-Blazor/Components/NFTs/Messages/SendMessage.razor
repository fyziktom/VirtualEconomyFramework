@using VEDriversLite
@using VEDriversLite.NFT
@inject AppData AppData
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

<div class="row">
    <div class="col">
        <VENFTApp_Blazor.Components.Spin Spinning="@processingSending" Tip="Sending...">
            <div class="row">
                <div class="col">
                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <small>Name of message</small>
                        </div>
                    </div>
                    <div class="row" style="margin-top:5px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <Input Placeholder="Add Name of the message" MaxLength="50" @bind-Value=@name Style="font-size:12px; min-width:250px; max-width:350px;" />
                        </div>
                    </div>

                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <small>Message</small>
                        </div>
                    </div>
                    <div class="row" style="margin-top:5px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <TextArea Placeholder="Type your message" MaxLength="600" @bind-Value=@description Style="font-size:12px; min-width:250px; max-width:350px; min-height:100px;" />
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(description))
                    {
                        <div class="row" style="margin-top:2px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small class="text-info">Remaining @(600-description.Length) from 600 characters.</small>
                            </div>
                        </div>
                    }

                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <UploadImage ImageLink="@imagelink" EncryptedContent="@encrypt" Partner="@receiver" ImageLinkChanged="@ImageLinkChanged" NFTType="@NFTTypes.Image" />
                        </div>
                    </div>
                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <small>Receiver</small>
                        </div>
                    </div>
                    <div class="row" style="margin-top:5px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <VENFTApp_Blazor.Components.Account.NeblioAddressInput Receiver="@receiver" AddressCheckedInputed="receiverAddressChangedHandler" />
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(description))
                    {
                        <div class="row" style="margin-top:20px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <input type="checkbox" checked="checked" @onchange="eventArgs => { encryptChanged(eventArgs.Value); }" /><span style="margin-left:10px;">Encrypt</span><br />
                            </div>
                        </div>
                    }
                    <div class="row" style="margin-top:20px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <small class="text-center">Sending costs 0.0002 NEBL (fee) and 1 VENFT (carrier, just in case of new message).</small>
                        </div>
                    </div>

                    @if (string.IsNullOrEmpty(receiver))
                    {
                        <div class="row" style="margin-top:20px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <button class="btn btn-primary disabled">Wrong Receiver</button>
                            </div>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(newNFT.Utxo) && !newNFT.IsSpendable())
                    {
                        <div class="row" style="margin-top:20px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <button class="btn btn-primary disabled">Not enough confirmations</button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row" style="margin-top:20px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <button class="btn btn-primary" @onclick="ShowMintConfirm">Send Message</button>
                            </div>
                        </div>
                    }

                </div>
            </div>
        </VENFTApp_Blazor.Components.Spin>

        <Modal Title="Mint New NFT"
               Visible="@confirmVisible"
               OnOk="@HandleOk"
               OnCancel="@HandleCancel">
            <p>"Do you really want to send this message?"</p>
        </Modal>
        <Modal Title="Required"
               Visible="@emptyInfoVisible"
               OnOk="@HandleEmptyInfoCancel"
               OnCancel="@HandleEmptyInfoCancel">
            <p>"You must fill Name, Message and receiver."</p>
        </Modal>
    </div>
</div>

@code {

    private string receiver = string.Empty;
    [Parameter]
    public string Receiver
    {
        get => receiver;
        set
        {
            receiver = value;
            StateHasChanged();
        }
    }

    private INFT sourceNFT = new MessageNFT("");
    [Parameter]
    public INFT NFT
    {
        get => sourceNFT;
        set
        {
            if (value != null && !string.IsNullOrEmpty(value.Utxo) && value.Utxo != newNFT.Utxo)
            {
                if (!string.IsNullOrEmpty(newNFT.Utxo))
                {
                    newNFT.TxDataRefreshed -= TxDataRefreshedHandler;
                    newNFT.StopRefreshingData();
                }
                newNFT.Fill(value);
                newNFT.Description = string.Empty;
                description = string.Empty;
                newNFT.Name = value.Name;
                if (!string.IsNullOrEmpty(value.ImageLink))
                {
                    imagelink = string.Empty;//value.ImageLink;
                    newNFT.ImageLink = imagelink;
                }
                if (!string.IsNullOrEmpty(newNFT.Utxo))
                {
                    newNFT.TxDataRefreshed += TxDataRefreshedHandler;
                    newNFT.StartRefreshingTxData();
                }
                name = value.Name;

                StateHasChanged();
            }
        }
    }

    [Parameter]
    public EventCallback<string> MessageSent { get; set; }

    private bool emptyInfoVisible = false;
    private bool uploadingImage = false;
    private bool confirmVisible = false;
    private bool processingSending = false;
    private bool encrypt = true;

    private string name = string.Empty;
    private string description = string.Empty;
    private string imagelink = string.Empty;

    private INFT newNFT = new MessageNFT("");

    private void ImageLinkChanged(string newLink)
    {
        if (!string.IsNullOrEmpty(newLink))
            imagelink = newLink;
        StateHasChanged();
    }

    private void TxDataRefreshedHandler(object sender, VEDriversLite.NeblioAPI.GetTransactionInfoResponse e)
    {
        StateHasChanged();
    }

    private void receiverAddressChangedHandler(string address)
    {
        if (address.Length < 8)
        {
            Receiver = string.Empty;
            return;
        }
        Receiver = address;
        StateHasChanged();
    }

    private async Task encryptChanged(object e)
    {
        encrypt = (bool)e;
        StateHasChanged();
    }

    private void ShowMintConfirm()
    {
        confirmVisible = true;
    }

    private async Task HandleOk(MouseEventArgs e)
    {
        await SendMessageNFT();
    }

    private void HandleCancel(MouseEventArgs e)
    {
        confirmVisible = false;
    }

    private void HandleEmptyInfoCancel(MouseEventArgs e)
    {
        emptyInfoVisible = false;
    }

    private async Task SendMessageNFT()
    {
        try
        {
            newNFT.Name = name;
            newNFT.Description = description;
            newNFT.ImageLink = imagelink;

            if (string.IsNullOrEmpty(newNFT.Name) || string.IsNullOrEmpty(newNFT.Description) || string.IsNullOrEmpty(receiver))
            {
                emptyInfoVisible = true;
                return;
            }

            processingSending = true;
            confirmVisible = false;
            StateHasChanged();

            await newNFT.StopRefreshingData();

            var res = await AppData.Account.SendMessageNFT(newNFT.Name, newNFT.Description, receiver, newNFT.Utxo, encrypt, imagelink);

            if (res.Item1)
            {
                var r = AppData.Account.MessageTabs.Find(t => t.Address == receiver);
                if (r == null || string.IsNullOrEmpty(r.Address))
                {
                    await AppData.Account.AddMessageTab(receiver);
                }
                await MessageSent.InvokeAsync(res.Item2);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alertMessage", "Some error during minting: " + res.Item2);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            processingSending = false;
            StateHasChanged();
        }
    }
}
