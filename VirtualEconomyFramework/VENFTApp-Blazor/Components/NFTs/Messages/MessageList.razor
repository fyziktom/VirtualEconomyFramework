@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NeblioAPI
@inject AppData AppData

<div class="container-fluid overflow-auto h-100" style="min-height:600px;">
    <div class="row h-100">
        <div class="col h-100">

            <div class="row">
                <div class="col d-flex justify-content-center align-items-center">
                    <span style="font-size:11px;">
                        <a href="https://explorer.nebl.io/address/@AppData.Account.Address" style="font-size:11px;" target="_blank">@AppData.Account.Address</a>
                    </span>
                    <VENFTApp_Blazor.Components.HelperButtons.CopyIcon MarginLeft="15" TextToCopy="@AppData.Account.Address" />
                    <VENFTApp_Blazor.Components.HelperButtons.QRIcon MarginLeft="10" TextToCopy="@AppData.Account.Address" />
                </div>
            </div>

            <div class="row" style="margin-top:20px;">
                <div class="col d-flex justify-content-center align-items-center">
                    <div class="row" style="margin-top:20px;">
                        <div class="col">
                            <button class="btn btn-light" @onclick="showSendMessage"><i class="oi oi-location"></i></button>
                        </div>
                        <div class="col">
                            <button class="btn btn-light" @onclick="ReloadNFTs"><i class="oi oi-reload"></i></button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row w-100 h-100" style="margin-top:10px;">
                <div class="col h-100 d-flex justify-content-center align-items-center">
                    @if (NFTsList.Count == 0)
                    {
                        <VENFTApp_Blazor.Components.Spin Tip="Loading...No Messages found yet" />
                    }
                    else
                    {
                        <div class="card-group w-100">
                            @for (int i = 0; i < NFTsList.Count; i++)
                            {
                                if (NFTsList[i].Type == NFTTypes.Message)
                                {
                                    var nft = NFTsList[i];
                                    <div class="card w-100" style="margin-left:10px; margin-top:10px; width:250px; min-width:250px; max-width:250px; max-height:200px; height:200px;">
                                        <div class="card-body w-100 d-flex justify-content-center align-items-start">

                                            <div class="row w-100" style="margin: 0px;">
                                                <div class="col w-100" style="padding: 0px;">
                                                    @if ((nft as MessageNFT).IsReceivedMessage)
                                                    {
                                                        <span class="badge badge-primary" style="position: absolute;right: -10px;top: 5px;">Received</span>
                                                    }
                                                    else
                                                    {
                                                        <!--<span class="badge badge-success" style="position: absolute;right: -10px;top: 5px;">Sent</span>-->
                                                    }
                                                    <div class="row" style="margin: 0px;">
                                                        <div class="col" style="padding: 0px;">
                                                            <small class="text-center">@nft.Time</small>
                                                        </div>
                                                    </div>
                                                    @if (nft.Author == AppData.Account.Address)
                                                    {
                                                        <div class="row" style="margin: 0px;">
                                                            <div class="col" style="padding: 0px;">
                                                                <small class="text-center text-muted mb-2">Sender: Me</small>
                                                            </div>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <div class="row" style="margin: 0px;">
                                                            <div class="col" style="padding: 0px;">
                                                                <small class="text-center text-muted mb-2">Sender: @IsSenderInTheBookmarks(nft.Author)</small>
                                                            </div>
                                                        </div>
                                                    }
                                                    <hr />
                                                    <div class="row" style="margin: 0px;">
                                                        <div class="col" style="padding: 0px;">
                                                            @if (nft.Name.Length > 20)
                                                            {
                                                                <small>@nft.Name.Substring(0, 19) ...</small>
                                                            }
                                                            else
                                                            {
                                                                <small>@nft.Name</small>
                                                            }
                                                        </div>
                                                    </div>
                                                    <div class="row" style="margin: 0px;">
                                                        <div class="col text-center" style="padding: 0px;">
                                                            @if (nft.Description.Length > 20)
                                                            {
                                                                <small>@nft.Description.Substring(0, 19) ...</small>
                                                            }
                                                            else
                                                            {
                                                                <small>@nft.Description</small>
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row" style="margin-top:20px;">
                                                <div class="col d-flex justify-content-end align-items-end">
                                                    <button class="btn btn-light" @onclick="() => showMessageDetails(nft)"><i class="oi oi-envelope-open"></i></button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<Modal Title="Message Details"
       Visible="@messageDetailsVisible"
       OnCancel="@messageDetailsVisibleCancel"
       Footer="null">
    <NFTMessage Utxo="@selectedNFTUtxo" InputNFT="@nftToShow" Address="@_address" NFTSent="NFTSentHandler" />
</Modal>

<Modal Title="Send Message"
       Visible="@sendMessageVisible"
       OnOk="@sendMessageConfirm"
       OnCancel="@sendMessageCancel">
    <SendMessage MessageSent="NFTSentHandler" />
</Modal>

@code {

    public List<INFT> NFTsList
    {
        get
        {
            if (MainAccount)
            {
                return AppData.Account.NFTs;
            }
            else if (SubAccount)
            {
                if (AppData.Account.SubAccounts.TryGetValue(Address, out var sacc))
                {
                    return sacc.NFTs;
                }
            }
            return new List<INFT>();
        }
    }

    [Parameter]
    public EventCallback<List<INFT>> NFTsChanged { get; set; }

    private string _address = string.Empty;
    [Parameter]
    public string Address
    {
        get => _address;
        set
        {
            if (!string.IsNullOrEmpty(value))
            {
                //_nfts = new List<INFT>();
                _address = value;
                //_nfts = AppData.Account.NFTs;
                //StateHasChanged();
            }
        }
    }

    [Parameter]
    public bool MainAccount { get; set; } = true;

    [Parameter]
    public bool SubAccount { get; set; } = false;

    public bool OwnNFT => MainAccount || SubAccount;

    private bool sendMessageVisible = false;
    private bool messageDetailsVisible = false;

    private int refresh = 30;
    private int lastCount = 0;

    private string selectedNFTUtxo = string.Empty;
    private string lastAddress = string.Empty;

    private INFT nftToShow = new MessageNFT("");

    protected override async Task OnInitializedAsync()
    {
        if (AppData.Account != null)
        {
            AppData.Account.Refreshed += RefreshedHandler;
            AppData.Account.NFTsChanged += NFTsChangedHandler;
            DecryptMessages();
        }
    }

    private void RefreshedHandler(object sender, EventArgs e)
    {
        if (lastCount != AppData.Account.NFTs.Count || refresh < 0)
        {
            DecryptMessages();
            refresh = 10;
        }
        else
        {
            refresh--;
        }

        StateHasChanged();
    }

    private void NFTsChangedHandler(object sender, string e)
    {
        //_nfts = AppData.Account.NFTs;
        //DecryptMessages();
    }

    private void NFTSentHandler(string e)
    {
        sendMessageVisible = false;
        messageDetailsVisible = false;
        StateHasChanged();
    }

    private async Task DecryptMessages()
    {
        for (int i = 0; i < AppData.Account.NFTs.Count; i++)
            if (AppData.Account.NFTs[i].Type == NFTTypes.Message && !(AppData.Account.NFTs[i] as MessageNFT).Decrypted)
            {
                try
                {
                    await (AppData.Account.NFTs[i] as MessageNFT).Decrypt(AppData.Account.Secret);
                }
                catch(Exception ex)
                {
                    Console.WriteLine("Cannot decrypt the Message. " + ex.Message);
                }
            }
        StateHasChanged();
    }

    private string IsSenderInTheBookmarks(string sender)
    {
        if (!string.IsNullOrEmpty(sender))
        {
            var s = AppData.Account.Bookmarks.Find(b => b.Address == sender);
            var r = NeblioTransactionHelpers.ValidateNeblioAddress(sender);
            if (!string.IsNullOrEmpty(r))
            {
                if (s == null)
                    return NeblioAPIHelpers.ShortenAddress(sender);

                if (!string.IsNullOrEmpty(s.Name))
                    return s.Name;
                else
                    return NeblioAPIHelpers.ShortenAddress(sender);
            }
            else
            {
                if (sender.Length < 10)
                    return sender;
                else
                    return sender.Substring(0, 5) + "...";
            }
        }
        else
        {
            return string.Empty;
        }

    }

    private async Task ReloadNFTs()
    {
        if (!string.IsNullOrEmpty(_address))
        {
            await AppData.Account.ReloadUtxos();
            await AppData.Account.ReLoadNFTs();
            //_nfts = AppData.Account.NFTs;
            lastCount = NFTsList.Count;
            lastAddress = _address;
            await Task.Delay(50);
            StateHasChanged();
        }
    }

    private async Task showMessageDetails(INFT nft)
    {
        nftToShow = await NFTFactory.CloneNFT(nft);
        StateHasChanged();
        selectedNFTUtxo = nft.Utxo;
        //Console.WriteLine(nft.Utxo);
        messageDetailsVisible = true;
    }

    private async Task messageDetailsVisibleCancel()
    {
        messageDetailsVisible = false;
    }

    private async Task showSendMessage()
    {
        sendMessageVisible = true;
    }

    private async Task sendMessageCancel(MouseEventArgs e)
    {
        sendMessageVisible = false;
    }

    private async Task sendMessageConfirm(MouseEventArgs e)
    {
        sendMessageVisible = false;
    }
}
