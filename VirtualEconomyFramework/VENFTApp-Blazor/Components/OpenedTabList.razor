@using VEDriversLite.Bookmarks
@using VEDriversLite.NFT
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AppData AppData

<!--<i class="oi oi-browser" style="font-size:20px;" @onclick="showBrowseTabsOpen"></i>-->

<Modal Title="Opened Tabs"
       Visible="@showBrowseTabsVisible"
       OnOk="@showBrowseTabsCancel"
       Style="width:auto; max-width:600px;"
       OnCancel="@showBrowseTabsCancel">
    <VENFTApp_Blazor.Components.Spin Tip="@status" Spinning="@statusVisible">
        <div class="row d-flex justify-content-center align-items-center">
            <div class="col">
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex justify-content-center align-items-center">
                        <h6>Opened Tabs</h6>
                    </div>
                </div>
                <div class="row d-flex justify-content-center align-items-center" style="margin-top:10px; max-width:600px;">
                    <div class="col d-flex justify-content-center align-items-center" style="max-width:600px;">
                        <div class="card-group">

                            @foreach (var tab in AppData.Account.Tabs)
                            {
                                <VENFTApp_Blazor.Components.TabThumbnail Address="@tab.Address" 
                                                                         Selected="@tab.Selected" 
                                                                         ImageLink="@tab.Profile.ImageLink" 
                                                                         Bio="@tab.Profile.Description" 
                                                                         Nick="@tab.Profile.Nickname" 
                                                                         TabClosed="@closeTab" 
                                                                         TabSelected="@selectTab"/>
                            }

                            <div class="card" style="margin:10px; max-width:160px;width:160px;">
                                <div class="card-body d-flex justify-content-center align-items-center" style="width:150px;max-width:150px;height:150px;" @onclick="AddNewTab">
                                    <i class="oi oi-plus" style="font-size:40px;"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </VENFTApp_Blazor.Components.Spin>
</Modal>

<Modal Title="Open Tab"
       Visible="@openTabVisible"
       OnOk="@addNewTab"
       OnCancel="@addNewTabCancel">
    <div class="row">
        <div class="col">
            <div class="row">
                <div class="col d-flex justify-content-center align-items-center">
                    <span>Please Input Neblio Address</span>
                </div>
            </div>
            <div class="row" style="margin-top:10px;">
                <div class="col d-flex justify-content-center align-items-center">
                    <Input Placeholder="Input Neblio address" @bind-Value="@newTabAddress" Style="font-size:12px; min-width:150px; max-width:250px;" />
                    <!--<VENFTApp_Blazor.Components.LoadQRData MarginLeft="10" ReadedTextChanged="QRTextReaded" Name="OpenNewTabCameraStream" />-->
                </div>
            </div>
        </div>
    </div>
</Modal>

@code {

    private string selectedTabList = string.Empty;
    [Parameter]
    public string SelectedTabList
    {
        get => selectedTabList;
        set => selectedTabList = value;
    }

    private string name = string.Empty;
    [Parameter]
    public string Name
    {
        get => name;
        set
        {
            name = value;
            StateHasChanged();
        }
    }

    [Parameter]
    public bool Open
    {
        set
        {
            showBrowseTabsVisible = value;
            StateHasChanged();
        }
    }

    [Parameter]
    public EventCallback<string> TabSelected { get; set; }
    [Parameter]
    public EventCallback<string> TabClosed { get; set; }
    [Parameter]
    public EventCallback<string> NewTabOpened { get; set; }
    [Parameter]
    public EventCallback<bool> BrowseTabsClosed { get; set; }

    private bool openTabVisible = false;
    private bool statusVisible = false;
    private bool showBrowseTabsVisible = false;

    private string newTabAddress = string.Empty;
    private string status = "Loading Tabs...";

    private ElementReference qrCodeRef;

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    private void selectTab(string addr)
    {
        SelectTabAsync(addr);
    }
    private async Task SelectTabAsync(string addr)
    {
        await AppData.Account.SelectTab(addr);
        await TabSelected.InvokeAsync(addr);
        showBrowseTabsVisible = false;
        StateHasChanged();
    }

    private void closeTab(string addr)
    {
        var res = AppData.Account.RemoveTab(addr).GetAwaiter().GetResult();
        if(res.Item1)
            localStorage.SetItemAsync("browserTabs", res.Item2).GetAwaiter().GetResult();
        TabClosed.InvokeAsync(addr);
        StateHasChanged();
    }

    private async Task showBrowseTabsOpen(MouseEventArgs e)
    {
        showBrowseTabsVisible = true;
        StateHasChanged();
    }

    private async Task showBrowseTabsCancel(MouseEventArgs e)
    {
        BrowseTabsClosed.InvokeAsync(false);
        showBrowseTabsVisible = false;
        statusVisible = false;
        StateHasChanged();
    }

    private async Task AddNewTab(MouseEventArgs e)
    {
        openTabVisible = true;
    }
    private async Task addNewTabCancel()
    {
        openTabVisible = false;
    }

    private async Task addNewTab()
    {
        var res = await AppData.Account.AddTab(newTabAddress);
        if (res.Item1)
        {
            await localStorage.SetItemAsync("browserTabs", res.Item2);
            await NewTabOpened.InvokeAsync(newTabAddress);
            openTabVisible = false;
            StateHasChanged();
        }
    }
}

