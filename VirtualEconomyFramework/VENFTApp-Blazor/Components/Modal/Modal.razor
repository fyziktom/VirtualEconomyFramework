@inherits StyledComponent<Modal>
@implements IDisposable
@inject IJSRuntime JS

@if (mounted)
{
    <CascadingValue Value="@this" Name="Modal" IsFixed="true">
        <div @ref="@reference" class="blazor-modal overflow-auto" tabindex="-1" role="dialog" @onclick="@TryCancel">
            <div class="modal-dialog @Class" style="@Style" role="document" @onclick:stopPropagation="true">
                <div class="modal-content @ContentClass" style="@ContentStyle">
                    @ChildContent(this)
                </div>
            </div>
        </div>
    </CascadingValue>
}

@code {
    private bool visible = true;
    [Parameter]
    public bool Visible
    {
        get => visible;
        set
        {
            if (value != visible)
            {
                visible = value;
                StateHasChanged();
            }
        }
    }

    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }
    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public String ContentClass { get; set; }
    [Parameter]
    public String ContentStyle { get; set; }

    private bool busy = false;
    public bool Busy
    {
        get => busy;
        set
        {
            if (busy != value)
            {
                busy = value;
                StateHasChanged();
            }
        }
    }

    private bool mounted = false;
    private ElementReference reference;
    private bool moved = false;
    private bool open = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!Visible && open)
        {
            open = false;
            await JS.InvokeVoidAsync("jsFunctions.modal.close", reference);
        }
        else if (Visible && !open)
        {
            if (!moved)
            {
                moved = true;
                await JS.InvokeVoidAsync("jsFunctions.modal.add", reference);
            }
            open = true;
            await Task.Delay(1);
            await JS.InvokeVoidAsync("jsFunctions.modal.open", reference);
        }
    }

    protected override void OnParametersSet()
    {
        if (Visible && !mounted)
        {
            mounted = true;
            StateHasChanged();
        }
    }

    private async Task TryCancel()
    {
        if (!Busy)
        {
            Busy = true;
            await Cancel();
            Busy = false;
        }
    }

    public async Task Cancel()
    {
        if (OnCancel.HasDelegate)
            await OnCancel.InvokeAsync(this);
        else
            await VisibleChanged.InvokeAsync(false);
    }

    // TODO: Maybe switch to `IAsyncDisposable` when upgrade to .NET 6
    public void Dispose()
    {
        JS.InvokeVoidAsync("jsFunctions.modal.dispose", reference);
    }
}
