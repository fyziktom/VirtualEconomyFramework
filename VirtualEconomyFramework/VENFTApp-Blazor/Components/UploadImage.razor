@using System.IO;
@using VEDriversLite.NFT
@using Ipfs.Http
@using Tewr.Blazor.FileReader
@inject IFileReaderService fileReaderService
@inject AppData AppData
@inject IJSRuntime JSRuntime
@inject HttpClient _client

<div class="row">
    <div class="col">
        <!--<div class="row" id="ipfsImageUpload" style="margin-top:20px;">-->
        <div class="row" style="margin-top:20px;">
            <div class="col">
                <VENFTApp_Blazor.Components.Spin Spinning="@uploadingImage" Tip="Uploading to IPFS...">

                    <div class="row">
                        <div class="col d-flex justify-content-center align-items-center">
                            @if (NFTType == NFTTypes.Music)
                            {
                                <span>Upload Music</span>
                            }
                            else
                            {
                                <span>Upload Image</span>
                            }

                        </div>
                    </div>

                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            @if (NFTType == NFTTypes.Music)
                            {
                                <input type="file" @ref=inputTypeFileElement /> <!--accept="audio/*" />-->
                            }
                            else
                            {
                                <input type="file" @ref=inputTypeFileElement /> <!--accept="image/*" />-->
                            }

                        </div>
                    </div>
                    <div class="row" style="margin-top:3px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <small class="text-info">Upload limit size is 10 MB.</small>
                        </div>
                    </div>

                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            @if (NFTType == NFTTypes.Music)
                            {
                                <button @onclick=ReadFile>Upload Music</button>
                            }
                            else
                            {
                                <button @onclick=ReadFile>Upload Image</button>
                            }
                        </div>
                    </div>

                </VENFTApp_Blazor.Components.Spin>
            </div>
        </div>
        <div class="row" style="margin-top:20px;">
            <div class="col d-flex justify-content-center align-items-center">
                @if (NFTType == NFTTypes.Music)
                {
                    <Input Placeholder="Music Link" @bind-Value=@_imageLink @onfocusout="LinkChanged" Style="font-size:12px; min-width:250px; max-width:350px;" />
                }
                else
                {
                    <Input Placeholder="Image Link" @bind-Value=@_imageLink @onfocusout="LinkChanged" Style="font-size:12px; min-width:250px; max-width:350px;" />
                }
            </div>
        </div>
        <div class="row" style="margin-top:20px;">
            <div class="col d-flex justify-content-center align-items-center">
                @if (NFTType == NFTTypes.Music)
                {
                <p>Audio Preview:</p>
                }
                else
                {
                <p>Image Preview:</p>
                }
            </div>
        </div>
        <div class="row" style="margin-top:20px;">
            <div class="col d-flex justify-content-center align-items-center">
                @switch (loadingImageStage)
                {
                    case LoadingImageStages.NotStarted:
                        <p>No image loaded</p>
                        break;
                    case LoadingImageStages.Loading:
                        <VENFTApp_Blazor.Components.Spin Tip="Reloading..." />
                        break;
                    case LoadingImageStages.Loaded:
                        @if (NFTType == NFTTypes.Image || NFTType == NFTTypes.Post || NFTType == NFTTypes.Profile || NFTType == NFTTypes.CoruzantArticle || NFTType == NFTTypes.CoruzantProfile || NFTType == NFTTypes.CoruzantPodcast)
                        {
                            @if (!EncryptedContent)
                            {
                                <a href="@_imageLink" target="_blank"><img src="@_imageLink" style="max-width:350px; min-width:40px;" alt="Probably still waiting for ipfs confirmation. Wait a minute please..." /></a>
                            }
                            else
                            {
                                @if (decryptedFile != null)
                                {
                                    <a href="_imageLink" target="_blank"><img src="data:image;base64,@System.Convert.ToBase64String(decryptedFile)" style="max-width:350px; min-width:40px;" alt="Probably still waiting for ipfs confirmation. Wait a minute please..." /></a>
                                }
                            }
                        }
                        else if (NFTType == NFTTypes.Music)
                        {
                           <!-- <a href="@_imageLink" target="_blank"><audio src="@_imageLink" style="max-height:200px;  max-width:250px;"></audio></a>-->
                            <video controls="" autoplay=""style="margin-bottom:50px; max-width:350px;" name="media">
                                <source src="@_imageLink" type="audio/mpeg">
                            </video>
                        }
                        break;
                }
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public NFTTypes NFTType { get; set; } = NFTTypes.Image;

    private string _imageLink = string.Empty;
    [Parameter]
    public string ImageLink
    {
        get => _imageLink;
        set
        {
            if (_imageLink == value) return;
            _imageLink = value;
            if (!string.IsNullOrEmpty(value))
                loadingImageStage = LoadingImageStages.Loaded;
            else
                loadingImageStage = LoadingImageStages.NotStarted;
            StateHasChanged();
        }
    }
    [Parameter]
    public EventCallback<string> ImageLinkChanged { get; set; }

    [Parameter]
    public bool EncryptedContent { get; set; } = false;

    [Parameter]
    public string Partner { get; set; } = string.Empty;

    private bool uploadingImage = false;
    private bool errorUpload = false;

    byte[] decryptedFile = null;

    private static int attemptsToDisplay = 30;
    private static int attemptsToDisplayDefault = 30;
    private static int limitSizeInMB = 10;

    long uploadedFileLength = 0;

    LoadingImageStages loadingImageStage = LoadingImageStages.NotStarted;
    private System.Threading.Timer timer;
    private ElementReference inputTypeFileElement;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        //if (firstRender)
        //    JSRuntime.InvokeVoidAsync("jsFunctions.initUpload", DotNetObjectReference.Create(this));

        return base.OnAfterRenderAsync(firstRender);
    }

    private void LinkChanged(EventArgs e)
    {
        loadingImageStage = LoadingImageStages.Loaded;
        ImageLinkChanged.InvokeAsync(_imageLink);
    }

    [JSInvokable]
    public void UploadImageResultsAsync(String imageLink)
    {
        //loadingImageStage = LoadingImageStages.Loaded;
        uploadingImage = false;
        //ImageLinkChanged.InvokeAsync(imageLink);
        CheckFile(imageLink);
        this.StateHasChanged();
    }

    [JSInvokable]
    public void UploadStartedAsync(String filename)
    {
        uploadingImage = true;
        this.StateHasChanged();
    }

    public async Task UploadToIpfsWithButton(MouseEventArgs e)
    {
        JSRuntime.InvokeVoidAsync("jsFunctions.uploadToIpfsWithButton", DotNetObjectReference.Create(this));
    }

    public async Task CheckFile(string imageLink)
    {
        loadingImageStage = LoadingImageStages.Loading;
        StateHasChanged();
        var finished = false;
        timer = new System.Threading.Timer(async (object stateInfo) =>
        {
            try
            {
                if (!string.IsNullOrEmpty(imageLink) && imageLink.Contains("/ipfs/"))
                {
                    if (EncryptedContent)
                    {
                        var res = await NFTHelpers.IPFSDownloadFromInfuraAsync(NFTHelpers.GetHashFromIPFSLink(imageLink));
                        if (res != null && res.Length > 0.5 * uploadedFileLength)
                        {
                            ImageLink = imageLink;

                            var dbytes = await VEDriversLite.Security.ECDSAProvider.DecryptBytesWithSharedSecret(res, Partner, AppData.Account.Secret);
                            if (dbytes.Item1)
                            {
                                decryptedFile = dbytes.Item2;
                                loadingImageStage = LoadingImageStages.Loaded;
                                await ImageLinkChanged.InvokeAsync(imageLink);
                                finished = true;
                            }
                        }
                    }
                    else
                    {
                        using var httpResponse = await _client.GetAsync(imageLink);

                        if (httpResponse.IsSuccessStatusCode)
                        {
                            ImageLink = imageLink;
                            await ImageLinkChanged.InvokeAsync(imageLink);
                            finished = true;
                        }
                    }
                    attemptsToDisplay--;
                    if (attemptsToDisplay < 0)
                    {
                        loadingImageStage = LoadingImageStages.Loaded;
                        await ImageLinkChanged.InvokeAsync(imageLink);
                        finished = true;
                    }
                }
                else
                {
                    finished = true;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error during checking uploaded image!" + ex.Message);
                attemptsToDisplay--;
                if (attemptsToDisplay < 0)
                {
                    finished = true;
                }
            }

            if (finished)
            {
                if (loadingImageStage != LoadingImageStages.Loaded)
                {
                    loadingImageStage = LoadingImageStages.NotStarted;
                    errorUpload = true;
                }
                uploadingImage = false;
                StateHasChanged();
                timer.Dispose();
            }
        }, new System.Threading.AutoResetEvent(false), 2000, 2000);
    }

    public async Task ReadFile()
    {
        try
        {
            errorUpload = false;
            uploadingImage = true;
            attemptsToDisplay = attemptsToDisplayDefault;
            var i = 0;
            //StateHasChanged();
            foreach (var file in await fileReaderService.CreateReference(inputTypeFileElement).EnumerateFilesAsync())
            {
                loadingImageStage = LoadingImageStages.Loading;
                StateHasChanged();
                // Read into buffer and act (uses less memory)
                await using (Stream stream = await file.OpenReadAsync())
                {
                    var fileinfo = await file.ReadFileInfoAsync();
                    var sizeInMB = fileinfo.Size / (1024 * 1024);
                    if (sizeInMB > limitSizeInMB)
                    {
                        await JSRuntime.InvokeVoidAsync("alertMessage", $"Upload limit size is {limitSizeInMB} MB.");
                        uploadingImage = false;
                        loadingImageStage = LoadingImageStages.NotStarted;
                        fileReaderService.CreateReference(inputTypeFileElement).ClearValue();
                        StateHasChanged();
                        return;
                    }
                    try
                    {
                        var link = string.Empty;
                        if (!EncryptedContent)
                        {
                            //link = await NFTHelpers.UploadInfura(stream, fileinfo.Name);
                            link = await NFTHelpers.UploadToIPFS(stream, fileinfo.Name);
                        }
                        else
                        {
                            var bytes = new byte[stream.Length];

                            using (MemoryStream mss = new MemoryStream())
                            {
                                await stream.CopyToAsync(mss);
                                Console.WriteLine($"MS length before encryption: {mss.Length}");
                                Console.WriteLine($"Partner is: {Partner}");

                                bytes = mss.ToArray();
                                var rbytes = await VEDriversLite.Security.ECDSAProvider.EncryptBytesWithSharedSecret(bytes, Partner, AppData.Account.Secret);
                                if (rbytes.Item1)
                                {
                                    var rbl = rbytes.Item2.Length;
                                    Console.WriteLine($"Bytes length after encryption: {rbl}");
                                    using (MemoryStream ms = new MemoryStream(rbytes.Item2))
                                    {
                                        //link = await NFTHelpers.UploadInfura(ms, fileinfo.Name);
                                        link = await NFTHelpers.UploadToIPFS(ms, fileinfo.Name);
                                    }
                                }
                            }
                        }
                        uploadedFileLength = stream.Length;
                        //var imageLink = await NFTHelpers.ipfs.FileSystem.AddAsync(stream, fileinfo.Name);
                        //var link = "https://gateway.ipfs.io/ipfs/" + imageLink.ToLink().Id.ToString();
                        await CheckFile(link);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine("Error during uploading the image to the IPFS." + ex.Message);
                    }
                }
                i++;
            }
            if (i == 0)
            {
                await JSRuntime.InvokeVoidAsync("alertMessage", "You did not select any image.");
            }
        }
        catch (Exception ex)
        {
            loadingImageStage = LoadingImageStages.NotStarted;
            Console.WriteLine("Cannot upload the image. " + ex.Message);
            uploadingImage = false;
            errorUpload = true;
        }
        finally
        {
            uploadingImage = false;
            StateHasChanged();
        }
    }
}
