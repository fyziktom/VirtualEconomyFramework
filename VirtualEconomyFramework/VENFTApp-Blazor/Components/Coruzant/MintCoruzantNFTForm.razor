@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NFT.Coruzant
@using Newtonsoft.Json
@using Markdig
@inject AppData AppData
@inject HttpClient _client
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

<div class="row">
    <div class="col">
        <VENFTApp_Blazor.Components.Spin Spinning="@processingMinting" Tip="Sending...">
            <div class="row">
                <div class="col">
                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <small>Name</small>
                        </div>
                    </div>
                    <div class="row" style="margin-top:5px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            @if (nftType == NFTTypes.CoruzantProfile)
                            {
                                <Input Placeholder="Type Name" MaxLength="50" @bind-Value=@name Style="font-size:12px; min-width:250px; max-width:350px;" />
                            }
                            else if (nftType == NFTTypes.CoruzantArticle)
                            {
                                <Input Placeholder="Add Name of the Article" MaxLength="100" @bind-Value=@name Style="font-size:12px; min-width:250px; max-width:350px;" />
                            }
                        </div>
                    </div>
                    @if (string.IsNullOrEmpty(name))
                    {
                        <div class="row" style="margin-top:2px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small class="text-danger">You must fill this field.</small>
                            </div>
                        </div>
                    }
                    @if (nftType == NFTTypes.CoruzantProfile)
                    {
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Surname</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <Input Placeholder="Type your surname" MaxLength="50" @bind-Value=@surname Style="font-size:12px; min-width:250px; max-width:350px;" />
                            </div>
                        </div>
                        @if (string.IsNullOrEmpty(surname))
                        {
                            <div class="row" style="margin-top:2px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <small class="text-danger">You must fill this field.</small>
                                </div>
                            </div>
                        }
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Nickname</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <Input MaxLength="50" Placeholder="Type your nickname" @bind-Value=@nickname Style="font-size:12px; min-width:250px; max-width:350px;" />
                            </div>
                        </div>
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Author</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <Input Placeholder="Add Author of the NFT" MaxLength="50" @bind-Value=@author Style="font-size:12px; min-width:250px; max-width:350px;" />
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Author</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <Input Placeholder="Add Author of the NFT" MaxLength="50" @bind-Value=@author Style="font-size:12px; min-width:250px; max-width:350px;" />
                            </div>
                        </div>
                        @if (string.IsNullOrEmpty(author))
                        {
                            <div class="row" style="margin-top:2px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <small class="text-danger">You must fill this field.</small>
                                </div>
                            </div>
                        }
                    }
                    @if (nftType != NFTTypes.CoruzantProfile)
                    {
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Description</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <TextArea Placeholder="Add Description of the NFT" MaxLength="500" @bind-Value=@description Style="font-size:12px; min-width:250px; max-width:350px; min-height:50px;" />
                            </div>
                        </div>
                    }
                    else if (nftType == NFTTypes.CoruzantProfile)
                    {
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Bio</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <TextArea Placeholder="Type your Bio" MaxLength="500" @bind-Value=@description Style="font-size:12px; min-width:250px; max-width:350px; min-height:50px;" />
                            </div>
                        </div>
                    }
                    @if (string.IsNullOrEmpty(description))
                    {
                        <div class="row" style="margin-top:2px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small class="text-danger">You must fill this field.</small>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row" style="margin-top:2px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small class="text-info">Remaining @(500-description.Length) from 500 characters.</small>
                            </div>
                        </div>
                    }
                    @if (nftType == NFTTypes.CoruzantProfile)
                    {
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Text about person</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <TextArea Placeholder="Add Text About Person" MaxLength="8000" @bind-Value=@text Style="font-size:12px; min-width:250px; width:350px; max-width:350px; min-height:400px;" />
                            </div>
                            @if (!string.IsNullOrEmpty(text))
                            {
                                <div class="col d-flexjustify-content-center align-items-center" style="width: 350px; min-height:400px; max-width:350px;">
                                    <span class="border-light">@((MarkupString)NFTmarkuptext)</span>
                                </div>
                            }
                        </div>
                        @if (!string.IsNullOrEmpty(text))
                        {
                            <div class="row" style="margin-top:2px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <small class="text-info">Remaining @(8000-text.Length) from 8000 characters.</small>
                                </div>
                            </div>
                        }
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Company Name</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <Input Placeholder="Add Company Name" MaxLength="200" @bind-Value=@companyName Style="font-size:12px; min-width:250px; max-width:350px;" />
                            </div>
                        </div>
                        @if (string.IsNullOrEmpty(companyName))
                        {
                            <div class="row" style="margin-top:2px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <small class="text-danger">You must fill this field.</small>
                                </div>
                            </div>
                        }
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Company Link</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <Input Placeholder="Add Company Link" MaxLength="200" @bind-Value=@companyLink Style="font-size:12px; min-width:250px; max-width:350px;" />
                            </div>
                        </div>
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Working Position</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <Input Placeholder="Add Working Position" MaxLength="200" @bind-Value=@workingPosition Style="font-size:12px; min-width:250px; max-width:350px;" />
                            </div>
                        </div>
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Personal Page Link</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <Input Placeholder="Add Personal Page Link" MaxLength="200" @bind-Value=@personalPageLink Style="font-size:12px; min-width:250px; max-width:350px;" />
                            </div>
                        </div>
                        @if (string.IsNullOrEmpty(personalPageLink))
                        {
                            <div class="row" style="margin-top:2px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <small class="text-danger">You must fill this field.</small>
                                </div>
                            </div>
                        }
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Buzzsprout Podcast Id</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <Input Placeholder="Add Buzzsprout PodcastId" MaxLength="200" @bind-Value=@podcastId @onfocusout="podcastIdChanged" Style="font-size:12px; min-width:250px; max-width:350px;" />
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(podcastId))
                        {
                            <div class="row" style="margin-top:10px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <small>Preview of the podcast</small>
                                </div>
                            </div>
                            if (!string.IsNullOrEmpty(buzzsproudLink))
                            {
                                <div id="buzzsprout-player-@podcastId"></div>
                            }
                            else
                            {
                                <div class="row" style="margin-top:10px;">
                                    <div class="col d-flex justify-content-center align-items-center">
                                        <small>Loading podcast...</small>
                                    </div>
                                </div>
                            }
                        }
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Twitter</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small class="text-muted">Add just nickname from Twitter. Full link will be created by the application.</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <Input Placeholder="Add Twitter nickname" MaxLength="200" @bind-Value=@twitter Style="font-size:12px; min-width:250px; max-width:350px;" />
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(twitter))
                        {
                            <div class="row d-flex justify-content-center align-items-center">
                                <div class="col d-flex justify-content-center align-items-center" style="padding-right: 18px;padding-left: 0px;">
                                    <iframe src="https://platform.twitter.com/widgets/follow_button.html?screen_name=@twitter&amp;show_screen_name=true&amp;show_count=true" frameborder="0" scrolling="no" title="Follow fyziktom on Twitter" class="d-xxl-flex align-items-xxl-center" allowtransparency="true" width="250" height="30" style="margin-left: 0px;width: 100%;"></iframe>
                                </div>
                            </div>
                        }
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Linkedin</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small class="text-muted">Add just nickname from Linkedin. Full link will be created by the application.</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <Input Placeholder="Add Linkedin link name" MaxLength="200" @bind-Value=@linkedin Style="font-size:12px; min-width:250px; max-width:350px;" />
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(linkedin))
                        {
                            <div class="row d-flex justify-content-center align-items-center">
                                <div class="col-auto d-flex justify-content-center align-items-center" style="margin-top: 0px;width: 250px;max-width: 250px;">
                                    <a href="https://linkedin.com/in/@linkedin" target="_blank">
                                        <i class="icon-linkedin" style="font-size: 20px;"></i> Test Link Please
                                    </a>
                                </div>
                            </div>
                        }

                    }
                    @if (nftType == NFTTypes.CoruzantArticle)
                    {
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Text of the Article</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <TextArea Placeholder="Add Text of the NFT Article" MaxLength="8000" @bind-Value=@text Style="font-size:12px; min-width:250px; width:350px; max-width:350px; min-height:400px;" />
                            </div>
                            @if (!string.IsNullOrEmpty(text))
                            {
                                <div class="col d-flexjustify-content-center align-items-center" style="width: 350px; min-height:400px; max-width:350px;">
                                    <span class="border-light">@((MarkupString)NFTmarkuptext)</span>
                                </div>
                            }
                        </div>
                        @if (string.IsNullOrEmpty(text))
                        {
                            <div class="row" style="margin-top:2px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <small class="text-danger">You must fill this field.</small>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="row" style="margin-top:2px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <small class="text-info">Remaining @(8000-text.Length) from 8000 characters.</small>
                                </div>
                            </div>
                        }
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Full Post Link</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <Input Placeholder="Add full post link if exists" MaxLength="200" @bind-Value=@fullPostLink Style="font-size:12px; min-width:250px; max-width:350px;" />
                            </div>
                        </div>
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Podcast Link</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <Input Placeholder="Add podcast link if exists" MaxLength="200" @bind-Value=@podcastLink Style="font-size:12px; min-width:250px; max-width:350px;" />
                            </div>
                        </div>
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Coruzant Profile of Author</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <Input Placeholder="Add txid of NFT Coruzant Profile" MaxLength="200" @bind-Value=@authorProfileUtxo Style="font-size:12px; min-width:250px; max-width:350px;" />
                            </div>
                        </div>
                        @if (string.IsNullOrEmpty(authorProfileUtxo))
                        {
                            <div class="row" style="margin-top:2px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <small class="text-danger">You must fill this field.</small>
                                </div>
                            </div>
                        }
                    }
                    @if (newNFT.Description.Length >= 159)
                    {
                        <div class="row" style="margin-top:2px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Maximum length is 160 characters</small>
                            </div>
                        </div>
                    }

                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <small>Tags</small>
                        </div>
                    </div>
                    <div class="row" style="margin-top:5px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <Input Placeholder="Add Tags - splitted by space" MaxLength="200" @bind-Value=@tags Style="font-size:12px; min-width:250px; max-width:350px;" />
                        </div>
                    </div>

                    @if (nftType == NFTTypes.CoruzantProfile || nftType == NFTTypes.CoruzantArticle)
                    {
                        <div class="row" style="margin-top:2px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Uplod Podcast</small>
                            </div>
                        </div>
                        <VENFTApp_Blazor.Components.UploadImage NFTType="@NFTTypes.Music" ImageLink="@podcastLink" ImageLinkChanged="@PodcastLinkChanged" />
                    }

                    <div class="row" style="margin-top:2px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <small>Uplod Image</small>
                        </div>
                    </div>
                    <VENFTApp_Blazor.Components.UploadImage NFTType="@nftType" ImageLink="@imagelink" ImageLinkChanged="@ImageLinkChanged" />


                    <div class="row" style="margin-top:20px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <input type="checkbox" @onchange="eventArgs => { withPriceChanged(eventArgs.Value); }" /><span style="margin-left:10px;">With Price</span><br />
                        </div>
                        <div class="col d-flex justify-content-center align-items-center">
                            <input type="checkbox" @onchange="eventArgs => { withDogePriceChanged(eventArgs.Value); }" /><span style="margin-left:10px;">With Doge Price</span><br />
                        </div>
                        <div class="col d-flex justify-content-center align-items-center">
                            <input type="checkbox" @onchange="eventArgs => { withCoppiesChanged(eventArgs.Value); }" /><span style="margin-left:10px;">With Coppies</span><br />
                        </div>
                        <div class="col d-flex justify-content-center align-items-center">
                            <input type="checkbox" @onchange="eventArgs => { toAnotherAddressChanged(eventArgs.Value); }" /><span style="margin-left:10px;">Mint To Another Address</span><br />
                        </div>
                    </div>

                    @if (withPrice)
                    {
                        <div class="row" style="margin-top:20px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Price in Neblio</small>
                            </div>
                        </div>

                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <input type="number" step="0.0001" min="0.0005" max="1000000" @bind="@price" /> <img style="width: 25px;margin-left: 10px;" src="images/neblio-icon.png" />
                            </div>
                        </div>
                    }
                    @if (withDogePrice)
                    {
                        <div class="row" style="margin-top:20px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Price in Doge</small>
                            </div>
                        </div>

                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <input type="number" step="1" min="2" max="100000000" @bind="@dogeprice" /> <img style="width: 25px;margin-left: 10px;" src="images/doge.jpg" />
                            </div>
                        </div>
                    }
                    @if (withCoppies)
                    {
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Coppies</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <input type="number" step="1" min="0" max="20" @bind="@NumberOfCoppies" />
                            </div>
                        </div>
                    }
                    @if (toAnotherAddres)
                    {
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Fill Receiver Address</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <VENFTApp_Blazor.Components.Account.CreateNeblioSubAccount NewAddressCreated="newSubAccountCreated" />
                            </div>
                        </div>
                        <div class="row" style="margin-top:15px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <VENFTApp_Blazor.Components.Account.NeblioAddressInput AddressCheckedInputed="mintReceiverAddressChecked" Receiver="@mintReceiverAddress" />
                            </div>
                        </div>
                    }

                    <div class="row" style="margin-top:20px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <small class="text-center">Minting costs 0.0002 NEBL (fee) and @(NumberOfCoppies + 1) VENFT (carrier). The VENFT token will stay on your address as NFT. </small>
                        </div>
                    </div>

                    @if (string.IsNullOrEmpty(imagelink) && nftType == NFTTypes.CoruzantProfile)
                    {
                        <div class="row" style="margin-top:20px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <button class="btn btn-primary disabled" @onclick="ShowMintConfirm">Load image for NFT Profile</button>
                            </div>
                        </div>
                    }
                    else if (string.IsNullOrEmpty(text) && nftType == NFTTypes.CoruzantArticle)
                    {
                        <div class="row" style="margin-top:20px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <button class="btn btn-primary disabled" @onclick="ShowMintConfirm">Input Text for the NFT Article</button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row" style="margin-top:20px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <button class="btn btn-primary" @onclick="ShowMintConfirm">Create NFT</button>
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(multimintStatus))
                        {
                            <div class="row" style="margin-top:20px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <span>@multimintStatus</span>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </VENFTApp_Blazor.Components.Spin>

        <Modal Title="Mint New NFT"
               Visible="@confirmVisible"
               OnOk="@HandleOk"
               OnCancel="@HandleCancel">
            <p>"Do you realy want to mint this NFT?"</p>
        </Modal>

        <Modal Title="Mint To Another Address"
               Visible="@mintToAnotherAddressConfirmModalVisible"
               OnOk="@MintToAnotherAddressOk"
               OnCancel="@MintToAnotherAddressCancel">
            <p>"You selected another address as receiver of these NFTs. Is it correct?"</p>
        </Modal>

    </div>
</div>

@code {

    [Parameter]
    public bool RedirectToNFTsAfterMint { get; set; } = false;

    [Parameter]
    public bool SubAccount { get; set; } = false;

    [Parameter]
    public string Address { get; set; } = string.Empty;

    private NFTTypes nftType = NFTTypes.Image;
    [Parameter]
    public NFTTypes NFTType
    {
        get => nftType;
        set => nftType = value;
    }

    private INFT sourceNFT = new CoruzantProfileNFT("");
    [Parameter]
    public INFT NFT
    {
        get => sourceNFT;
        set
        {
            if (value != null && !string.IsNullOrEmpty(value.Utxo) && value.Utxo != newNFT.Utxo)
            {
                sourceNFT = value;
                newNFT.Fill(value);
                LoadData();
                StateHasChanged();
            }
        }
    }

    [Parameter]
    public EventCallback<string> NFTMinted { get; set; }

    public string NFTmarkuptext => Markdown.ToHtml(text);

    private bool uploadingImage = false;
    private bool processingMinting = false;
    private bool withPrice = false;
    private bool withDogePrice = false;
    private bool withCoppies = false;
    private bool toAnotherAddres = false;
    private bool mintToAnotherAddressConfirmModalVisible = false;
    private bool confirmVisible = false;

    private int NumberOfCoppies = 0;

    private double price = 0.0;
    private double dogeprice = 0.0;

    private string description = string.Empty;
    private string text = string.Empty;
    private string tags = string.Empty;
    private string name = string.Empty;
    private string surname = string.Empty;
    private string nickname = string.Empty;
    private string author = string.Empty;
    private string imagelink = string.Empty;
    private string link = string.Empty;
    private string fullPostLink = string.Empty;
    private string podcastLink = string.Empty;
    private string authorProfileUtxo = string.Empty;
    private string twitter = string.Empty;
    private string linkedin = string.Empty;
    private string age = string.Empty;
    private string workingPosition = string.Empty;
    private string personalPageLink = string.Empty;
    private string companyName = string.Empty;
    private string companyLink = string.Empty;
    private string podcastId = string.Empty;
    private string buzzsproudLink = string.Empty;

    private string multimintStatus = string.Empty;
    private string mintReceiverAddress = string.Empty;

    INFT newNFT = new CoruzantProfileNFT("");

    protected override async Task OnInitializedAsync()
    {
        if (AppData.Account != null)
        {
            if (!string.IsNullOrEmpty(AppData.Account.Profile.Nickname))
                nickname = AppData.Account.Profile.Nickname;
            if (!string.IsNullOrEmpty(AppData.Account.Profile.Name))
                author = AppData.Account.Profile.Name + " " + AppData.Account.Profile.Surname;
        }
        if (!string.IsNullOrEmpty(AppData.Account.Address))
        {
            AppData.Account.NewMintingProcessInfo -= multimintStateChangedHandler;
            AppData.Account.NewMintingProcessInfo += multimintStateChangedHandler;
        }
    }

    private void multimintStateChangedHandler(object sender, string e)
    {
        multimintStatus = e;
        StateHasChanged();
    }

    void ImageLinkChanged(string newLink)
    {
        imagelink = newLink;
    }

    void LinkChanged(string newLink)
    {
        link = newLink;
    }

    void PodcastLinkChanged(string newLink)
    {
        if (nftType == NFTTypes.CoruzantProfile || nftType == NFTTypes.CoruzantArticle)
            podcastLink = newLink;
    }

    private void newSubAccountCreated(string address)
    {
        if (!string.IsNullOrEmpty(address))
        {
            mintReceiverAddress = address;
        }
        StateHasChanged();
    }
    private void mintReceiverAddressChecked(string address)
    {
        if (!string.IsNullOrEmpty(address))
        {
            mintReceiverAddress = address;
        }
        StateHasChanged();
    }
    private async Task toAnotherAddressChanged(object e)
    {
        toAnotherAddres = (bool)e;
        StateHasChanged();
    }

    private async Task withPriceChanged(object e)
    {
        withPrice = (bool)e;
        if (withPrice)
            price = 0.0005;
        else
            price = 0;
        StateHasChanged();
    }
    private async Task withDogePriceChanged(object e)
    {
        withDogePrice = (bool)e;
        if (withDogePrice)
            dogeprice = 2;
        else
            dogeprice = 0;
        StateHasChanged();
    }
    private async Task withCoppiesChanged(object e)
    {
        withCoppies = (bool)e;
        StateHasChanged();
    }

    private void podcastIdChanged(EventArgs e)
    {
        LoadBuzzproudPodcastLink();
    }


    void ShowMintConfirm()
    {
        if (!string.IsNullOrEmpty(mintReceiverAddress))
            mintToAnotherAddressConfirmModalVisible = true;
        else
            confirmVisible = true;
    }

    private async Task HandleOk(MouseEventArgs e)
    {
        await MintNewNFT();
    }
    private void HandleCancel(MouseEventArgs e)
    {
        confirmVisible = false;
    }

    private async Task MintToAnotherAddressOk(MouseEventArgs e)
    {
        mintToAnotherAddressConfirmModalVisible = false;
        confirmVisible = true;
    }
    private void MintToAnotherAddressCancel(MouseEventArgs e)
    {
        mintToAnotherAddressConfirmModalVisible = false;
    }

    private async Task LoadData()
    {
        if (newNFT != null)
        {
            description = newNFT.Description;
            text = newNFT.Text;
            tags = newNFT.Tags;
            name = newNFT.Name;
            author = newNFT.Author;
            imagelink = newNFT.ImageLink;
            link = newNFT.Link;

            switch (newNFT.Type)
            {
                case NFTTypes.CoruzantArticle:
                    podcastLink = (newNFT as CoruzantArticleNFT).PodcastLink;
                    authorProfileUtxo = (newNFT as CoruzantArticleNFT).AuthorProfileUtxo;
                    break;
                case NFTTypes.CoruzantProfile:
                    podcastLink = (newNFT as CoruzantProfileNFT).PodcastLink;
                    surname = (newNFT as CoruzantProfileNFT).Surname;
                    nickname = (newNFT as CoruzantProfileNFT).Nickname;
                    workingPosition = (newNFT as CoruzantProfileNFT).WorkingPosition;
                    companyLink = (newNFT as CoruzantProfileNFT).CompanyLink;
                    companyName = (newNFT as CoruzantProfileNFT).CompanyName;
                    age = (newNFT as CoruzantProfileNFT).Age.ToString();
                    personalPageLink = (newNFT as CoruzantProfileNFT).PersonalPageLink;
                    linkedin = (newNFT as CoruzantProfileNFT).Linkedin;
                    twitter = (newNFT as CoruzantProfileNFT).Twitter;
                    podcastId = (newNFT as CoruzantProfileNFT).PodcastId;
                    break;
            }
        }
    }

    private async Task MintNewNFT()
    {
        try
        {
            processingMinting = true;
            confirmVisible = false;
            StateHasChanged();

            newNFT.Type = nftType;

            switch (nftType)
            {
                case NFTTypes.Music:
                    var nft = await NFTFactory.CloneNFT(newNFT, true, NFTTypes.Music);
                    newNFT = nft; // hotfix
                    break;
                case NFTTypes.Post:
                    //
                    break;
                case NFTTypes.CoruzantArticle:
                    newNFT = new CoruzantArticleNFT("")
                    {
                        FullPostLink = fullPostLink,
                        PodcastLink = podcastLink,
                        AuthorProfileUtxo = authorProfileUtxo
                    };
                    break;
                case NFTTypes.CoruzantProfile:
                    newNFT = new CoruzantProfileNFT("")
                    {
                        Surname = surname,
                        Nickname = nickname,
                        CompanyLink = companyLink,
                        CompanyName = companyName,
                        WorkingPosition = workingPosition,
                        Twitter = twitter,
                        Linkedin = linkedin,
                        PodcastLink = podcastLink,
                        PersonalPageLink = personalPageLink,
                        PodcastId = podcastId
                    };
                    break;
            }

            newNFT.TokenId = CoruzantNFTHelpers.CoruzantTokenId;

            if (!withPrice)
                newNFT.Price = 0.0;

            if (name != null)
                newNFT.Name = name;
            if (tags != null)
                newNFT.Tags = tags;
            if (author != null)
                newNFT.Author = author;
            if (description != null)
                newNFT.Description = description;
            if (text != null)
                newNFT.Text = text;
            if (link != null)
                newNFT.Link = link;
            if (imagelink != null)
                newNFT.ImageLink = imagelink;

            newNFT.Price = price;
            if (price > 0)
                newNFT.PriceActive = true;
            newNFT.DogePrice = dogeprice;
            if (dogeprice > 0)
                newNFT.DogePriceActive = true;

            if (!string.IsNullOrEmpty(sourceNFT.Utxo))
            {
                newNFT.Utxo = sourceNFT.Utxo;
                newNFT.UtxoIndex = sourceNFT.UtxoIndex;
                newNFT.NFTOriginTxId = sourceNFT.NFTOriginTxId;
            }

            if (!string.IsNullOrEmpty(AppData.DogeAccount.Address))
                newNFT.DogeAddress = AppData.DogeAccount.Address;

            (bool, string) res;
            if (!string.IsNullOrEmpty(newNFT.Utxo))
            {
                if (!SubAccount)
                    res = await AppData.Account.ChangeNFT(newNFT);
                else
                    res = await AppData.Account.ChangeNFTOnSubAccount(Address, newNFT);
            }
            else if (string.IsNullOrEmpty(newNFT.Utxo) && NumberOfCoppies > 0)
            {
                var rs = (false, new Dictionary<string, string>());
                if (!SubAccount)
                    res = await AppData.Account.MintMultiNFT(newNFT, NumberOfCoppies);
                else
                    rs = await AppData.Account.MultimintNFTLargeOnSubAccount(Address, newNFT, NumberOfCoppies);
                res = (rs.Item1, Newtonsoft.Json.JsonConvert.SerializeObject(rs.Item2));
            }
            else
            {
                if (!SubAccount)
                    res = await AppData.Account.MintNFT(newNFT);
                else
                    res = await AppData.Account.MintNFTOnSubAccount(Address, newNFT);
            }

            if (res.Item1)
            {
                await NFTMinted.InvokeAsync(res.Item2);

                if (RedirectToNFTsAfterMint)
                {
                    processingMinting = false;
                    StateHasChanged();
                    await Task.Delay(500);
                    NavManager.NavigateTo("/nfts");
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alertMessage", "Some error during minting: " + res.Item2);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            processingMinting = false;
            StateHasChanged();
        }
    }

    private async Task LoadBuzzproudPodcastLink()
    {
        try
        {
            if (nftType == NFTTypes.CoruzantProfile && !string.IsNullOrEmpty(podcastId))
            {
                var filename = string.Empty;
                var req = new HttpRequestMessage(HttpMethod.Get, $"https://nftticketverifierapp.azurewebsites.net/api/GetBuzzsproutData/866092/{podcastId}");
                req.Headers.Add("Accept", "application/json");
                req.Headers.Add("User-Agent", "VENFT-App");

                var resp = await _client.SendAsync(req);
                var respmsg = await resp.Content.ReadAsStringAsync();
                if (string.IsNullOrEmpty(respmsg))
                    return;
                var podcastData = JsonConvert.DeserializeObject<List<BuzzsproutEpisodeDto>>(respmsg);
                if (podcastData != null && podcastData.Count > 0)
                {
                    var pddto = podcastData.FirstOrDefault();
                    if (!string.IsNullOrEmpty(pddto.audio_url))
                    {
                        filename = pddto.audio_url.Replace("https://www.buzzsprout.com/866092/", string.Empty).Replace(".mp3", string.Empty);
                        var link = $"https://www.buzzsprout.com/866092/{filename}.js?container_id=buzzsprout-player-{podcastId}&player=small";
                        buzzsproudLink = link;
                        StateHasChanged();
                        await Task.Delay(200);
                        await JSRuntime.InvokeVoidAsync("jsFunctions.buzzsproutPodcast", buzzsproudLink);
                        await Task.Delay(200);
                        await JSRuntime.InvokeVoidAsync("setCoruzantPodcastInfo", name + " " + surname, pddto.artist, pddto.title);
                        StateHasChanged();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Cannot load Buzzsprout podcast." + ex.Message);
        }
    }
}
