@using VEDriversLite
@using VEDriversLite.UnstoppableDomains

<div class="row">
    <div class="col d-flex justify-content-center align-items-center">
        <Input Placeholder="Add receiver address" @bind-Value=@receiver @onfocusout="receiverAddressChangedHandler" Style="font-size:12px; min-width:300px;max-width:350px;" />
        <!--<VENFTApp_Blazor.Components.LoadQRData MarginLeft="10" ReadedTextChanged="QRTextReaded" />-->
        @if (unstoppableDomainAddressUsed)
        {
            <img style="width:16px; margin-left: 10px;" src="images/unstoppableDomainsLogo.png" />
        }
        @if (validAddress)
        {
            <i class="oi oi-check text-success" style="font-size:12px; margin-left:10px;"></i>
        }
        else
        {
            <i class="oi oi-x text-danger" style="font-size:12px; margin-left:10px;"></i>
        }
    </div>
</div>

@code {

    private string receiver = string.Empty;
    [Parameter]
    public string Receiver
    {
        get => receiver;
        set
        {
            if (!string.IsNullOrEmpty(value) && receiver != value)
            {
                receiver = value;
                checkAddress(receiver);
            }
        }
    }

    [Parameter]
    public EventCallback<string> AddressCheckedInputed { get; set; }

    private bool validAddress = false;
    private bool unstoppableDomainAddressUsed = false;
    private string unstoppableDomainAddress = string.Empty;

    private void receiverAddressChangedHandler(EventArgs e)
    {
        if (!string.IsNullOrEmpty(receiver))
        {
            if (receiver.Length < 8)
                return;

            var rec = receiver;
            checkAddress(rec);
            StateHasChanged();
        }
        else
        {
            receiver = string.Empty;
        }
    }
    private async Task checkAddress(string address)
    {
        if (string.IsNullOrEmpty(address))
            return;

        var add = string.Empty;
        if (address.Contains(".crypto") || address.Contains(".coin") || address.Contains(".wallet") || address.Contains(".nft") || address.Contains(".bitcoin"))
        {
            add = await UnstoppableDomainsHelpers.GetDOGEAddress(address);
            if (!string.IsNullOrEmpty(add))
            {
                unstoppableDomainAddressUsed = true;
                unstoppableDomainAddress = add;
            }
            else
            {
                unstoppableDomainAddressUsed = false;
                unstoppableDomainAddress = string.Empty;
            }
        }
        else
        {
            add = address;
            unstoppableDomainAddress = string.Empty;
            unstoppableDomainAddressUsed = false;
        }
        VEDriversLite.CommonReturnTypeDto res = DogeTransactionHelpers.ValidateDogeAddress(add);
        if (res.Success)
        {
            validAddress = true;
            Receiver = res.Value.ToString();
            await AddressCheckedInputed.InvokeAsync(receiver);
        }
        else
        {
            validAddress = false;
            await AddressCheckedInputed.InvokeAsync(string.Empty);
        }
        StateHasChanged();
    }
}
