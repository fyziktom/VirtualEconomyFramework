@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.Extensions.WooCommerce
@using VEDriversLite.Extensions.WooCommerce.Dto
@using Newtonsoft.Json
@inject AppData AppData
@inject NavigationManager NavManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JSRuntime

<div class="row">
    <div class="col">
        <VENFTApp_Blazor.Components.Spin Spinning="@processingSending" Tip="Sending...">
            <div class="row">
                <div class="col">

                    @if (initialized)
                    {
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Get Product</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <Input Placeholder="Fill product Id" MaxLength="200" @bind-Value=@productId Style="font-size:12px; min-width:250px; max-width:250px;" />
                            </div>
                        </div>
                        @if (product != null && !string.IsNullOrEmpty(product.name))
                        {
                            <div class="row" style="margin-top:10px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <small>New product Id: @product.id</small>
                                </div>
                            </div>
                            <div class="row" style="margin-top:10px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <small>Product Data</small>
                                </div>
                            </div>
                            <div class="row" style="margin-top:10px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <textarea style="min-width:200px; min-height:100px;">@JsonConvert.SerializeObject(product, Formatting.Indented)</textarea>
                                </div>
                            </div>
                        }
                    }
                    }
                </div>
            </div>
        </VENFTApp_Blazor.Components.Spin>

        <Modal Title="Add product to WooCommerce Shop"
               Visible="@confirmVisible"
               OnOk="@HandleOk"
               OnCancel="@HandleCancel">
            <p>Do you really want to upload this product to your store?</p>
        </Modal>

        <Modal Title="NFT Details"
               Visible="@showNFTDetailsVisible"
               OnOk="@showNFTDetailsCancel"
               OnCancel="@showNFTDetailsCancel">
            <div class="row" style="margin-top:10px;">
                <div class="col d-flex justify-content-center align-items-center">
                    @if (loadedNFT != null)
                    {
                        @if (loadedNFT.Type == NFTTypes.CoruzantArticle || loadedNFT.Type == NFTTypes.CoruzantProfile)
                        {
                            <VENFTApp_Blazor.Components.Coruzant.CoruzantNFT InputNFT="@loadedNFT"
                                         OwnNFT="@true"
                                         Address="@AppData.Account.Address"
                                         SubAccount="@false" />
                        }
                        else
                        {
                            <VENFTApp_Blazor.Components.NFTs.NFT InputNFT="@loadedNFT"
                                 OwnNFT="@true"
                                 Address="@AppData.Account.Address"
                                 SubAccount="@false" />
                        }
                    }
                </div>
            </div>
        </Modal>
    </div>
</div>

@code {

    [Parameter]
    public EventCallback<string> WooCommerceAPIConnected { get; set; }

    INFT loadedNFT = new ImageNFT("");
    [Parameter]
    public INFT NFT
    {
        get => loadedNFT;
        set => loadedNFT = value;
    }

    public List<Category> ShopCategories
    {
        get
        {
            if (WooCommerceHelpers.IsInitialized && WooCommerceHelpers.Shop != null)
            {
                if (WooCommerceHelpers.Shop.Categories != null)
                    return WooCommerceHelpers.Shop.Categories.Values.ToList();
            }
            return new List<Category>();
        }
    }

    private bool confirmVisible = false;
    private bool processingSending = false;
    private bool initialized = false;
    private bool showNFTDetailsVisible = false;

    private string apiurl = string.Empty;
    private string apikey = string.Empty;
    private string apisecret = string.Empty;
    private string jwt = string.Empty;
    private string txid = string.Empty;
    private string productId = string.Empty;

    Product product = new Product();

    public List<Category> newProductCategories = new List<Category>();

    protected override Task OnInitializedAsync()
    {
        init();
        return base.OnInitializedAsync();
    }

    private async Task init()
    {
        if (!WooCommerceHelpers.IsInitialized)
        {
            apiurl = await localStorage.GetItemAsync<string>("woocom-apiurl");
            if (apiurl == null) apiurl = string.Empty;
            apikey = await localStorage.GetItemAsync<string>("woocom-apikey");
            if (apikey == null) apikey = string.Empty;
            apisecret = await localStorage.GetItemAsync<string>("woocom-apisecret");
            if (apisecret == null) apisecret = string.Empty;
            jwt = await localStorage.GetItemAsync<string>("woocom-apisecret");
            if (jwt == null) jwt = string.Empty;
            await WooCommerceHelpers.InitStoreApiConnection(apiurl, apikey, apisecret, jwt);
        }
        StateHasChanged();
    }

    void ShowConfirm()
    {
        confirmVisible = true;
    }

    private async Task HandleOk(MouseEventArgs e)
    {
        await AddProduct();
    }

    private void HandleCancel(MouseEventArgs e)
    {
        confirmVisible = false;
    }

    private async Task showNFTDetails(MouseEventArgs e)
    {
        showNFTDetailsVisible = true;
    }
    private async Task showNFTDetailsCancel(MouseEventArgs e)
    {
        showNFTDetailsVisible = false;
    }

    private async Task AddProduct()
    {
        try
        {
            var nft = await NFTFactory.GetNFT("", txid, 0, 0, true);
            if (nft == null)
                return;

            processingSending = true;
            confirmVisible = false;
            StateHasChanged();
            newProductCategories = ShopCategories;
            var prd = await WooCommerceHelpers.AddNewProduct(nft, newProductCategories);

            if (prd == null)
                await JSRuntime.InvokeVoidAsync("alertMessage", "Some error during try to connect.");
            product = prd;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            processingSending = false;
            StateHasChanged();
        }
    }
}
