@using VEDriversLite
@using VEDriversLite.Dto
@using VEDriversLite.NFT
@using VEDriversLite.NeblioAPI
@inject AppData AppData

<div class="row d-flex justify-content-center align-items-center">
    <div class="col">
        <VENFTApp_Blazor.Components.Spin Tip="Loading..." Spinning="@txDetailsLoading">
            <div class="row d-flex justify-content-center align-items-center">
                <div class="col">
                    <div class="row">
                        <div class="col d-flex justify-content-center align-items-center">
                            <span>Tx Id</span>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col d-flex justify-content-center align-items-center">
                            <a href="https://explorer.nebl.io/tx/@txInDetails.Txid" target="_blank">To Neblio Explorer</a>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col d-flex justify-content-center align-items-center">
                            <span>@fromAddress</span>
                        </div>
                    </div>
                    @if (receivedFromAnotherAddress)
                    {
                        <div class="row">
                            <div class="col d-flex justify-content-center align-items-center">
                                <span>Received from Another Address</span>
                            </div>
                        </div>
                    }
                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <span>Total Send: @txInDetails.Totalsent NEBL <img style="width: 12px;margin-left: 5px; margin-bottom:3px;" src="images/neblio-icon.png" /></span>
                        </div>
                    </div>
                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <span>Time: @txInDetailsTime.ToString()</span>
                        </div>
                    </div>
                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <span>Confirmations: @txInDetails.Confirmations.ToString()</span>
                        </div>
                    </div>
                    @if (NFTTransaction)
                    {
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <span>This is NFT Transaction!</span>
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(loadedNFT.Utxo))
                        {
                            <div class="row" style="margin-top:10px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <button class="btn btn-primary" @onclick="showNFTDetails">Show NFT Details</button>
                                </div>
                            </div>
                        }
                    }
                    @if (txInDetails.Confirmations > 0)
                    {
                        @if (txInDetails.Vin != null)
                        {
                            <div class="row" style="margin-top:10px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <span>Inputs</span>
                                </div>
                            </div>
                            <hr />
                            <div class="row d-flex justify-content-center align-items-center border-primary" style="margin-top:10px;">
                                <div class="col">
                                    @foreach (var i in txInDetails.Vin)
                                    {
                                        @if (i.ValueSat != 10000)
                                        {
                                            <div class="row" style="margin-top:10px;">
                                                <div class="col d-flex justify-content-center align-items-center">
                                                    <small>Value: @((double)i.ValueSat / NeblioTransactionHelpers.FromSatToMainRatio) NEBL</small> <img style="width: 14px;margin-left: 5px; margin-bottom:3px;" src="images/neblio-icon.png" />
                                                </div>
                                            </div>
                                        }
                                        @if (i.Tokens.Count > 0)
                                        {
                                            @foreach (var tok in i.Tokens)
                                            {
                                                <div class="row" style="margin-top:10px;">
                                                    <div class="col d-flex justify-content-center align-items-center">
                                                        <small>Tokens: @tok.Amount @tokenInfo.TokenSymbol </small> <img style="width: 14px;margin-left: 5px; margin-bottom:3px;" src="@tokenInfo.ImageUrl" />
                                                    </div>
                                                </div>
                                            }
                                        }
                                        <div class="row" style="margin-top:10px;">
                                            <div class="col d-flex justify-content-center align-items-center">
                                                <small>From: @getInputAddress(i) </small>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="row" style="margin-top:10px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <span>Outputs</span>
                                </div>
                            </div>
                            <hr />
                            <div class="row d-flex justify-content-center align-items-center border-success" style="margin-top:10px;">
                                <div class="col">
                                    @foreach (var o in txInDetails.Vout)
                                    {
                                        @if (o.Value != 10000)
                                        {
                                            <div class="row" style="margin-top:0px;">
                                                <div class="col d-flex justify-content-center align-items-center">
                                                    <small>Value: @((double)o.Value / NeblioTransactionHelpers.FromSatToMainRatio) NEBL</small> <img style="width: 14px;margin-left: 5px; margin-bottom:3px;" src="images/neblio-icon.png" />
                                                </div>
                                            </div>
                                        }
                                        @if (o.Tokens.Count > 0)
                                        {
                                            @foreach (var tok in o.Tokens)
                                            {
                                                <div class="row" style="margin-top:10px;">
                                                    <div class="col d-flex justify-content-center align-items-center">
                                                        <small>Tokens: @tok.Amount @tokenInfo.TokenSymbol </small> <img style="width: 14px;margin-left: 5px; margin-bottom:3px;" src="@tokenInfo.ImageUrl" />
                                                    </div>
                                                </div>
                                            }
                                        }
                                        @if (!string.IsNullOrEmpty(getOutputAddress(o)))
                                        {
                                            <div class="row" style="margin-top:5px;">
                                                <div class="col d-flex justify-content-center align-items-center">
                                                    <small> To: @getOutputAddress(o) </small>
                                                </div>
                                            </div>
                                        }
                                    }
                                </div>
                            </div>

                        }
                    }
                </div>
            </div>
        </VENFTApp_Blazor.Components.Spin>
    </div>
</div>

<Modal Title="NFT Details"
       Visible="@showNFTDetailsVisible"
       OnCancel="@showNFTDetailsCancel"
       Footer="null">
    <div class="row" style="margin-top:10px;">
        <div class="col d-flex justify-content-center align-items-center">
            @if (nftType == NFTTypes.CoruzantArticle || nftType == NFTTypes.CoruzantProfile)
            {
                <VENFTApp_Blazor.Components.Coruzant.CoruzantNFT InputNFT="@loadedNFT"
                             OwnNFT="@false"
                             Address="@Address"
                             SubAccount="@SubAccount" />
            }
            else if (nftType == NFTTypes.Message)
            {
                <VENFTApp_Blazor.Components.NFTs.Messages.NFTMessage Utxo="@loadedNFT.Utxo" 
                                                                     InputNFT="@loadedNFT" 
                                                                     OwnNFT="false" 
                                                                     Address="@Address" 
                                                                     IsHistory="true" />
            }
            else if (nftType == NFTTypes.Payment || nftType == NFTTypes.Receipt)
            {
                <div class="row">
                    <div class="col">
                        <span>NFT Receipt or Payment</span>
                    </div>
                </div>
            }
            else
            {
                <VENFTApp_Blazor.Components.NFTs.NFT InputNFT="@loadedNFT"
                     OwnNFT="@false"
                     Address="@Address"
                     SubAccount="@SubAccount" />
            }
        </div>
    </div>
</Modal>

@code {

    [Parameter]
    public bool SubAccount { get; set; } = false;

    [Parameter]
    public string Address { get; set; } = string.Empty;

    private string txId = string.Empty;
    [Parameter]
    public string TxId
    {
        get => txId;
        set
        {
            if (!string.IsNullOrEmpty(value) && txId != value)
            {
                lasttxid = txId;
                txId = value;
                StartRefreshing(true);
            }
        }
    }

    private bool NFTTransaction = false;
    private bool txDetailsLoading = false;
    private bool showNFTDetailsVisible = false;
    private bool receivedFromAnotherAddress = false;

    private string nftTxId = string.Empty;
    private string fromAddress = string.Empty;
    private string lasttxid = string.Empty;

    private DateTime txInDetailsTime = DateTime.MinValue;
    private System.Threading.Timer txdetailsTimer;

    private GetTransactionInfoResponse txInDetails = new GetTransactionInfoResponse();
    private Dictionary<string, string> txInDetailsMetadata = new Dictionary<string, string>();

    private INFT loadedNFT = new ImageNFT("");
    private NFTTypes nftType = NFTTypes.Image;

    private TokenSupplyDto tokenInfo = new TokenSupplyDto();

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    private string getOutputAddress(Vout i)
    {
        try
        {
            var add = i.ScriptPubKey.Addresses?.ToArray()?[0];
            if (!string.IsNullOrEmpty(add))
            {
                if (add == AppData.Account.Address)
                    return "Main Account";
                if (AppData.Account.SubAccounts.TryGetValue(add, out var sacc))
                {
                    if (!string.IsNullOrEmpty(sacc.Name))
                        return sacc.Name;
                    else
                        return sacc.BookmarkFromAccount.Name;
                }
                return add;
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine("Cannot load the Output Address from Vout. " + ex.Message);
        }
        return string.Empty;
    }

    private string getInputAddress(Vin i)
    {
        try {
            var add = i.PreviousOutput.Addresses?.ToArray()?[0];
            if (!string.IsNullOrEmpty(add))
            {
                if (add == AppData.Account.Address)
                    return "Main Account";
                if (AppData.Account.SubAccounts.TryGetValue(add, out var sacc))
                {
                    if (!string.IsNullOrEmpty(sacc.Name))
                        return sacc.Name;
                    else
                        return sacc.BookmarkFromAccount.Name;
                }
                return add;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Cannot load the Input Address from Vin. " + ex.Message);
        }
        return string.Empty;
    }

    private async Task showNFTDetails(MouseEventArgs e)
    {
        if (loadedNFT.Type == NFTTypes.Message)
        {
            try
            {
                if (Address == AppData.Account.Address)
                {
                    await (loadedNFT as MessageNFT).Decrypt(AppData.Account.Secret);
                }
                else if (SubAccount && AppData.Account.SubAccounts.TryGetValue(Address, out var sa))
                {
                    await (loadedNFT as MessageNFT).Decrypt(sa.Secret);
                }
            }
            catch(Exception ex)
            {
                Console.WriteLine($"Cannot decrypt the NFT Message: {loadedNFT.Utxo}." + ex.Message);
            }
        }
        StateHasChanged();
        showNFTDetailsVisible = true;
    }
    private async Task showNFTDetailsCancel(MouseEventArgs e)
    {
        showNFTDetailsVisible = false;
    }

    async Task StartRefreshing(bool newTx = false)
    {
        await Load(newTx);
        if (txInDetails.Confirmations < (NeblioTransactionHelpers.MinimumConfirmations + 2))
        {
            if (txdetailsTimer != null)
                await txdetailsTimer.DisposeAsync();

            txdetailsTimer = new System.Threading.Timer(async (object stateInfo) =>
            {
                if (!string.IsNullOrEmpty(txId))
                {
                    try
                    {
                        await Load();
                        if (txInDetails.Confirmations > (NeblioTransactionHelpers.MinimumConfirmations + 2))
                            await txdetailsTimer.DisposeAsync();

                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine("Cannot read tx details. " + ex.Message);
                    }
                }

            }, new System.Threading.AutoResetEvent(false), 10000, 10000);
        }
    }

    async Task Load(bool newTx = false)
    {
        try
        {
            if (newTx)
            {
                txInDetails = new GetTransactionInfoResponse();
                txInDetails.Totalsent = 0.0;
                txInDetails.Confirmations = 0;
                txInDetailsTime = DateTime.MinValue;
            }
            string nftTxId = string.Empty;
            string fromAddress = string.Empty;

            if (string.IsNullOrEmpty(txId))
                return;

            txDetailsLoading = true;
            StateHasChanged();

            var txinfo = await NeblioTransactionHelpers.GetTransactionInfo(txId);

            if (newTx)
            {
                var outs = txinfo.Vout.ToList();
                var toks = false;
                var tokid = NFTHelpers.TokenId;
                foreach (var o in outs)
                {
                    if (o.Tokens.Count > 0)
                    {
                        toks = true;
                        tokid = o.Tokens.ToArray()[0]?.TokenId;
                        tokenInfo = await NeblioTransactionHelpers.GetTokenInfo(tokid);
                    }
                }

                try
                {
                    var vins = txinfo.Vin.ToList();
                    if (vins != null)
                    {
                        if (vins.Count > 0)
                        {
                            fromAddress = vins[0].PreviousOutput.Addresses.FirstOrDefault();
                            if (fromAddress == null)
                                fromAddress = string.Empty;

                            if (fromAddress != AppData.Account.Address)
                                receivedFromAnotherAddress = true;
                            else
                                receivedFromAnotherAddress = false;
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Error during geting the address. " + ex.Message);
                    txDetailsLoading = false;
                }

                if (toks)
                {
                    try
                    {
                        var meta = await NeblioTransactionHelpers.GetTransactionMetadata(tokid, txId);

                        if (meta != null)
                        {
                            txInDetailsMetadata = meta;
                            if (meta.TryGetValue("NFT", out var nft))
                            {
                                if (nft == "true")
                                    NFTTransaction = true;
                                else
                                    NFTTransaction = false;

                                if (NFTTransaction && loadedNFT.Utxo != txId)
                                    loadedNFT = await NFTFactory.GetNFT(tokid, txId, 0, 0, true, txinfo: txinfo);
                                if (loadedNFT == null || !NFTTransaction)
                                    loadedNFT = new ImageNFT("");
                                nftType = loadedNFT.Type;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        txDetailsLoading = false;
                        //todo
                    }
                }
            }

            if (txinfo != null)
            {
                txInDetails = txinfo;
                txInDetailsTime = TimeHelpers.UnixTimestampToDateTime((double)txinfo.Time);
                txInDetails.Totalsent = NeblioTransactionHelpers.GetSendAmount(txinfo, AppData.Account.Address);
                txDetailsLoading = false;
                StateHasChanged();

                lasttxid = txId;
            }
        }
        catch(Exception ex)
        {
            txDetailsLoading = false;
            Console.WriteLine("Error during loading tx details. " + ex.Message);
            StateHasChanged();
        }
    }
}
