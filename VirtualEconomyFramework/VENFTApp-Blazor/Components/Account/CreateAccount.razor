@using VEDriversLite
@using VEDriversLite.NeblioAPI
@using VEDriversLite.Security
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AppData AppData
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

<Modal Title="Please Create Account"
       Visible="@createNewAddressModalVisible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
    <div class="row">
        <div class="col">
            <Spin spinning="@creatingAddressSpinner" tip="Creating Address...">
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <h6>Welcome in VENFT App</h6>
                    </div>
                </div>

                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center" style="margin-top:10px;">
                        <span class="text-center" style="width:90%;max-width:200px;">If you do not know this project please read <a href="https://about.ve-nft.com/" target="_blank">about it here</a></span>
                    </div>
                </div>

                <VENFTApp_Blazor.Components.HelperButtons.HelpButton PageSection="newaddress" />
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex justify-content-center align-items-center">
                        <h4>Start With One Simple Step</h4>
                    </div>
                </div>
                <div class="row" style="margin-top:20px;">
                    <div class="col d-flex justify-content-center align-items-center">
                        <span>Create an account with type your new password (8 chars minimum)</span>
                    </div>
                </div>
                <div class="row" style="margin-top:20px;">
                    <div class="col d-flex justify-content-center align-items-center">
                        <span>Input Password:</span>
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <InputPassword Placeholder="Input password" @bind-Value="@password" style="font-size:12px; min-width:150px; max-width:250px;" />
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <span>Confirm Password:</span>
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <InputPassword Placeholder="Input password" @bind-Value="@passwordConfirm" style="font-size:12px; min-width:150px; max-width:250px;" />
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <span>Please Fill Password longer than 8 characters</span>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex justify-content-center align-items-center">
                        <button class="btn btn-primary" @onclick="HandleOk">Create Account</button>
                    </div>
                </div>
                <hr />
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex justify-content-center align-items-center">
                        <span>Optional - If you have Neblio or Dogecoin private key you can import it</span>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex justify-content-center align-items-center">
                        <button class="btn btn-secondary" @onclick="showImportAccount">Import Existing Account</button>
                    </div>
                </div>

                <div class="row" style="margin-top:15px;">
                    <div class="col d-flex justify-content-center align-items-center">

                        @if (!string.IsNullOrEmpty(password))
                        {
                            if (password.Length > 4)
                            {
                                if (!string.IsNullOrEmpty(passwordConfirm))
                                {
                                    if (passwordConfirm != password)
                                    {
                                        <VENFTApp_Blazor.Components.Alert Type="VENFTApp_Blazor.Components.AlertType.Warning">
                                            <Message>Passwords not match!</Message>
                                        </VENFTApp_Blazor.Components.Alert>
                                    }
                                    else
                                    {
                                        <VENFTApp_Blazor.Components.Alert Type="VENFTApp_Blazor.Components.AlertType.Warning">
                                            <Message>Passwords Match. Please confirm to create an account!</Message>
                                        </VENFTApp_Blazor.Components.Alert>
                                    }
                                }
                            }
                        }

                        @if (mustCreateAddressMessage)
                        {
                            <VENFTApp_Blazor.Components.Alert Type="VENFTApp_Blazor.Components.AlertType.Error">
                                <Message>You must create new account for continue. There is no account saved in your local browser memory.</Message>
                            </VENFTApp_Blazor.Components.Alert>
                        }
                    </div>
                </div>
            </Spin>
        </div>
    </div>
</Modal>

<VENFTApp_Blazor.Components.Account.ImportAccount Visible="@importAccountVisible" AccountImported="AccountImported" />


@if (accountCreatedError)
{
    <VENFTApp_Blazor.Components.Alert Type="VENFTApp_Blazor.Components.AlertType.Error" Style="margin-top:15px;">
        <Message>@errorMessage</Message>
    </VENFTApp_Blazor.Components.Alert>
}

@code {

    [Parameter]
    public bool Visible
    {
        get => createNewAddressModalVisible;
        set => createNewAddressModalVisible = value;
    }

    [Parameter]
    public EventCallback<string> AccountCreated { get; set; }

    private string key = string.Empty;
    private string address = string.Empty;

    private bool accountCreatedError = false;
    private string errorMessage = string.Empty;

    private string password = string.Empty;
    private string passwordConfirm = string.Empty;
    private bool passwordsMatch = false;

    private bool mustCreateAddressMessage = false;
    private bool creatingAddressSpinner = false;

    private bool createNewAddressModalVisible = false;
    private bool importAccountVisible = false;

    private enum PasswordCheckStates
    {
        None,
        ShortPassword,
        PasswordsNotMatch,
        PasswordMatch
    };

    private PasswordCheckStates passState = PasswordCheckStates.ShortPassword;

    private async Task showImportAccount(MouseEventArgs e)
    {
        importAccountVisible = true;
    }

    private async Task CheckPassState()
    {
        if (string.IsNullOrEmpty(password))
            return;

        if (password.Length > 4)
        {
            if (password.Length < 8)
            {
                passState = PasswordCheckStates.ShortPassword;
            }
            else
            {
                if (!string.IsNullOrEmpty(passwordConfirm))
                {
                    if (passwordConfirm.Length >= 8 && passwordConfirm == password)
                        passState = PasswordCheckStates.PasswordMatch;
                }
                else
                {
                    if (passState != PasswordCheckStates.PasswordsNotMatch)
                        passState = PasswordCheckStates.PasswordsNotMatch;
                }
            }
        }
        else
        {
            passState = PasswordCheckStates.ShortPassword;
        }
    }

    private async Task HandleOk(MouseEventArgs e)
    {
        await CheckPassState();

        if (passState == PasswordCheckStates.PasswordMatch)
        {
            try
            {
                creatingAddressSpinner = true;
                mustCreateAddressMessage = false;
                await Task.Delay(50);
                StateHasChanged();
                await Task.Delay(50);

                await AppData.Account.CreateNewAccount(password, false);
                await AppData.DogeAccount.CreateNewAccount(password, false);
                // save neblio address and key
                address = AppData.Account.Address;
                key = await AppData.Account.AccountKey.GetEncryptedKey(returnEncrypted: true);
                await localStorage.SetItemAsync("address", address);
                await localStorage.SetItemAsync("key", key);

                // save doge address and key
                address = AppData.DogeAccount.Address;
                key = await AppData.DogeAccount.AccountKey.GetEncryptedKey(returnEncrypted: true);
                await localStorage.SetItemAsync("dogeaddress", address);
                await localStorage.SetItemAsync("dogekey", key);

                //await AppData.Account.LoadAccount(password, key, address); // put here your password
                creatingAddressSpinner = false;
                mustCreateAddressMessage = false;
                createNewAddressModalVisible = false;
                await AccountCreated.InvokeAsync("Created");

                StateHasChanged();
            }
            catch (Exception ex)
            {
                errorMessage = "Your Account was not created." + ex.Message;
                accountCreatedError = true;
            }
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alertMessage", "Please fill your new password.");
        }

    }

    private void HandleCancel(MouseEventArgs e)
    {
        createNewAddressModalVisible = true;
        mustCreateAddressMessage = true;
    }

    private void AccountImported(string msg)
    {
        importAccountVisible = false;
        if (!string.IsNullOrEmpty(msg))
            AccountCreated.InvokeAsync(msg);
    }
}
