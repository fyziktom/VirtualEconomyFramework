@inject AppData AppData
@inject TransactionsService TransactionsService
@implements IDisposable

<div class="row w-100 m-0 d-flex justify-content-center align-items-center">
    @if (TransactionsDetails == null)
    {
        <VENFTApp_Blazor.Components.Spin Tip="Loading..." />
    }
    else
    {
        <div class="col">
            <div class="row w-100 m-0">
                <div class="col d-flex justify-content-center align-items-center">
                    <small>Number Of Transactions: @Transactions.Count</small>
                </div>
            </div>
            <div class="row w-100 d-flex justify-content-center align-items-center" style="margin: 30px 0 0 0; min-width:300px;">
                @if (TransactionsDetails.Count > 0)
                {
                    <VENFTApp_Blazor.Components.Table ItemType="TxDetails" Items="TransactionsDetails">
                        <VENFTApp_Blazor.Components.Column ItemType="TxDetails" Title="Way">
                            @context.Way
                        </VENFTApp_Blazor.Components.Column>
                        <VENFTApp_Blazor.Components.Column ItemType="TxDetails" Title="Receiver">
                            @context.Receiver
                        </VENFTApp_Blazor.Components.Column>
                        <VENFTApp_Blazor.Components.Column ItemType="TxDetails" Title="Date">
                            @context.Time
                        </VENFTApp_Blazor.Components.Column>
                        <VENFTApp_Blazor.Components.Column ItemType="TxDetails" Title="Details">
                            <button class="btn btn-primary" @onclick="() => ShowTxDetails(context.Info.Txid)">
                                Details
                            </button>
                        </VENFTApp_Blazor.Components.Column>
                    </VENFTApp_Blazor.Components.Table>
                    <VENFTApp_Blazor.Components.Pagination Total="@Transactions.Count" PerPage="@PerPage" OnChange="@HandlePaginationChanged" />
                }
            </div>
        </div>
    }
</div>

<Modal Title="Transaction Details" Visible="@txDetailsVisible" OnOk="@CloseTxDetails" OnCancel="@CloseTxDetails">
    <VENFTApp_Blazor.Components.Account.TransactionDetails TxId="@txDetailsTxId" SubAccount="@SubAccount" Address="@Address" />
</Modal>

@code {
    [Parameter]
    public bool SubAccount { get; set; } = false;
    [Parameter]
    public string Address { get; set; } = null;

    private int PerPage { get; set; } = 10;
    private int Offset { get; set; } = 0;

    private bool txDetailsVisible = false;
    private string txDetailsTxId = string.Empty;

    private List<string> Transactions = new List<string>();
    private List<TxDetails> TransactionsDetails = null;

    protected override async Task OnInitializedAsync()
    {
        if (AppData.Account != null)
            AppData.Account.Refreshed += RefreshedHandler;
        await Load();
    }

    public void Dispose()
    {
        if (AppData.Account != null)
            AppData.Account.Refreshed -= RefreshedHandler;
    }

    void RefreshedHandler(object sender, EventArgs e)
    {
        Load().ContinueWith((_) => StateHasChanged());
    }

    private async Task Load()
    {
        Transactions = await LoadTransactions(SubAccount);
        TransactionsDetails = await LoadTxDetails();
    }

    private Task<List<String>> LoadTransactions(bool subAccount)
    {
        return TransactionsService.LoadTransactions(Address, AppData.Account, subAccount);
    }

    private async Task<List<TxDetails>> LoadTxDetails()
    {
        List<TxDetails> txDetails = new List<TxDetails>();
        foreach (string txid in Transactions.Skip(Offset * PerPage).Take(PerPage))
        {
            if (txid != null)
            {
                var details = await TransactionsService.LoadTxDetails(txid, AppData.Account);
                txDetails.Add(details);
            }
        }
        return txDetails;
    }

    private async Task HandlePaginationChanged(int offset)
    {
        Offset = offset;
        TransactionsDetails = await LoadTxDetails();
    }

    private void ShowTxDetails(string txId)
    {
        txDetailsTxId = txId;
        txDetailsVisible = true;
    }

    private void CloseTxDetails(MouseEventArgs e)
    {
        txDetailsVisible = false;
    }
}
