@inject AppData AppData
@inject IJSRuntime JSRuntime

<div class="text-center">
    <div>
        <a href="https://nft.ve-nft.com/address?add=@Address" target="_blank">@Address</a>
        <VENFTApp_Blazor.Components.HelperButtons.CopyIcon MarginLeft="15" FontSize="18" TextToCopy="@Address" />
        @* <VENFTApp_Blazor.Components.HelperButtons.QRIcon MarginLeft="10" FontSize="18" TextToCopy="@Address" />*@

    </div>

    <div>
        <span>Actual Balance: @Math.Round(SelectedAccountTotalSpendable, 10).ToString() NEBL <img style="width: 10px;margin-left: 5px; margin-bottom:2px;" src="images/neblio-icon.png" /></span>
    </div>

    <div>
        <span>Unconfirmed Balance: @Math.Round(SelectedAccountTotalUnconfirmed, 10).ToString() NEBL <img style="width: 8px;margin-left: 4px; margin-bottom:1px;" src="images/neblio-icon.png" /></span>
    </div>

    @if (!HideNFTs)
    {
        <div>
            <span>Source Tokens Balance: @SelectedAccountTotalSourceVENFT VENFT/ @SelectedAccountTotalSourceCORZT CORZT</span>
        </div>

        <div>
            <span>NFTs: @SelectedAccountNFTCount</span>
        </div>
    }
</div>

@code {

    [Parameter]
    public bool SubAccount { get; set; } = false;

    [Parameter]
    public string Address { get; set; } = string.Empty;

    [Parameter]
    public bool HideNFTs { get; set; } = false;

    public double SelectedAccountTotalSpendable
    {
        get
        {
            if (!string.IsNullOrEmpty(Address) && Address != AppData.Account.Address)
                if (AppData.Account.SubAccounts.TryGetValue(Address, out var acc))
                    return acc.TotalSpendableBalance;
            return AppData.Account.TotalSpendableBalance;
        }
    }
    public double SelectedAccountTotalUnconfirmed
    {
        get
        {
            if (!string.IsNullOrEmpty(Address) && Address != AppData.Account.Address)
                if (AppData.Account.SubAccounts.TryGetValue(Address, out var acc))
                    return acc.TotalUnconfirmedBalance;
            return AppData.Account.TotalUnconfirmedBalance;
        }
    }
    public double SelectedAccountTotalSourceVENFT
    {
        get
        {
            if (!string.IsNullOrEmpty(Address) && Address != AppData.Account.Address)
                if (AppData.Account.SubAccounts.TryGetValue(Address, out var acc))
                    return acc.SourceTokensBalance;
            return AppData.Account.SourceTokensBalance;
        }
    }
    public double SelectedAccountTotalSourceCORZT
    {
        get
        {
            if (!string.IsNullOrEmpty(Address) && Address != AppData.Account.Address)
                if (AppData.Account.SubAccounts.TryGetValue(Address, out var acc))
                    return acc.CoruzantSourceTokensBalance;
            return AppData.Account.CoruzantSourceTokensBalance;
        }
    }
    public int SelectedAccountNFTCount
    {
        get
        {
            if (!string.IsNullOrEmpty(Address) && Address != AppData.Account.Address)
                if (AppData.Account.SubAccounts.TryGetValue(Address, out var acc))
                    return acc.NFTs.Count;
            return AppData.Account.NFTs.Count;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (AppData.Account != null)
            AppData.Account.Refreshed += RefreshedHandler;
    }

    void RefreshedHandler(object sender, EventArgs e)
    {
        StateHasChanged();
    }
}
