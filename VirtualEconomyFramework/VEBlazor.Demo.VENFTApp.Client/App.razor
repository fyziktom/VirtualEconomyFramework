@using VEDriversLite.NFT
@using VEDriversLite.NFT.Dto
@inject AppData AppData

<ThemeProvider Theme="@theme">
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(VEBlazor.Layouts.MainLayout)" />
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(VEBlazor.Layouts.MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
    
<VEBlazor.Components.VEBlazorServicesComponents />
</ThemeProvider>
@code {
    Theme theme = VEBlazor.Models.Themes.DefaultTheme.GetDefaultTheme();

    protected override async Task OnInitializedAsync()
    {
        AppData.AppName = "VENFT";
        AppData.AppNick = "VENFT";
        AppData.AppHomeWebsiteUrl = "https://about.ve-nft.com/";
        AppData.AppShareNFTUrl = "https://ve-nft.com/";
        AppData.AllowWorkTabs = false;
        AppData.AllowSend = true;
        AppData.AllowDestroy = true;
        AppData.DisplayGettingStartedMenuItem = true;
        AppData.GettingStartedPageName = "gettingstarted";
        AppData.AppTokenId = VEDriversLite.NFT.NFTHelpers.TokenId;
        
        if ( AppData.MintingTabsData.TryGetValue( "default", out var tab ) )
        {
            tab.MintingNFTType = NFTTypes.Ticket;
            tab.HeaderLabel = "Add New Ticket";
            tab.MenuButonLabel = "New Ticket";
            tab.TabPageLocationName = "addnew";
            tab.NFT = new TicketNFT( "" );
        }
        AppData.MintingTabsData.TryAdd( "eventminting", new MintingTabData()
            {
                MintingNFTType = NFTTypes.Event,
                HeaderLabel = "Add New Event",
                MenuButonLabel = "New Event",
                TabPageLocationName = "addnewevent",
                NFT = new EventNFT( "" ),
            } );
        AppData.MintingTabsData.TryAdd( "postminting", new MintingTabData()
            {
                MintingNFTType = NFTTypes.Post,
                HeaderLabel = "Add New Post",
                MenuButonLabel = "New Post",
                TabPageLocationName = "addnewpost",
                NFT = new PostNFT( "" ),
            } );

        AppData.AllowedNFTTypes = new List<VEDriversLite.NFT.NFTTypes>()
        { 
            VEDriversLite.NFT.NFTTypes.Profile, 
            VEDriversLite.NFT.NFTTypes.Image, 
            VEDriversLite.NFT.NFTTypes.Post,
            VEDriversLite.NFT.NFTTypes.Ticket, 
            VEDriversLite.NFT.NFTTypes.Event, 
            VEDriversLite.NFT.NFTTypes.Music
        };

        AppData.DefaultTags.Add("VEFramework", new VEDriversLite.NFT.Tags.Tag()
        {
            Name = "VEFramework",
            Color = "success",
            UseAsFastButton = true
        });
        AppData.DefaultTags.Add("Neblio", new VEDriversLite.NFT.Tags.Tag()
        {
            Name = "Neblio",
            Color = "info",
            UseAsFastButton = true
        });
        AppData.DefaultTags.Add(".NET", new VEDriversLite.NFT.Tags.Tag()
        {
            Name = ".NET",
            Color = "success",
            UseAsFastButton = true
        });
        AppData.DefaultTags.Add("Blazor", new VEDriversLite.NFT.Tags.Tag()
        {
            Name = "Blazor",
            Color = "info",
            UseAsFastButton = true
        });
        AppData.DefaultTags.Add("OpenSource", new VEDriversLite.NFT.Tags.Tag()
        {
            Name = "OpenSource",
            Color = "success",
            UseAsFastButton = true
        });
      
        await base.OnInitializedAsync();
    }
}