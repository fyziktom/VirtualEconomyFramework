@using System.IO
@using VEDriversLite.NFT

<Card Margin="Margin.Is4.FromBottom">
    <CardHeader>
        <CardTitle>Upload the Image</CardTitle>
    </CardHeader>
    <CardBody>
        <Field>
            <FieldLabel>Please upload the Image file.</FieldLabel>
            <Row Flex="Flex.AlignItems.Center">
                <Column>
                    <Row Margin="Margin.Is3.FromTop">
                        <Column>
                            <Validations @ref="@validationsRef" Mode="ValidationMode.Manual">
                                <Validation Validator="ImageUploaded">
                                    <Field>
                                        <FieldLabel>Please enter the name.</FieldLabel>
                                        <FileEdit Changed="@OnChanged" Ended="@OnEnded" Progressed="@OnProgressed">
                                            <Feedback>
                                                <ValidationError>Missing image.</ValidationError>
                                            </Feedback>
                                        </FileEdit>
                                    </Field>
                                </Validation>
                            </Validations>
                        </Column>
                    </Row>
                    @if ( fileLoaded && !string.IsNullOrEmpty( ImageDataString ) )
                    {
                        <Row Margin="Margin.Is3.FromTop">
                            <Column>
                                <Figure Size="FigureSize.Is256x256">
                                    <FigureImage Source="@ImageDataString" AlternateText="empty-256x256" />
                                    <FigureCaption>Uploaded New Image</FigureCaption>
                                </Figure>
                            </Column>
                        </Row>

                        <Row Margin="Margin.Is3.FromTop">
                            <Column>
                                <Alert Color="Color.Success">Image loaded.</Alert>
                            </Column>
                        </Row>
                    }
                    <Row Margin="Margin.Is3.FromTop">
                        <Column>
                            @if ( loadStarted )
                            {
                                <Span>Uploading the image... Progress: @progress %</Span>
                            }
                            else if ( uploadingToIPFS )
                            {
                                <Span>Uploading to IPFS...please wait...</Span>
                            }
                            else if ( uploadedFinished )
                            {
                                <Span>Upload to IPFS finished with hash: <a href="@_ipfsLink" target="_blank">@_ipfsLink</a> . You can continue now...</Span>
                            }
                        </Column>
                    </Row>
                </Column>
            </Row>
            <FieldHelp>You can upload any image file such as PNG, BMP, JPEG, but we recommend you to use the PNG format.</FieldHelp>
        </Field>
    </CardBody>
</Card>


@code {
    Validations validationsRef;

    string _ipfsLink = string.Empty;
    [Parameter]
    public string MainIPFSLink { get => _ipfsLink; set => _ipfsLink = value; }
    [Parameter]
    public EventCallback<string> MainIPFSLinkChanged { get; set; }

    string _previewIpfsLink = string.Empty;
    [Parameter]
    public string PreviewIPFSLink { get => _previewIpfsLink; set => _previewIpfsLink = value; }
    [Parameter]
    public EventCallback<string> PreviewIPFSLinkChanged { get; set; }

    //public string ImageData { get => imageData != null ? "data:image;base64," + Convert.ToBase64String(imageData) : string.Empty; }
    string ImageDataString = string.Empty;
    bool uploadingToIPFS = false;
    bool loadStarted = false;
    bool fileLoaded = false;
    bool uploadedFinished = false;
    string fileName = string.Empty;
    byte[] imageData = new byte[0];
    long fileSize = 0;
    double progress = 0;

    async Task OnChanged( FileChangedEventArgs e )
    {
        try
        {
            await validationsRef.ClearAll();

            foreach ( var file in e.Files )
            {
                loadStarted = true;
                ImageDataString = string.Empty;
                fileLoaded = false;

                fileSize = file.Size;
                fileName = file.Name;
                this.StateHasChanged();

                imageData = new byte[file.Size];
                using ( Stream stream = new MemoryStream( imageData ) )
                {
                    await file.WriteToStreamAsync( stream );
                    stream.Seek( 0, SeekOrigin.Begin );
                    using ( MemoryStream ms = new MemoryStream() )
                    {
                        await stream.CopyToAsync( ms );
                        imageData = ms.ToArray();
                        ImageDataString = "data:image;base64," + Convert.ToBase64String( imageData );

                        await validationsRef.ValidateAll();
                    }
                }
            }
        }
        catch ( Exception exc )
        {
            fileLoaded = false;
            loadStarted = false;
            Console.WriteLine( exc.Message );
        }
        finally
        {
            this.StateHasChanged();
        }
    }

    async Task UploadToIPFS()
    {
        if ( imageData != null && imageData.Length > 0 )
        {
            Console.WriteLine( "Uploading to IPFS..." );
            uploadingToIPFS = true;
            this.StateHasChanged();

            try
            {
                using ( Stream stream = new MemoryStream( imageData ) )
                {
                    stream.Seek( 0, SeekOrigin.Begin );
                    var result = await NFTHelpers.UploadInfura( stream, fileName );
                    if ( !string.IsNullOrEmpty( result ) )
                    {
                        _ipfsLink = result;
                        Console.WriteLine( $"File: {fileName} Uploaded to the IPFS with hash: " + _ipfsLink );
                        await MainIPFSLinkChanged.InvokeAsync( _ipfsLink );
                        uploadedFinished = true;
                    }
                }
            }
            catch ( Exception ex )
            {
                Console.WriteLine( "Cannot upload file to the IPFS. " + ex.Message );
            }
            finally
            {
                uploadingToIPFS = false;
                this.StateHasChanged();
            }

        }
        else
        { Console.WriteLine( "Cannot Upload empty image." ); }
    }

    async Task OnEnded( FileEndedEventArgs e )
    {
        Console.WriteLine( $"File: {e.File.Name} Loaded." );
        fileLoaded = true;
        loadStarted = false;
        StateHasChanged();
        await UploadToIPFS();
    }

    async Task OnProgressed( FileProgressedEventArgs e )
    {
        progress = e.Percentage;
        this.StateHasChanged();
        Console.WriteLine( $"File: {e.File.Name} Progress: {e.Percentage}" );
    }

    void ImageUploaded( ValidatorEventArgs e )
    {
        if ( !string.IsNullOrEmpty( ImageDataString ) )
            e.Status = ValidationStatus.Success;
        else
            e.Status = ValidationStatus.Error;
    }

    public Task<bool> IsValidated()
    {
        return validationsRef.ValidateAll();
    }
}
