@using System.IO
@using VEDriversLite.NFT

<Card Margin="Margin.Is4.FromBottom">
    <CardHeader>
        <CardTitle>Upload the Image</CardTitle>
    </CardHeader>
    <CardBody>
        <Alert Color="Color.Info" Visible>
            <AlertDescription>
                You can upload any image file such as PNG, BMP, JPEG, but we recommend you to use the PNG format.
            </AlertDescription>
        </Alert>
        <Row Flex="Flex.AlignItems.Center">
            <Column>
                <Row Margin="Margin.Is3.FromTop">
                    <Column>
                        <Validations @ref="@validationsRef" Mode="ValidationMode.Manual">
                            <Validation Validator="ImageValidator">
                                <Field>
                                    <FieldLabel>Please enter the name.</FieldLabel>
                                    <FieldBody>
                                        <FileUpload Started="@OnImageUploadStarted" Uploaded="@OnImageUploadEnded" ValidationsRef="@validationsRef" />
                                    </FieldBody>
                                </Field>
                            </Validation>
                        </Validations>
                    </Column>
                </Row>
                @if ( !string.IsNullOrEmpty( ImageDataString ) )
                {
                    <Row Margin="Margin.Is3.FromTop">
                        <Column>
                            <Figure Size="FigureSize.Is256x256">
                                <FigureImage Source="@ImageDataString" AlternateText="empty-256x256" />
                                <FigureCaption>Uploaded New Image</FigureCaption>
                            </Figure>
                        </Column>
                    </Row>

                    <Row Margin="Margin.Is3.FromTop">
                        <Column>
                            <Alert Color="Color.Success">Image loaded.</Alert>
                        </Column>
                    </Row>
                }
                <Row Margin="Margin.Is3.FromTop">
                    <Column>
                        @if ( uploadingImage )
                        {
                            <Span>Uploading the image...</Span>
                        }
                        else if ( uploadingToIPFS )
                        {
                            <Span>Uploading to IPFS... please wait...</Span>
                        }
                        else if ( uploadFinished )
                        {
                            <Span>Upload to IPFS finished with hash: <a href="@_ipfsLink" target="_blank">@_ipfsLink</a> . You can continue now...</Span>
                        }
                    </Column>
                </Row>
            </Column>
        </Row>
    </CardBody>
</Card>


@code {
    Validations validationsRef;

    string _ipfsLink = string.Empty;
    [Parameter]
    public string MainIPFSLink { get => _ipfsLink; set => _ipfsLink = value; }
    [Parameter]
    public EventCallback<string> MainIPFSLinkChanged { get; set; }

    string _previewIpfsLink = string.Empty;
    [Parameter]
    public string PreviewIPFSLink { get => _previewIpfsLink; set => _previewIpfsLink = value; }
    [Parameter]
    public EventCallback<string> PreviewIPFSLinkChanged { get; set; }

    //public string ImageData { get => imageData != null ? "data:image;base64," + Convert.ToBase64String(imageData) : string.Empty; }
    string ImageDataString = string.Empty;

    bool uploadingImage = false;
    bool uploadingToIPFS = false;
    bool uploadFinished = false;
    string fileName = string.Empty;
    byte[] imageData = new byte[0];

    Task OnImageUploadStarted()
    {
        uploadingImage = true;

        return InvokeAsync( StateHasChanged );
    }

    async Task OnImageUploadEnded( byte[] data )
    {
        uploadingImage = false;

        imageData = data;
        ImageDataString = "data:image;base64," + Convert.ToBase64String( imageData );

        await UploadToIPFS();
    }

    async Task UploadToIPFS()
    {
        if ( imageData != null && imageData.Length > 0 )
        {
            Console.WriteLine( "Uploading to IPFS..." );
            uploadingToIPFS = true;
            this.StateHasChanged();

            try
            {
                using ( Stream stream = new MemoryStream( imageData ) )
                {
                    stream.Seek( 0, SeekOrigin.Begin );
                    var result = await NFTHelpers.UploadInfura( stream, fileName );
                    if ( !string.IsNullOrEmpty( result ) )
                    {
                        _ipfsLink = result;
                        Console.WriteLine( $"File: {fileName} Uploaded to the IPFS with hash: " + _ipfsLink );
                        await MainIPFSLinkChanged.InvokeAsync( _ipfsLink );
                        uploadFinished = true;
                    }
                }
            }
            catch ( Exception ex )
            {
                Console.WriteLine( "Cannot upload file to the IPFS. " + ex.Message );
            }
            finally
            {
                uploadingToIPFS = false;
                this.StateHasChanged();
            }

        }
        else
        { Console.WriteLine( "Cannot Upload empty image." ); }
    }

    void ImageValidator( ValidatorEventArgs e )
    {
        if ( !string.IsNullOrEmpty( ImageDataString ) )
            e.Status = ValidationStatus.Success;
        else
            e.Status = ValidationStatus.Error;
    }

    public Task<bool> IsValidated()
    {
        return validationsRef.ValidateAll();
    }
}
