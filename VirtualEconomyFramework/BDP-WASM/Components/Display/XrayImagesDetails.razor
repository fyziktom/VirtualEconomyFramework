@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NFT.Imaging.Xray
@using Markdig
@inject AppData AppData

@if ( NFT != null && NFT.Type == NFTTypes.XrayImage )
{
    <Modal @ref="NFTDetailsModal">
        <ModalContent Centered>
            <ModalHeader>
                <ModalTitle>@NFT.Name - Details</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                <Card Margin="Margin.Is4.FromBottom">
                    <CardBody>
                        <CardTitle Size="5">Basic Info</CardTitle>
                        <Row>
                            <Column>
                                <PanzoomImage Source="@GetImageUrl()" />
                            </Column>
                        </Row>
                        <CardText Margin="Margin.Is2.FromTop">
                            @NFT.Description
                        </CardText>
                        <CardText Margin="Margin.Is2.FromTop">
                            <Row>
                                @foreach ( var tag in NFT.TagsList )
                                {
                                    <Column Margin="Margin.Is2.FromEnd">
                                        <small class="text-muted">#@tag</small>
                                    </Column>
                                }
                            </Row>
                        </CardText>
                    </CardBody>
                </Card>
                
                <Card Margin="Margin.Is4.FromBottom">
                    <CardBody>
                        <CardTitle Size="5">Xray Parameters</CardTitle>
                        <CardText>
                            <XrayParamsValues XrayParams="nft.XrayParams" />
                        </CardText>
                    </CardBody>
                </Card>
                @if ( !string.IsNullOrEmpty( NFT.Text ) )
                {
                    <Card Margin="Margin.Is4.FromBottom">
                        <CardBody>
                            <CardTitle Size="5">Description</CardTitle>
                            <CardText>
                                <Span>@((MarkupString)NFTTextMarkuptext)</Span>
                            </CardText>
                        </CardBody>
                    </Card>
                }
                <Card Margin="Margin.Is4.FromBottom">
                    <CardBody>
                        <CardTitle Size="5">Actions</CardTitle>
                        <Row>
                            <Column>
                                <Button Color="Color.Primary" Clicked=@OpenNFTInWorkTab Block>
                                    <Icon Name="IconName.FolderOpen" />
                                    Open In Work Tab
                                </Button>
                            </Column>
                        </Row>
                        @if (IsOwnNFT && AppData.IsAccountLoaded)
                        {
                            <Row Margin="Margin.Is3.FromTop">
                                <Column>
                                    <Button Color="Color.Primary" Clicked=@SendNFT Block>
                                        <Icon Name="IconName.Mail" />
                                        Send
                                    </Button>
                                </Column>
                                <Column>
                                    <Button Color="Color.Danger" Clicked=@DestroyNFT Block>
                                        <Icon Name="IconName.MinusCircle" />
                                        Destroy
                                    </Button>
                                </Column>
                            </Row>
                        }
                    </CardBody>
                </Card>
                
                <Card Margin="Margin.Is4.FromBottom">
                    <CardBody>
                        <CardTitle Size="5">Storage Info</CardTitle>
                        <CardText Margin="Margin.Is2.FromTop">
                            Image IPFS Storage info:
                        </CardText>
                        <Row Margin="Margin.Is2.FromTop">
                            <Column>
                                <CopyButton TextToCopy="@NFT.ImageLink" ButtonText="Copy IPFS Link" />
                            </Column>
                            <Column>
                                <CopyButton TextToCopy="@(NFTHelpers.GetHashFromIPFSLink(NFT.ImageLink))" ButtonText="Copy IPFS Hash" />
                            </Column>
                        </Row>
                        <Row Margin="Margin.Is2.FromTop">
                            <Column>
                                <Button Color="Color.Light" Type="ButtonType.Link" To="@NFT.ImageLink" Target="Target.Blank" Block>Open Image Link</Button>
                            </Column>
                        </Row>
                        
                        <CardText Margin="Margin.Is2.FromTop">
                            Blockchain Storage transaction info:
                        </CardText>
                        <Row Margin="Margin.Is2.FromTop">
                            <Column>
                                <CopyButton TextToCopy="@($"{NFT.Utxo}:{NFT.UtxoIndex}")" ButtonText="Copy Tx Hash" />
                            </Column>
                            <Column>
                                <Button Color="Color.Light" Type="ButtonType.Link" To="@($"https://explorer.nebl.io/tx/{NFT.Utxo}")" Target="Target.Blank" Block>To Explorer</Button>
                            </Column>
                        </Row>
                    </CardBody>
                </Card>
            </ModalBody>
        </ModalContent>
    </Modal>
}

<BDP_WASM.Components.Account.DestroyNFT @ref=DestroyNFTModalComponent
                                        NFT="@NFT"
                                        Address="@Address"
                                        IsSubAccount="@IsSubAccount"
                                        NFTSent="NFTDestroyedHandler" />
<BDP_WASM.Components.Account.SendNFT @ref=SendNFTModalComponent
                                     NFT="@NFT"
                                     Address="@Address"
                                     IsSubAccount="@IsSubAccount"
                                     NFTSent="NFTSendHandler" />

@code {
    private Modal NFTDetailsModal;
    private BDP_WASM.Components.Account.DestroyNFT DestroyNFTModalComponent;
    private BDP_WASM.Components.Account.SendNFT SendNFTModalComponent;

    private Panzoom _panzoom;    

    [Parameter]
    public string Address { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<string> AddressChanged { get; set; }
    [Parameter]
    public bool IsSubAccount { get; set; } = false;
    [Parameter]
    public EventCallback<bool> IsSubAccountChanged { get; set; }
    [Parameter]
    public bool IsOwnNFT { get; set; } = false;
    [Parameter]
    public EventCallback<bool> IsOwnNFTChanged { get; set; }
    [Parameter]
    public INFT NFT { get; set; } = new XrayImageNFT( "" );

    public XrayImageNFT nft { get => ( NFT.Type == NFTTypes.XrayImage ) ? ( NFT as XrayImageNFT ) : ( new XrayImageNFT( "" ) ); }

    [Parameter]
    public EventCallback<INFT> NFTChanged { get; set; }
    [Parameter]
    public string Utxo { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<string> UtxoChanged { get; set; }
    [Parameter]
    public int UtxoIndex { get; set; } = 0;
    [Parameter]
    public EventCallback<int> UtxoIndexChanged { get; set; }

    [Parameter]
    public EventCallback<NFTSentResultDto> NFTSent { get; set; }
    [Parameter]
    public EventCallback<List<INFT>> OpenNFTsInWorkTab { get; set; }

    public string NFTTextMarkuptext => Markdig.Markdown.ToHtml( NFT.Text );

    public string GetImageUrl( bool returnPreviewIfExists = false )
    {
        if ( NFT == null )
            return string.Empty;

        if ( returnPreviewIfExists )
        {
            var preview = GetPreviewUrl();
            if ( !string.IsNullOrEmpty( preview ) )
                return preview;
        }

        if ( !string.IsNullOrEmpty( NFT.ImageLink ) )
            return NFT.ImageLink;
        else
            return string.Empty;
    }
    public string GetPreviewUrl()
    {
        if ( NFT == null )
            return string.Empty;

        if ( !string.IsNullOrEmpty( NFT.Preview ) )
            return NFT.Preview;
        else
            return string.Empty;
    }

    public bool ShowNFTDetails()
    {
        if ( NFT == null )
            return false;

        NFTDetailsModal.Show();
        return true;
    }
    public bool HideNFTDetails()
    {
        NFTDetailsModal.Hide();
        return true;
    }

    async Task OpenNFTInWorkTab()
    {
        if ( NFT == null )
            return;
        await OpenNFTsInWorkTab.InvokeAsync( new List<INFT>() { NFT } );
    }

    void SendNFT()
    {
        if ( NFT == null )
            return;
        SendNFTModalComponent.ShowSendNFTModal();
    }

    void DestroyNFT()
    {
        if ( NFT == null )
            return;
        DestroyNFTModalComponent.ShowDestroyNFTModal();
    }
    public async Task NFTSendHandler( NFTSentResultDto e )
    {
        SendNFTModalComponent.HideSendNFTModal();
        await NFTSent.InvokeAsync( e );
    }
    public async Task NFTDestroyedHandler( NFTSentResultDto e )
    {
        DestroyNFTModalComponent.HideDestroyNFTModal();
        await NFTSent.InvokeAsync( e );
    }

}
