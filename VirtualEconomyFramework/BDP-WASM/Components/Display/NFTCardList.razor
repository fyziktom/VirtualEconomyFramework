@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.Bookmarks
@inject AppData AppData

<Row>
    <Column>
        <Row Flex="Flex.AlignContent.Center">
            <Column>
                <Field>
                    <FieldBody>
                        <Addons>
                            <Addon AddonType="AddonType.Body">
                                <TextEdit Placeholder="Search by Name, Author or Tags" @bind-Text="searchNFTsString" KeyUp="@RefreshRequested" />
                            </Addon>
                            <Addon AddonType="AddonType.End">
                                <Button Color="Color.Light" Clicked="@Refresh"><Icon Name="IconName.Search" /></Button>
                            </Addon>
                        </Addons>
                    </FieldBody>
                    <FieldHelp>You can use Name, Author or Tags. Search is not case sensitive.</FieldHelp>
                </Field>
            </Column>
        </Row>
        <Row>
            <Column>
                <CardDeck>
                    @foreach ( var NFT in NFTs )
                    {
                        @if ( IsInFilter( NFT ) )
                        {
                            <XrayImageCard @key="@NFT"
                                   NFT=@NFT
                                   Address="@Address"
                                   IsSubAccount="@IsSubAccount"
                                   IsOwnNFT="@IsOwnNFT"
                                   Utxo="@NFT.Utxo"
                                   UtxoIndex="@NFT.UtxoIndex"
                                   OpenNFTsInWorkTab="async (e) => await OpenNFTsInWorkTab.InvokeAsync(e)" />
                        }
                    }
                </CardDeck>
            </Column>
        </Row>
    </Column>
</Row>

@code {
    [Parameter]
    public string Address { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<string> AddressChanged { get; set; }
    [Parameter]
    public bool IsSubAccount { get; set; } = false;
    [Parameter]
    public EventCallback<bool> IsSubAccountChanged { get; set; }
    [Parameter]
    public bool IsOwnNFT { get; set; } = false;
    [Parameter]
    public EventCallback<bool> IsOwnNFTChanged { get; set; }
    [Parameter]
    public EventCallback<List<INFT>> OpenNFTsInWorkTab { get; set; }

    public IEnumerable<INFT> NFTs
    {
        get
        {
            if ( IsOwnNFT )
                return AppData.Account.NFTs.Where( n => n.Type == NFTTypes.XrayImage );
            else
            {
                var tab = AppData.Account.Tabs.FirstOrDefault( t => t.Address == Address );
                if ( tab != null )
                    return tab.NFTs.Where( n => n.Type == NFTTypes.XrayImage );
                else
                    return new List<INFT>();
            }
        }
    }

    string searchNFTsString = string.Empty;


    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        if ( firstRender )
        {
            AppData.Account.Refreshed -= RefreshedHandler;
            AppData.Account.Refreshed += RefreshedHandler;
        }
        await base.OnAfterRenderAsync( firstRender );
    }

    private void RefreshedHandler( object sender, EventArgs e )
    {
        StateHasChanged();
    }

    void RefreshRequested( KeyboardEventArgs e )
    {
        if ( e.Code == "Enter" || e.Code == "NumpadEnter" )
            Refresh();
    }
    void Refresh()
    {
        StateHasChanged();
    }

    public bool IsInFilter( INFT nft )
    {
        if ( !string.IsNullOrEmpty( searchNFTsString ) )
        {
            if ( nft.Author.ToLower().Contains( searchNFTsString ) || nft.Name.ToLower().Contains( searchNFTsString ) )
            {
                return true;
            }

            if ( !string.IsNullOrEmpty( nft.Tags ) )
            {
                if ( nft.Tags.ToLower().Contains( searchNFTsString ) )
                    return true;

                var split = searchNFTsString.Split( ' ' );
                if ( split.Length > 1 )
                {
                    var score = 0;
                    nft.TagsList.ForEach( t =>
                    {
                        Array.ForEach( split, s =>
                        {
                            if ( t.ToLower().Contains( s.ToLower() ) )
                                score++;
                            else if ( s.ToLower().Contains( t.ToLower() ) )
                                score++;
                        } );
                    } );
                    if ( score > 0 )
                        return true;
                }
            }

            return false;
        }
        else
        {
            return true;
        }
    }
}
