@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NFT.Imaging.Xray

@if ( NFT != null && NFT.Type == NFTTypes.XrayImage )
{
    var nft = NFT as XrayImageNFT;

    <Card Margin="Margin.Is4.FromBottom" Style="min-width:150px; max-width:250px;">
        <CardImage Source="@GetImageUrl()" Alt="No image found" Style="max-height:200px;" @onclick="() => NFTImageDetailModal.Show()">
        </CardImage>
        <CardBody>
            <CardTitle Size="5" TextOverflow="TextOverflow.Truncate">
                @NFT.Name
            </CardTitle>
            <CardText>
                <Small>@NFT.Description</Small>
            </CardText>
            <CardText>
                <XrayParamsValues XrayParams="@nft.XrayParams" />
            </CardText>
            <CardText>
                @foreach ( var tag in NFT.TagsList )
                {
                    <Badge Color="Color.Light" Margin="Margin.Is1.FromEnd">#@tag</Badge>
                }
            </CardText>
        </CardBody>
        <CardFooter>
            <Button Color="Color.Primary" Clicked=@OpenNFTDetailsModal Block>
                <Icon Name="IconName.Info" />
            </Button>
        </CardFooter>
    </Card>
}

<Modal @ref="NFTImageDetailModal">
    <ModalContent Centered Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>NFT Image Detail</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <PanzoomImage Source="@GetImageUrl()" />
        </ModalBody>
    </ModalContent>
</Modal>

<XrayImagesDetails @ref=XrayImagesDetailsModalComponent
                   NFT="@NFT"
                   Address="@Address"
                   IsOwnNFT="@IsOwnNFT"
                   IsSubAccount="@IsSubAccount"
                   NFTSent="@NFTSentHandler"
                   OpenNFTsInWorkTab="async (e) => await OpenNFTsInWorkTab.InvokeAsync(e)" />

@code {
    private XrayImagesDetails XrayImagesDetailsModalComponent;
    private Modal NFTImageDetailModal;

    [Parameter]
    public string Address { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<string> AddressChanged { get; set; }
    [Parameter]
    public bool IsSubAccount { get; set; } = false;
    [Parameter]
    public EventCallback<bool> IsSubAccountChanged { get; set; }
    [Parameter]
    public bool IsOwnNFT { get; set; } = false;
    [Parameter]
    public EventCallback<bool> IsOwnNFTChanged { get; set; }
    [Parameter]
    public INFT NFT { get; set; } = new ImageNFT( "" );
    [Parameter]
    public EventCallback<INFT> NFTChanged { get; set; }
    [Parameter]
    public string Utxo { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<string> UtxoChanged { get; set; }
    [Parameter]
    public int UtxoIndex { get; set; } = 0;
    [Parameter]
    public EventCallback<int> UtxoIndexChanged { get; set; }
    [Parameter]
    public EventCallback<List<INFT>> OpenNFTsInWorkTab { get; set; }

    [Parameter]
    public EventCallback<NFTSentResultDto> NFTSent { get; set; }

    public string GetImageUrl( bool returnPreviewIfExists = false )
    {
        if ( NFT == null )
            return string.Empty;

        if ( returnPreviewIfExists )
        {
            var preview = GetPreviewUrl();
            if ( !string.IsNullOrEmpty( preview ) )
                return preview;
        }

        if ( !string.IsNullOrEmpty( NFT.ImageLink ) )
            return NFT.ImageLink;
        else
            return string.Empty;
    }
    public string GetPreviewUrl()
    {
        if ( NFT == null )
            return string.Empty;

        if ( !string.IsNullOrEmpty( NFT.Preview ) )
            return NFT.Preview;
        else
            return string.Empty;
    }

    public void OpenNFTDetailsModal()
    {
        if ( NFT == null )
            return;
        XrayImagesDetailsModalComponent.ShowNFTDetails();
    }

    async Task NFTSentHandler( NFTSentResultDto e )
    {
        XrayImagesDetailsModalComponent.HideNFTDetails();
        await NFTSent.InvokeAsync( e );
    }
}
