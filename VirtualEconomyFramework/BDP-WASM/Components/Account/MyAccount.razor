@using VEDriversLite
@using VEDriversLite.Neblio
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AppData AppData

<Container Fluid Flex="Flex.AlignItems.Center.JustifyContent.Center" Height="Height.Is100">
<Row Width="Width.Is100">
    <Column>
        @if ( AppData.IsAccountLoaded )
        {
            <Row Margin="Margin.Is3.FromTop">
                <Column Height="Height.Is100">
                    <AccountSider Address="@Address" IsSubAccount="@IsSubAccount" />
                </Column>
            </Row>
        }
        else 
        {
            <Row Margin="Margin.Is3.FromBottom">
                <Column Flex="Flex.JustifyContent.Center">
                    <Figure Size="FigureSize.Is128x128">
                        <FigureImage Source="images/BDPLogo-big-bw-transparent.png" />
                    </Figure>
                </Column>
            </Row>
            
            <Row Margin="Margin.Is3.FromBottom">
                <Column Flex="Flex.JustifyContent.Center">
                    <Heading Size="HeadingSize.Is2">Welcome in the Base Data Place App</Heading>
                </Column>
            </Row>
            @if ( !IsAccountStored )
            {
                <CreateAccount AccountCreated="@AccountCreatedHandler" />
            }
            else 
            {
                <Row Margin="Margin.Is5.FromBottom">
                    <Column Flex="Flex.JustifyContent.Center">
                        <Text>You already have account in this web browser. Please use login in top menu to continue.</Text>
                    </Column>
                </Row>
            }
        }  
        
    </Column>
</Row>        
</Container>

@code {
    [Inject] INotificationService NotificationService { get; set; }

    [Parameter]
    public string Address { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<string> AddressChanged { get; set; }
    [Parameter]
    public bool IsSubAccount { get; set; } = false;
    [Parameter]
    public EventCallback<bool> IsSubAccountChanged { get; set; }

    private bool IsAccountStored { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        AppData.LockUnlockAccount -= LockUnlockAccountHandler;
        AppData.LockUnlockAccount += LockUnlockAccountHandler;
        await CheckAccount();
    }

    private void LockUnlockAccountHandler(object sender, bool e)
    {
        StateHasChanged();
    }

    private async Task CheckAccount()
    {
        var key = await localStorage.GetItemAsync<string>( "key" );
        if ( string.IsNullOrEmpty( key ) )
            IsAccountStored = false;
        else
            IsAccountStored = true;
    }

    void AccountCreatedHandler( string e )
    {
        Address = e;
        IsAccountStored = true;
        NotificationService.Success( "Account Created :)", "Created" );
        StateHasChanged();
    }
}
