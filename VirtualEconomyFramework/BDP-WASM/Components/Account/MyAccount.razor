@using VEDriversLite
@using VEDriversLite.Neblio
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AppData AppData

<Container Fluid>
@if ( AppData.IsAccountLoaded )
{
    <Row Margin="Margin.Is3.FromTop">
        <Column>
            <BDP_WASM.Components.Account.AccountSider Address="@Address" IsSubAccount="@IsSubAccount" />
        </Column>
    </Row>
}
else 
{
    <Row Margin="Margin.Is3.FromBottom">
        <Column>
            <Heading Size="HeadingSize.Is1">Welcome in the Base Data Place App</Heading>
        </Column>
    </Row>
    @if ( !IsAccountStored )
    {
        <BDP_WASM.Components.Account.CreateAccount AccountCreated="@AccountCreatedHandler" />
    }
    else
    {
        <BDP_WASM.Components.Account.UnlockAccount AccountUnlocked="@AccountUnlockedHandler" />
    }
}
</Container>

@code {
    [Inject] INotificationService NotificationService { get; set; }
    
    [Parameter]
    public string Address { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<string> AddressChanged { get; set; }
    [Parameter]
    public bool IsSubAccount { get; set; } = false;
    [Parameter]
    public EventCallback<bool> IsSubAccountChanged { get; set; }

    private bool IsAccountStored { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await CheckAccount();
    }

    private async Task CheckAccount()
    {
        var key = await localStorage.GetItemAsync<string>( "key" );
        if ( string.IsNullOrEmpty( key ) )
            IsAccountStored = false;
        else
            IsAccountStored = true;
    }

    void AccountCreatedHandler( string e )
    {
        Address = e;
        IsAccountStored = true;
        NotificationService.Success( "Account Created :)", "Created" );
        StateHasChanged();
    }
    void AccountUnlockedHandler( string e )
    {
        Address = e;
        IsAccountStored = true;
        NotificationService.Success( "Account Unlocked :)", "Unlocked" );
        StateHasChanged();
    }
}
