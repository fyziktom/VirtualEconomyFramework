@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NFT.Imaging.Xray
@inject AppData AppData

@if (NFT != null && !string.IsNullOrEmpty(NFT.Utxo))
{
<Modal @ref="NFTSaveModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Save the NFT</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Container Fluid>
            <Row>
                <Column Flex="Flex.AlignItems.Center">
                    <Span>Do you really want to Save this NFT? You cannot take this action back.</Span>
                </Column>
            </Row>
            <Row Flex="Flex.JustifyContent.Center"> 
                <Column>
                    <Button Color="Color.Primary" Clicked=@NFTAction>Yes, I understand. Save the NFT now.</Button>
                </Column>
            </Row>
            @if (SaveFinished)
                {
                    <Row Flex="Flex.JustifyContent.Center">
                        <Column>
                            @if (SaveResult.Item1)
                            {
                                <Alert Color="Color.Success">@SaveResult.Item2</Alert>
                            }
                            else
                            {
                                <Alert Color="Color.Danger">@SaveResult.Item2</Alert>
                            }
                        </Column>
                    </Row>
            }
            </Container>
        </ModalBody>
    </ModalContent>
</Modal>
}
@code {

    private Modal NFTSaveModal;

    [Parameter]
    public string Receiver { get; set; } = string.Empty;
    [Parameter]
    public string Address { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<string> AddressChanged { get; set; }
    [Parameter]
    public bool IsSubAccount { get; set; } = false;
    [Parameter]
    public EventCallback<bool> IsSubAccountChanged { get; set; }
    [Parameter]
    public bool IsOwnNFT { get; set; } = false;
    [Parameter]
    public EventCallback<bool> IsOwnNFTChanged { get; set; }    
    [Parameter]
    public INFT NFT { get; set; } = new XrayImageNFT("");

    [Parameter]
    public EventCallback<INFT> NFTChanged { get; set; }
    [Parameter]
    public string Utxo { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<string> UtxoChanged { get; set; }
    [Parameter]
    public int UtxoIndex { get; set; } = 0;
    [Parameter]
    public EventCallback<int> UtxoIndexChanged { get; set; }

    [Parameter]
    public EventCallback<NFTSentResultDto> NFTSent { get; set; }

    bool Saveing = false;
    bool SaveFinished = false;
    (bool,string) SaveResult = (false,string.Empty);

    public void ShowSaveNFTModal(string receiver = "")
    {
        if (NFT == null) return;
        if (!string.IsNullOrEmpty(receiver))
            Receiver = receiver;
        NFTSaveModal.Show();
    }
    public void HideSaveNFTModal()
    {
        if (NFT == null) return;
        NFTSaveModal.Hide();
    }

    async Task NFTAction()
    {
        if (NFT == null) return;
        Saveing = true;
        StateHasChanged();

        if (!IsSubAccount)
            SaveResult = await AppData.Account.SendNFT(Receiver, NFT);
        else
            SaveResult = await AppData.Account.SendNFTFromSubAccount(Address, Receiver, NFT);

        Console.WriteLine($"Save of the NFT result: {SaveResult.Item1}, with message: {SaveResult.Item2}");

        SaveFinished = false;

        Saveing = false;
        StateHasChanged();

        //close automatically after 2 seconds
        await Task.Delay(2000);
        await NFTSent.InvokeAsync(new NFTSentResultDto() { sucess = SaveResult.Item1, message = SaveResult.Item2, NFT = NFT });       
    }
}
