@using VEDriversLite
@using VEDriversLite.Neblio
@using VEDriversLite.Dto
@using Newtonsoft.Json
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AppData AppData
@inject IJSRuntime JSRuntime

<Row>
    <Column>
        <Row>
            <Column>
                <h5>Your Address is <b>@AppData.Account.Address</b></h5>
            </Column>
        </Row>
        <Row Margin="Margin.Is3.FromBottom.Is3.FromTop" Flex="Flex.AlignItems.Start">
            <Column>
                <ErrorBoundary>
                    <AccountProfile Profile="@AppData.Account.Profile" />
                </ErrorBoundary>   
            </Column>
        </Row>
        <Row Margin="Margin.Is3.FromBottom" Flex="Flex.AlignItems.Start">
            <Column>
                <AccountBalances NeblioBalance="@AppData.Account.TotalSpendableBalance" 
                                 TokensBalance="@TokenSupply" 
                                 NFTsCount="@AppData.Account.NFTs.Count" />
            </Column>
        </Row>
        <Row Margin="Margin.Is3.FromBottom" Flex="Flex.AlignItems.End">
            <Column>
                <Button Color="Color.Light" Clicked="@Backup">Backup</Button>
            </Column>
        </Row>
    </Column>
</Row>
@code {
    [Parameter]
    public string Address { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<string> AddressChanged { get; set; }
    [Parameter]
    public bool IsSubAccount { get; set; } = false;
    [Parameter]
    public EventCallback<bool> IsSubAccountChanged { get; set; }

    public int TokenSupply { get => (AppData.Account.TokensSupplies.Count > 0) ? Convert.ToInt32(AppData.Account.TokensSupplies.FirstOrDefault().Value.Amount) : 0; }
    private string filename = "";
    private string backupData = "";
    
    async Task Backup()
    {
        var bookmarks = await localStorage.GetItemAsync<string>("bookmarks");
        var subAccounts = await localStorage.GetItemAsync<string>("subAccounts");
        var browserTabs = await localStorage.GetItemAsync<string>("browserTabs");
        var messageTabs = await localStorage.GetItemAsync<string>("messageTabs");
        var address = await localStorage.GetItemAsync<string>("address");
        var key = await localStorage.GetItemAsync<string>("key");

        var dto = new BackupDataDto();
        if (!string.IsNullOrEmpty(bookmarks))
            dto.Bookmarks = bookmarks;
        if (!string.IsNullOrEmpty(browserTabs))
            dto.BrowserTabs = browserTabs;
        if (!string.IsNullOrEmpty(messageTabs))
            dto.MessageTabs = messageTabs;
        if (!string.IsNullOrEmpty(subAccounts))
            dto.SubAccounts = subAccounts;
        if (!string.IsNullOrEmpty(address))
            dto.Address = address;
        if (!string.IsNullOrEmpty(key))
            dto.Key = key;

        filename = "Backup-Export-" + AppData.Account.Address + "-" + DateTime.UtcNow.ToString("dd-MM-yyyyThh_mm_ss") + ".txt";
        backupData = JsonConvert.SerializeObject(dto);

        if (string.IsNullOrEmpty(backupData))
            return;

        await JSRuntime.InvokeVoidAsync("jsFunctions.downloadText", backupData, filename);        

    }
}
