@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.Bookmarks
@inject AppData AppData

@page "/gallery"

<PageTitle>BDP - Gallery</PageTitle>

<PageHeader Title="Data Gallery" BreadcrumbItems="@(new string[] { "BDP", "Gallery" })" />

<Row>
    <Column>
        <Card Margin="Margin.Is4.FromBottom" Shadow="Shadow.Default">
            <CardBody>
                <Tabs RenderMode="TabsRenderMode.LazyReload" @bind-SelectedTab="@SelectedTabName" Pills>
                    <Items>
                        <Tab Name="gallery">
                            <Tooltip Text="Here you can find all yours images." Placement="TooltipPlacement.Bottom">
                                <Icon Name="IconName.Images" />
                                <Span>My Gallery</Span>
                            </Tooltip>
                        </Tab>
                        @foreach ( var tab in AppData.OpenedTabs )
                        {
                            var bookmark = AppData.Account.IsInTheBookmarks(tab.Address);
                            <Tab @key="@tab" Name="@tab.Name">
                                <Tooltip Text="@(bookmark.Item1 ? (MarkupString)"Bookmark Name:<br />" + bookmark.Item2.Name + (MarkupString)"<br /><br /> Note:<br />" + bookmark.Item2.Note : "This tab is not in bookmark. You can add it by click to the star icon.")" Placement="TooltipPlacement.Bottom">                
                                    <Span>
                                        @(tab.Type == TabType.ActiveTab ? "AT - " : "WT - ") @(bookmark.Item1 ? bookmark.Item2.Name : tab.Name)
                                        <Icon Name="IconName.MinusCircle" Clicked="() => CloseTab(tab.Name)" />
                                    </Span>
                                </Tooltip>
                            </Tab>
                        }
                        <Tab Name="newWorkTab"><Icon Name="IconName.SearchPlus" /> New Tab</Tab>
                    </Items>
                    <Content>
                        <TabPanel Name="gallery">
                            <BDP_WASM.Components.Tabs.GalleryTabContent Address="@AppData.Account.Address"
                                                                        IsSubAccount="false"
                                                                        IsOwnNFT="true"
                                                                        OpenNFTsInWorkTab="@OpenNFTsInWorkTabHandler" />
                        </TabPanel>
                        @foreach ( var tab in AppData.OpenedTabs )
                        {
                            @if ( tab.Type == TabType.ActiveTab )
                            {
                                <TabPanel Name="@tab.Name">
                                    <BDP_WASM.Components.Tabs.GalleryTabContent Address="@tab.Address"
                                                                        IsSubAccount="false"
                                                                        IsOwnNFT="false"
                                                                        OpenNFTsInWorkTab="@OpenNFTsInWorkTabHandler" />
                                </TabPanel>
                            }
                            @if ( tab.Type == TabType.WorkTab )
                            {
                                <TabPanel Name="@tab.Name">
                                    <BDP_WASM.Components.Tabs.WorkTabContent NFTs="@GetWTNFTs(tab)"
                                                                     Address="@Address"
                                                                     IsSubAccount="@IsSubAccount"
                                                                     IsOwnNFT="true"
                                                                     OpenNFTsInWorkTab="@OpenNFTsInWorkTabHandler" />
                                </TabPanel>
                            }
                        }
                        <TabPanel Name="newWorkTab">
                            <Container Fluid>
                                <Row Margin="Margin.Is5.FromTop">
                                    <Column Flex="Flex.AlignItems.Center">
                                        <Span>You can Open New Work Tab to edit the image.</Span>
                                    </Column>
                                </Row>
                                <Row Margin="Margin.Is5.FromBottom">
                                    <Column>
                                        <Button Color="Color.Primary" Clicked="@OpenWorkTab"><Icon Name="IconName.Desktop" /> Open Work Tab</Button>
                                    </Column>
                                </Row>
                                <Row Margin="Margin.Is5.FromTop">
                                    <Column Flex="Flex.AlignItems.Center">
                                        <Span>Or You can Open Tab with some another Address.</Span>
                                    </Column>
                                </Row>
                                <Row Margin="Margin.Is2.FromTop" Width="Width.Is100">
                                    <Column>
                                        <BDP_WASM.Components.Account.NeblioAddressInput @bind-Receiver="@NewTabAddress" />
                                    </Column>
                                </Row>
                                <Row Margin="Margin.Is2.FromTop" Flex="Flex.JustifyContent.Center">
                                    <Column>
                                        <Button Color="Color.Primary" Clicked="@OpenSearchTab"><Icon Name="IconName.Add" /> Open Search Tab</Button>
                                    </Column>
                                </Row>
                            </Container>
                        </TabPanel>
                    </Content>
                </Tabs>
            </CardBody>
        </Card>
    </Column>
</Row>
@code {
    [Inject] IPageProgressService PageProgressService { get; set; }

    [Parameter]
    public string Address { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<string> AddressChanged { get; set; }
    [Parameter]
    public bool IsSubAccount { get; set; } = false;
    [Parameter]
    public EventCallback<bool> IsSubAccountChanged { get; set; }
    [Parameter]
    public bool IsOwnNFT { get; set; } = false;
    [Parameter]
    public EventCallback<bool> IsOwnNFTChanged { get; set; }

    private string _selectedTabName = "gallery";
    [Parameter]
    public string SelectedTabName { get => _selectedTabName; set => _selectedTabName = value; }

    public string NewTabAddress { get; set; } = string.Empty;

    public int NewTabNameIterator = 1;

    List<INFT> GetWTNFTs(GalleryTab tab)
    {
        if (tab.Tab != null && tab.Type == TabType.WorkTab)
        {
            var n = (tab.Tab as WorkTab)?.NFTs;
            if (n != null) return n;
        }
        return new List<INFT>();
    }

    async Task OpenSearchTab()
    {
        if ( string.IsNullOrEmpty( NewTabAddress ) )
            return;

        var tab = AppData.Account.Tabs.FirstOrDefault( t => t.Address == NewTabAddress );
        if ( tab != null )
        {
            SelectedTabName = tab.ShortAddress;
            return;
        }

        await PageProgressService.Go( null, options => { options.Color = Color.Primary; } );
        var res = await AppData.Account.AddTab( NewTabAddress, 10 );
        if ( res.Item1 )
        {
            tab = AppData.Account.Tabs.FirstOrDefault( t => t.Address == NewTabAddress );
            if ( tab != null )
            {
                AppData.OpenedTabs.Add( new GalleryTab()
                    {
                        Type = TabType.ActiveTab,
                        Name = tab.ShortAddress,
                        Address = NewTabAddress
                    } );
            }
            SelectedTabName = tab.ShortAddress;
            await PageProgressService.Go( -1 );
        }
    }

    void OpenWorkTab()
    {
        var wt = new WorkTab();
        AppData.OpenedTabs.Add( new GalleryTab()
            {
                Type = TabType.WorkTab,
                Tab = wt,
                Name = wt.Name
            } );
        SelectedTabName = wt.Name;
    }

    void OpenNFTsInWorkTabHandler( List<INFT> e )
    {
        var wt = new WorkTab();
        wt.NFTs = e;
        wt.Name = "New" + NewTabNameIterator.ToString();
        NewTabNameIterator++;
        AppData.OpenedTabs.Add( new GalleryTab()
            {
                Type = TabType.WorkTab,
                Tab = wt,
                Name = wt.Name
            } );
        SelectedTabName = wt.Name;
    }

    async Task CloseTab( string tabName )
    {
        var tab = AppData.OpenedTabs.FirstOrDefault( t => t.Name == tabName );
        if ( tab != null )
        {
            AppData.OpenedTabs.Remove( tab );
            if ( tab.Type == TabType.ActiveTab )
                await AppData.Account.RemoveTab( tab.Address );
            if ( AppData.OpenedTabs.Count == 0 )
                SelectedTabName = "gallery";
            else
                SelectedTabName = AppData.OpenedTabs.Last().Name;
        }
    }
}
