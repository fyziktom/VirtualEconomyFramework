@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.Bookmarks
@inject AppData AppData

@page "/gallery"

<PageTitle>BDP - Gallery</PageTitle>

<h1>Data Gallery</h1>

<Tabs RenderMode="TabsRenderMode.LazyReload" @bind-SelectedTab="@SelectedTabName">
    <Items>
        <Tab Name="gallery">Gallery </Tab>
        @foreach (var tab in AppData.OpenedTabs)
        {
            <Tab Name="@tab.Name">
                <Row>
                    <Column>
                        <Span>@(tab.Type == TabType.ActiveTab ? "AT - " : "WT - ") @tab.Name</Span>
                    </Column>
                    <Column Margin="Margin.Is2.FromStart">
                        <Icon Name="IconName.MinusCircle" Clicked="() => CloseTab(tab.Name)" />
                    </Column>
                </Row>
            </Tab>
        }
        <Tab Name="newWorkTab"><Icon Name="IconName.CartPlus" />New Tab</Tab>
    </Items>
    <Content>
        <TabPanel Name="gallery">
            <BDP_WASM.Components.Tabs.GalleryTabContent Address="@Address" 
                                                        IsSubAccount="false" 
                                                        IsOwnNFT="true"
                                                        OpenNFTsInWorkTab="@OpenNFTsInWorkTabHandler"/>
        </TabPanel>
        @foreach (var tab in AppData.OpenedTabs)
        {
            @if (tab.Type == TabType.ActiveTab)
            {
                <TabPanel Name="@tab.Name">
                    <BDP_WASM.Components.Tabs.GalleryTabContent Address="@tab.Address" 
                                                                IsSubAccount="false" 
                                                                IsOwnNFT="false"
                                                                OpenNFTsInWorkTab="@OpenNFTsInWorkTabHandler" />
                </TabPanel>
            }
            @if (tab.Type == TabType.WorkTab)
            {
                <TabPanel Name="@tab.Name">
                   <BDP_WASM.Components.Tabs.WorkTabContent NFTs="@((tab.Tab as WorkTab).NFTs)" 
                                                            Address="@Address" 
                                                            IsSubAccount="@IsSubAccount" 
                                                            IsOwnNFT="true" 
                                                            OpenNFTsInWorkTab="@OpenNFTsInWorkTabHandler" />
                </TabPanel>
            }
        }
        <TabPanel Name="newWorkTab">
            <Container Fluid>
                <Row Margin="Margin.Is5.FromTop">
                    <Column Flex="Flex.AlignItems.Center">
                        <Span>You can Open New Work Tab to edit the image.</Span>
                    </Column>
                </Row>
                <Row Margin="Margin.Is5.FromBottom"> 
                    <Column>
                        <Button Color="Color.Primary" Clicked="@OpenWorkTab"><Icon Name="IconName.Desktop" /> Open Work Tab</Button>
                    </Column>
                </Row>
                <Row Margin="Margin.Is5.FromTop">
                    <Column Flex="Flex.AlignItems.Center">
                        <Span>Or You can Open Tab with some another Address.</Span>
                    </Column>
                </Row>
                <Row Margin="Margin.Is2.FromTop" Width="Width.Is100"> 
                    <Column>
                       <BDP_WASM.Components.Account.NeblioAddressInput @bind-Receiver="@NewTabAddress" />
                    </Column>
                </Row>
                <Row Margin="Margin.Is2.FromTop" Flex="Flex.JustifyContent.Center"> 
                    <Column>
                        <Button Color="Color.Primary" Clicked="@OpenSearchTab"><Icon Name="IconName.Add" /> Open Search Tab</Button>
                    </Column>
                </Row>
            </Container>
        </TabPanel>
    </Content>
</Tabs>


@code {
    [Inject] IPageProgressService PageProgressService { get; set; }
    
    [Parameter]
    public string Address { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<string> AddressChanged { get; set; }
    [Parameter]
    public bool IsSubAccount { get; set; } = false;
    [Parameter]
    public EventCallback<bool> IsSubAccountChanged { get; set; }
    [Parameter]
    public bool IsOwnNFT { get; set; } = false;
    [Parameter]
    public EventCallback<bool> IsOwnNFTChanged { get; set; }

    private string _selectedTabName = "gallery";
    [Parameter]
    public string SelectedTabName { get => _selectedTabName; set => _selectedTabName = value; }

    public string NewTabAddress { get; set; } = string.Empty;

    public int NewTabNameIterator = 1;

    async Task OpenSearchTab()
    {
        if (string.IsNullOrEmpty(NewTabAddress))
            return;

        var tab = AppData.Account.Tabs.FirstOrDefault(t => t.Address == NewTabAddress);
        if (tab != null)
        {
            SelectedTabName = tab.ShortAddress;
            return;
        }

        await PageProgressService.Go( null, options => { options.Color = Color.Primary; } );
        var res = await AppData.Account.AddTab(NewTabAddress, 10);
        if (res.Item1)
        {
            tab = AppData.Account.Tabs.FirstOrDefault(t => t.Address == NewTabAddress);
            if (tab != null)
            {
                AppData.OpenedTabs.Add(new GalleryTab() { 
                    Type = TabType.ActiveTab, 
                    Name = tab.ShortAddress, 
                    Address = NewTabAddress
                });
            }                
            SelectedTabName = tab.ShortAddress;
            await PageProgressService.Go(-1);
        }
    }

    void OpenWorkTab()
    {
        var wt = new WorkTab();
        AppData.OpenedTabs.Add(new GalleryTab() { 
            Type = TabType.WorkTab, 
            Tab = wt, 
            Name = wt.Name 
        });
        SelectedTabName = wt.Name;
    }

    void OpenNFTsInWorkTabHandler(List<INFT> e)
    {
        var wt = new WorkTab();
        wt.NFTs = e;
        wt.Name = "New" + NewTabNameIterator.ToString();
        NewTabNameIterator++;
        AppData.OpenedTabs.Add(new GalleryTab() { 
            Type = TabType.WorkTab, 
            Tab = wt, 
            Name = wt.Name 
        });
        SelectedTabName = wt.Name;
    }

    async Task CloseTab(string tabName)
    {
        var tab = AppData.OpenedTabs.FirstOrDefault(t => t.Name == tabName);
        if (tab != null)
        {
            AppData.OpenedTabs.Remove(tab);
            if (tab.Type == TabType.ActiveTab)
                await AppData.Account.RemoveTab(tab.Address);
            if (AppData.OpenedTabs.Count == 0)
                SelectedTabName = "gallery";
            else
                SelectedTabName = AppData.OpenedTabs.Last().Name;
        }
    }
}
