@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.Bookmarks

@page "/gallery"

<PageTitle>BDP - Gallery</PageTitle>

<h1>Data Gallery</h1>

<Tabs RenderMode="TabsRenderMode.LazyReload" SelectedTab="@_selectedTabName">
    <Items>
        <Tab Name="gallery">Gallery </Tab>
        @foreach (var tab in OpenedTabs)
        {
            <Tab Name="@tab.Name">
                <Row>
                    <Column>
                        @(tab.Type == TabType.ActiveTab ? "AT - " : "WT - ") @tab.Name
                    </Column>
                    <Column Margin="Margin.Is2.FromStart">
                        <Icon Name="IconName.MinusCircle" Clicked="() => CloseTab(tab.Name)" />
                    </Column>
                </Row>
            </Tab>
        }
        <Tab Name="newWorkTab"><Icon Name="IconName.CartPlus" />New Tab</Tab>
    </Items>
    <Content>
        <TabPanel Name="gallery">
            <BDP_WASM.Components.Tabs.GalleryTabContent Address="@Address" 
                                                        IsSubAccount="@IsSubAccount" 
                                                        IsOwnNFT="true"
                                                        OpenNFTsInWorkTab="@OpenNFTsInWorkTabHandler"/>
        </TabPanel>
        @foreach (var tab in OpenedTabs)
        {
            @if (tab.Type == TabType.ActiveTab)
            {
                <TabPanel Name="@tab.Name">
                    <BDP_WASM.Components.Tabs.GalleryTabContent Address="@tab.Address" 
                                                                IsSubAccount="false" 
                                                                IsOwnNFT="false" />
                </TabPanel>
            }
            @if (tab.Type == TabType.WorkTab)
            {
                <TabPanel Name="@tab.Name">
                   <BDP_WASM.Components.Tabs.WorkTabContent NFTs="@((tab.Tab as WorkTab).NFTs)" 
                                                            Address="@Address" 
                                                            IsSubAccount="@IsSubAccount" 
                                                            IsOwnNFT="true" />
                </TabPanel>
            }
        }
        <TabPanel Name="newWorkTab">
            <Container Fluid>
                <Row Margin="Margin.Is5.FromTop">
                    <Column Flex="Flex.AlignItems.Center">
                        <Span>You can Open New Work Tab to edit the image.</Span>
                    </Column>
                </Row>
                <Row Margin="Margin.Is5.FromBottom"> 
                    <Column>
                        <Button Color="Color.Primary" Clicked="@OpenWorkTab"><Icon Name="IconName.Desktop" /> Open Work Tab</Button>
                    </Column>
                </Row>
                <Row Margin="Margin.Is5.FromTop">
                    <Column Flex="Flex.AlignItems.Center">
                        <Span>Or You can Open Tab with some another Address.</Span>
                    </Column>
                </Row>
                <Row Margin="Margin.Is2.FromTop" Width="Width.Is100"> 
                    <Column>
                       <BDP_WASM.Components.Account.NeblioAddressInput @bind-Receiver="@NewTabAddress" />
                    </Column>
                </Row>
                <Row Margin="Margin.Is2.FromTop" Flex="Flex.JustifyContent.Center"> 
                    <Column>
                        <Button Color="Color.Primary" Clicked="@OpenSearchTab"><Icon Name="IconName.Add" /> Open Search Tab</Button>
                    </Column>
                </Row>
            </Container>
        </TabPanel>
    </Content>
</Tabs>


@code {

    public enum TabType
    {
        Main,
        WorkTab,
        ActiveTab
    }
    public class WorkTab
    {
        public string Name { get; set; } = "Empty WT";
        public List<INFT> NFTs { get; set; } = new List<INFT>();
    }
    public class GalleryTab
    {
        public string Name { get; set; } = string.Empty;
        public string Address { get; set; } = string.Empty;
        public TabType Type { get; set; } = TabType.WorkTab;
        public object Tab { get; set; } = null;
        public bool IsActiove { get; set; } = false;
    }

    [Parameter]
    public string Address { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<string> AddressChanged { get; set; }
    [Parameter]
    public bool IsSubAccount { get; set; } = false;
    [Parameter]
    public EventCallback<bool> IsSubAccountChanged { get; set; }
    [Parameter]
    public bool IsOwnNFT { get; set; } = false;
    [Parameter]
    public EventCallback<bool> IsOwnNFTChanged { get; set; }

    private string _selectedTabName = "gallery";
    [Parameter]
    public string SelectedTabName { get => _selectedTabName; set => _selectedTabName = value; }

    public List<GalleryTab> OpenedTabs { get; set; } = new List<GalleryTab>();

    public string NewTabAddress { get; set; } = string.Empty;

    public int NewTabNameIterator = 1;

    async Task OpenSearchTab()
    {
        if (!string.IsNullOrEmpty(NewTabAddress))
            return;

        OpenedTabs.Add(new GalleryTab() { Type = TabType.ActiveTab, Tab = new ActiveTab(), Name = Address, Address = Address } );
        SelectedTabName = Address;
    }
    async Task OpenWorkTab()
    {
        var wt = new WorkTab();
        OpenedTabs.Add(new GalleryTab() { Type = TabType.WorkTab, Tab = wt, Name = wt.Name } );
        SelectedTabName = wt.Name;
    }
    void OpenNFTsInWorkTabHandler(List<INFT> e)
    {
        var wt = new WorkTab();
        wt.NFTs = e;
        wt.Name = "New" + NewTabNameIterator.ToString();
        NewTabNameIterator++;
        OpenedTabs.Add(new GalleryTab() { Type = TabType.WorkTab, Tab = wt, Name = wt.Name } );
        SelectedTabName = wt.Name;
    }
    void CloseTab(string tabName)
    {
        var tab = OpenedTabs.FirstOrDefault(t => t.Name == tabName);
        if (tab != null)
        {
            OpenedTabs.Remove(tab);
            if (tab.Type == TabType.ActiveTab)
            {
                (tab.Tab as ActiveTab).StopRefreshing();
            }
            StateHasChanged();
        }
    }
}
