@using VEDriversLite.NFT;
@using VEDriversLite.NFT.Dto;
@inject AppData AppData

<ThemeProvider Theme="@theme">
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(VEFramework.VEBlazor.Layouts.MainLayout)" />
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(VEFramework.VEBlazor.Layouts.MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
    
<VEFramework.VEBlazor.Components.VEBlazorServicesComponents />
</ThemeProvider>
@code {
    Theme theme = VEFramework.VEBlazor.Models.Themes.DefaultTheme.GetDefaultTheme();

    protected override async Task OnInitializedAsync()
    {
        AppData.AppName = "BaseDataPlace";
        AppData.AppNick = "BDP";
        AppData.AppHomeWebsiteUrl = "https://basedataplace.com/";
        AppData.AppShareNFTUrl = "https://test.basedataplace.com/";
        AppData.DisplayGettingStartedMenuItem = false;
        AppData.AppTokenId = VEDriversLite.NFT.NFTHelpers.BDPTokenId;

        VEDriversLite.StorageDriver.Helpers.IPFSHelpers.GatewayURL = "https://ve-framework.com/ipfs/"; //veframework public gateway
                                                                                                      
        var res = await VEDriversLite.VEDLDataContext.Storage.AddDriver(new VEDriversLite.StorageDriver.StorageDrivers.Dto.StorageDriverConfigDto()
            {
                Type = "IPFS",
                Name = "BDP",
                Location = "Cloud",
                ID = "BDP",
                IsPublicGateway = true,
                IsLocal = false,
                ConnectionParams = new VEDriversLite.StorageDriver.StorageDrivers.StorageDriverConnectionParams()
                {
                    APIUrl = "https://ve-framework.com/",
                    APIPort = 443,
                    Secured = false,
                    GatewayURL = "https://ve-framework.com/ipfs/",
                    GatewayPort = 443,
                }
            });

        if (AppData.MintingTabsData.TryGetValue("default", out var tab))
        {
            tab.MintingNFTType = VEDriversLite.NFT.NFTTypes.XrayImage;
            tab.NFT = new VEDriversLite.NFT.Imaging.Xray.XrayImageNFT();
        }
        AppData.AllowedNFTTypes = new List<VEDriversLite.NFT.NFTTypes>()
        { 
            VEDriversLite.NFT.NFTTypes.Profile, 
            VEDriversLite.NFT.NFTTypes.Xray, 
            VEDriversLite.NFT.NFTTypes.XrayImage,
            VEDriversLite.NFT.NFTTypes.Image,
            VEDriversLite.NFT.NFTTypes.Post 
        };
        AppData.MintingTabsData.TryAdd("postminting", new MintingTabData()
            {
                MintingNFTType = NFTTypes.Post,
                HeaderLabel = "Add New Post",
                MenuButonLabel = "New Post",
                TabPageLocationName = "addnewpost",
                NFT = new PostNFT(""),
            });
        AppData.MintingTabsData.TryAdd("imageminting", new MintingTabData()
            {
                MintingNFTType = NFTTypes.Music,
                HeaderLabel = "Add New Image",
                MenuButonLabel = "New Image",
                TabPageLocationName = "addnewimage",
                NFT = new ImageNFT(""),
            });

        AppData.DefaultTags.Add("ASAP", new VEDriversLite.NFT.Tags.Tag()
        {
            Name = "ASAP",
            Color = "warning",
            UseAsFastButton = true
        });
        AppData.DefaultTags.Add("HELP", new VEDriversLite.NFT.Tags.Tag()
        {
            Name = "HELP",
            Color = "info",
            UseAsFastButton = true
        });
        AppData.DefaultTags.Add("NG", new VEDriversLite.NFT.Tags.Tag()
        {
            Name = "NG",
            Color = "warning",
            UseAsFastButton = true
        });
        AppData.DefaultTags.Add("OK", new VEDriversLite.NFT.Tags.Tag()
        {
            Name = "OK",
            Color = "success",
            UseAsFastButton = true
        });
        AppData.DefaultTags.Add("SOLVED", new VEDriversLite.NFT.Tags.Tag()
        {
            Name = "SOLVED",
            Color = "primary",
            UseAsFastButton = true
        });

                
        await base.OnInitializedAsync();
    }
}