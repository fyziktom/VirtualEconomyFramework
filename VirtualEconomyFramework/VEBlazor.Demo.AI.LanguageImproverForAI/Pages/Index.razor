@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NFT.Dto
@using VEDriversLite.StorageDriver
@using Newtonsoft.Json
@using VEDriversLite.AI.OpenAI.Dto;
@inject HttpClient Http
@inject AppDataService AppDataService
@inject NavigationManager Navigator
@inherits NFTComponentBase

@page "/"

<PageTitle>Language Improver For AI</PageTitle>


<Row Margin="Margin.Is2.FromTop">
    <Column Flex="Flex.JustifyContent.Center">
        <Span>Please help to create Papiamento dataset to learn AI this language.</Span>
    </Column>
</Row>
<Row Margin="Margin.Is1.FromTop">
    <Column Flex="Flex.JustifyContent.Center">
        <Span>It will take you just short time and it will help lots of people around.</Span>
    </Column>
</Row>

<Row Margin="Margin.Is1.FromTop">
    <Column Flex="Flex.JustifyContent.Center">
        <Span>Principle is simple: </Span>
    </Column>
</Row>

<Row Margin="Margin.Is2.FromTop">
    <Column Flex="Flex.JustifyContent.Center">
        <ListGroup>
            <ListGroupItem>1. Input random basic topic (example: "fishing").</ListGroupItem>
            <ListGroupItem>2. AI will create some sentence based on it.</ListGroupItem>
            <ListGroupItem>3. AI will try to translate to Papiamento (now with poor grammar).</ListGroupItem>
            <ListGroupItem>4. You need to fix the translation to be correct.</ListGroupItem>
            <ListGroupItem>5. Write two different ways how to say same meaning of sentence in Papiamento.</ListGroupItem>
            <ListGroupItem>6. Add Name for this topic and add tags</ListGroupItem>
            <ListGroupItem>7. Save the result.</ListGroupItem>
        </ListGroup>
    </Column>
</Row>

<Row Margin="Margin.Is3.FromTop">
    <Column Flex="Flex.JustifyContent.Center">
        <Heading Size="HeadingSize.Is4">Let's start</Heading>
    </Column>
</Row>

<Row Flex="Flex.AlignItems.Center" Margin="Margin.Is2.FromTop.Is3.FromBottom">
    <Column>
        <GetText @ref="getTextRef" TextCreated="@onTextCreatedHandler" Language="@Language" IsLastSaved="@Minted" />
    </Column>
</Row>

<Field>
    <FieldLabel>Your translation</FieldLabel>
    <MemoEdit Rows="2" Placeholder="Fill your version of translation" Text="@additionalInfo.UserTranslation" TextChanged="onUserTranslationChangedHandler" />
    <FieldHelp>Input your version of correct Papiamento translation of basic text.</FieldHelp>
</Field>

<Field>
    <FieldLabel>Variation 1</FieldLabel>
    <MemoEdit Rows="2" Placeholder="Fill your version of translation" Text="@additionalInfo.UserVariation1" TextChanged="onUserVariation1ChangedHandler" />
    <FieldHelp>Create some alternative exmplanation of same meaning in Papiamento.</FieldHelp>
</Field>

<Field>
    <FieldLabel>Variation 2</FieldLabel>
    <MemoEdit Rows="2" Placeholder="Fill your version of translation" Text="@additionalInfo.UserVariation2" TextChanged="onUserVariation2ChangedHandler" />
    <FieldHelp>Create some second alternative exmplanation of same meaning in Papiamento.</FieldHelp>
</Field>

<Row Flex="Flex.AlignItems.Center" Margin="Margin.Is2.FromTop">
    <Column>
        <Field>
            <FieldLabel>Fill name of the record</FieldLabel>
            <TextEdit Placeholder="some name for this record" Text="@NFT.Name" TextChanged="onNameChangedHandler" />
        </Field>
        <Field>
            <FieldLabel>Fill some tags</FieldLabel>
            <SpaceTags Tags="@NFT.Tags" TagsChanged="@onTagsChangedHandler" />
            <FieldHelp>Use space as divider. do not use # infront of the tags.</FieldHelp>
        </Field>

    </Column>
</Row>

<Divider />

<Row Flex="Flex.AlignItems.Center" Margin="Margin.Is1.FromTop">
    <Column>
        <Field>
            <FieldLabel>Author:</FieldLabel>
            <TextEdit @bind-Text="NFT.Author" Placeholder="Name or Nickname" />
            <FieldHelp>Optional: Plese fill your name or nickname</FieldHelp>
        </Field>
    </Column>
</Row>

<Row Flex="Flex.AlignItems.Center" Margin="Margin.Is2.FromTop">
    <Column>
        @if (!Minted && !string.IsNullOrEmpty(additionalInfo.UserTranslation) && !string.IsNullOrEmpty(additionalInfo.UserVariation1) && !string.IsNullOrEmpty(additionalInfo.UserVariation2) && !string.IsNullOrEmpty(NFT.Name) && !string.IsNullOrEmpty(NFT.Tags))
        {
            <Button Color=" Color.Primary" Clicked="@MintNFT" Loading="@MintingNFT" Block>Save Record</Button>
        }
        else
        {
            <Button Color="Color.Primary" Clicked="@MintNFT" Loading="@MintingNFT" Disabled Block>Save Record</Button>
            <Span>Please fill the name, tags and all translations and variations to before saving the record</Span>
        }
    </Column>
</Row>

<Row Margin="Margin.Is2.FromTop">
    <Column>
        Link to <Link To="@("/search?txid=" + @LastMintedTx + "&index=0")" Target="Target.Blank">Show Record</Link>
    </Column>
</Row>

<Row Margin="Margin.Is2.FromTop.Is5.FromBottom">
    <Column>
        <VEFramework.VEBlazor.Components.Display.CopyButton TextToCopy="@(Navigator.BaseUri + "/search?txid=" + @LastMintedTx + "&index=0")" ButtonText="Copy link to Record" />
    </Column>
</Row>


@code {

    GetText getTextRef;

    INFT NFT = new PostNFT("");

    AdditionalInfo additionalInfo = new AdditionalInfo();
    bool CreatingInfo = false;
    bool CreatingImage = false;
    bool MintingNFT = false;

    string Receiver = string.Empty;
    string NFTTxId = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        
        if (firstRender)
        {
            Language = Languages.en2pap;
            var res = await AppDataService.GetAuthor();
            if (!string.IsNullOrEmpty(res))
                NFT.Author = res;
            else
                NFT.Author = "Anonymní student";

            additionalInfo = await AppDataService.GetAdditionalInfoAsync();
            var nt = await AppDataService.GetNameAndTagsAsync();
            if (nt.Item1 != null && nt.Item2 != null)
            {
                NFT.Name = nt.Item1;
                NFT.Tags = nt.Item2;
            }
            else
            {
                NFT.Name = string.Empty;
                NFT.Tags = string.Empty;
            }

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task onUserTranslationChangedHandler(string e)
    {
        if (e != null)
        {
            additionalInfo.UserTranslation = e;
            await AppDataService.SaveAdditionalInfoAsync(additionalInfo);
        }
    }

    private async Task onUserVariation1ChangedHandler(string e)
    {
        if (e != null)
        {
            additionalInfo.UserVariation1 = e;
            await AppDataService.SaveAdditionalInfoAsync(additionalInfo);
        }
    }

    private async Task onUserVariation2ChangedHandler(string e)
    {
        if (e != null)
        {
            additionalInfo.UserVariation2 = e;
            await AppDataService.SaveAdditionalInfoAsync(additionalInfo);
        }
    }
    
    private async Task onNameChangedHandler(string e)
    {
        if (e != null)
        {
            NFT.Name = e;
            await AppDataService.SaveNameAndTagsAsync(NFT.Name, NFT.Tags);
        }
    }


    private void onTextCreatedHandler((string, (string, string)) e)
    {
        if (!string.IsNullOrEmpty(e.Item2.Item1))
        {
            NFTTxId = string.Empty;
            Minted = false;

            additionalInfo.OrigUserBaseText = e.Item1;
            additionalInfo.OrigAIText = e.Item2.Item1;
            additionalInfo.OrigTranslation = e.Item2.Item2;

            additionalInfo.UserTranslation = string.Empty;
            additionalInfo.UserVariation1 = string.Empty;
            additionalInfo.UserVariation2 = string.Empty;

            AppDataService.SaveAdditionalInfo(additionalInfo);

            StateHasChanged();
        }
    }

    private async Task onTagsChangedHandler(string e)
    {
        if (e != null)
        {
            NFT.Tags = e;
            await AppDataService.SaveNameAndTagsAsync(NFT.Name, NFT.Tags);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task MintNFT()
    {
        MintingNFT = true;
        await InvokeAsync(StateHasChanged);

        await AppDataService.SaveAdditionalInfoAsync(additionalInfo);
        await AppDataService.SaveNameAndTagsAsync(NFT.Name, NFT.Tags);

        var addInfo = new AdditionalInfo();
        addInfo.OrigUserBaseText = additionalInfo.OrigUserBaseText.Replace("\n", "%0A");
        addInfo.OrigAIText = additionalInfo.OrigAIText.Replace("\n", "%0A");
        addInfo.OrigTranslation = additionalInfo.OrigTranslation.Replace("\n", "%0A");
        addInfo.UserTranslation = additionalInfo.UserTranslation.Replace("\n", "%0A");
        addInfo.UserVariation1 = additionalInfo.UserVariation1.Replace("\n", "%0A");
        addInfo.UserVariation2 = additionalInfo.UserVariation2.Replace("\n", "%0A");

        NFT.Text = JsonConvert.SerializeObject(addInfo);

        var obj = new
        {
            receiver = Receiver,
            text = NFT.Text,
            name = NFT.Name,
            tags = NFT.Tags,
            author = NFT.Author,
            language = Language
        };

        var cnt = JsonConvert.SerializeObject(obj);
        if (cnt != null)
        {
            using (var content = new StringContent(cnt, System.Text.Encoding.UTF8, "application/json"))
            {
                HttpResponseMessage result = await Http.PostAsync("/api/MintPostNFT", content);
                if (result.StatusCode == System.Net.HttpStatusCode.OK)
                {
                    var returnStr = await result.Content.ReadAsStringAsync();

                    if (returnStr != null)
                    {
                        NFTTxId = returnStr;
                        LastMintedTx = NFTTxId;
                        Minted = true;
                    }
                }
            }
        }

        MintingNFT = false;
        await InvokeAsync(StateHasChanged);
    }

}