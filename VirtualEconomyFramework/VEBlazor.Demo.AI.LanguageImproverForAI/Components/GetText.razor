@using Newtonsoft.Json
@using VEBlazor.Demo.AI.LanguageImproverForAI
@inject HttpClient Http
@inject AppDataService AppDataService
@inherits CommonComponentBase

<Row Flex="Flex.AlignItems.Center" Margin="Margin.Is3.FromTop">
    <Column>
        <Span>Create base text on topic of...</Span>
    </Column>
</Row>

<Row Flex="Flex.AlignItems.Center">
    <Column>
        <TextEdit Rows="1" Placeholder="@("example \"fishing\"...")" @bind-Text="BaseText" />
    </Column>
</Row>

<Row Flex="Flex.AlignItems.Center" Margin="Margin.Is2.FromTop">
    <Column>
        <Button Color="Color.Primary" Clicked="@CreateTextQuestion" Loading="@Loading" Block>Create base text with AI</Button>
    </Column>
</Row>

<Row Margin="Margin.Is4.FromTop">
    <Column Flex="Flex.JustifyContent.Center">
        <Heading Size="HeadingSize.Is4">Text by AI</Heading>
    </Column>
</Row>
<Row Margin="Margin.Is2.FromTop">
    <Column Flex="Flex.JustifyContent.Center">
        <Span><b>@TextByAI</b></Span>
    </Column>
</Row>
<Row Margin="Margin.Is2.FromTop">
    <Column Flex="Flex.JustifyContent.Center">
        <Heading Size="HeadingSize.Is4">Translation to Papiamento by AI</Heading>
    </Column>
</Row>
<Row Margin="Margin.Is2.FromTop">
    <Column Flex="Flex.JustifyContent.Center">
        <Span><b>@TranslationByAI</b></Span>
    </Column>
</Row>

<Modal @ref="wantsToContinueModalRef">
    <ModalContent Centered Size="ModalSize.ExtraLarge">
        <ModalHeader>
            <ModalTitle>Create new text</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Row>
                <Column>
                    You have not saved last item yet. Please save it first and then create new text.
                </Column>
            </Row>
            <Row>
                <Column>
                    If you still want to continue, please click to "Continue" button.
                </Column>
            </Row>
            <Row>
                <Column>
                    If you want to save your work first, please click to Cancel button and save item with button at the end of the page.
                </Column>
            </Row>
            <Row Flex="Flex.AlignItems.Center" Margin="Margin.Is2.FromTop">
                <Column>
                    <Button Color="Color.Primary" Clicked="@WantsCancel" Loading="@Loading" Block>Cancel</Button>
                </Column>
            </Row>
            <Row Flex="Flex.AlignItems.Center" Margin="Margin.Is2.FromTop">
                <Column>
                    <Button Color="Color.Primary" Clicked="@WantsContinue" Loading="@Loading" Block>Continue</Button>
                </Column>
            </Row>
        </ModalBody>
    </ModalContent>
</Modal>

@code {

    public class AIGetTextTranslateResponseDto
    {
        /// <summary>
        /// Result
        /// </summary>
        public bool result { get; set; } = false;
        /// <summary>
        /// Output text
        /// </summary>
        public string outputtext { get; set; } = string.Empty;
        /// <summary>
        /// Translation
        /// </summary>
        public string translation { get; set; } = string.Empty;
    }

    [Parameter] public EventCallback<(string, (string,string))> TextCreated { get; set; }

    [Parameter] public string BaseText { get; set; } = string.Empty;
    [Parameter] public bool IsLastSaved { get; set; } = false;

    private Modal? wantsToContinueModalRef;
    Markdown markdownRef;

    public string TextByAI { get; set; } = string.Empty;
    public string TranslationByAI { get; set; } = string.Empty;

    (bool, string) Result = (false, string.Empty);

    AdditionalInfo additionalInfo = new AdditionalInfo();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        additionalInfo = await AppDataService.GetAdditionalInfoAsync();
        if (string.IsNullOrEmpty(BaseText) && !string.IsNullOrEmpty(additionalInfo.OrigUserBaseText))
        {
            BaseText = additionalInfo.OrigUserBaseText;
            TextByAI = additionalInfo.OrigAIText;
            TranslationByAI = additionalInfo.OrigTranslation;
        }
    }

    public async Task LoadText(string text = "")
    {
        if (!string.IsNullOrEmpty(text))
        {
            BaseText = text;
            await markdownRef.SetValueAsync(text);
        }
    }

    async Task CreateTextQuestion()
    {
        if (IsLastSaved && string.IsNullOrEmpty(additionalInfo.UserTranslation)
                        && string.IsNullOrEmpty(additionalInfo.OrigTranslation)
                        && string.IsNullOrEmpty(additionalInfo.OrigAIText)
                        && string.IsNullOrEmpty(additionalInfo.UserVariation1)
                        && string.IsNullOrEmpty(additionalInfo.UserVariation2))
        {
            await CreateTextAction();
        }
        else if (!IsLastSaved && !string.IsNullOrEmpty(additionalInfo.UserTranslation)
                              && !string.IsNullOrEmpty(additionalInfo.OrigTranslation)
                              && !string.IsNullOrEmpty(additionalInfo.OrigAIText)
                              && !string.IsNullOrEmpty(additionalInfo.UserVariation1)
                              && !string.IsNullOrEmpty(additionalInfo.UserVariation2))
        {
            if (wantsToContinueModalRef != null)
                await wantsToContinueModalRef.Show();
        }
        else
        {
            await CreateTextAction();
        }
    }

    async Task WantsCancel()
    {
        if (wantsToContinueModalRef != null)
            await wantsToContinueModalRef.Hide();
    }

    async Task WantsContinue()
    {
        if (wantsToContinueModalRef != null)
            await wantsToContinueModalRef.Hide();
        await CreateTextAction();
    }

    async Task CreateTextAction()
    {
        await LoadingStatus(true);

        if (NotificationService != null)
            await NotificationService.Info("Creating text...", "AI's working");

        if (string.IsNullOrEmpty(BaseText))
            BaseText = "something what makes people happy";

        var baset = "Create short text about: " + BaseText.Replace("\"", "\\\"") + ". Output maximum two sentenses.";

        var obj = new
        {
            basetext = baset,
            tokens = 150,
            language = Language
        };

        var cnt = JsonConvert.SerializeObject(obj);

        using (var content = new StringContent(cnt, System.Text.Encoding.UTF8, "application/json"))
        {
            HttpResponseMessage result = await Http.PostAsync("/api/AIGetTextAndTranslation", content);
            if (result.StatusCode == System.Net.HttpStatusCode.OK)
            {
                string returnValue = await result.Content.ReadAsStringAsync();
                try
                {
                    var res = JsonConvert.DeserializeObject<AIGetTextTranslateResponseDto>(returnValue);

                    if (res.result)
                    {
                        TextByAI = res.outputtext;
                        TranslationByAI = res.translation;
                    }
                }
                catch(Exception ex) {}

                await TextCreated.InvokeAsync((BaseText, (TextByAI, TranslationByAI)));
            }
        }

        if (NotificationService != null)
        {
            if (!string.IsNullOrEmpty(TextByAI))
                await NotificationService.Success("Text has been created", "Success");
            else
                await NotificationService.Warning(Result.Item2, "Cannot create text.");
        }

        await LoadingStatus(false);
    }
}
