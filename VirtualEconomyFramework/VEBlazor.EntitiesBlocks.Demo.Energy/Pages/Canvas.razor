@page "/canvas"
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using Blazor.Extensions
@using System.Text.Json
@using VEBlazor.EntitiesBlocks.Demo.Energy.CanvasBlazor
@inject IJSRuntime JsRuntime



<Div id="canvasHolder" class="h-100 w-100" @onmousemove="OnMouseMove" @onmousedown="OnMouseDown" @onmouseup="OnMouseUp" @onwheel="OnWheel">
    <BECanvas Width="800" Height="800" @ref="canvasReference"  ></BECanvas>
</Div>
<img @ref="plusIcon" hidden src="images/add-circle.svg" alt="" />
@code {
    private Canvas2DContext context;
    private BECanvas canvasReference;
    private double deltaZ;
    private double mouseX;
    private double mouseY;
    private List<CanvasObject> canvasObjects;
    private ElementReference plusIcon;
    private int canvasWidth = 800;
    private int canvasHeight = 800;
    private float aspect = 1;

    [JSInvokable]
    public async Task ResizeInBlazor(double width, double height)
    {
        canvasWidth = (int)width;
        canvasHeight = (int)height;
        
        await RenderInBlazor(0);
    }

    [JSInvokable]
    public async ValueTask RenderInBlazor(float timeStamp)
    {
        
        double fps = 1.0 / (DateTime.Now - LastRender).TotalSeconds;
        LastRender = DateTime.Now;

        await context.BeginBatchAsync();
        await context.ClearRectAsync(0, 0, canvasWidth, canvasHeight);
        await context.SetFillStyleAsync("#D0D0D0");
        await context.FillRectAsync(0, 0, canvasWidth, canvasHeight);
        await context.SetFillStyleAsync("#360036");
        await context.SetFontAsync("16px consolas");
        await context.FillTextAsync($"FPS: {fps:0.000}", 10*aspect, 50*aspect);
        await context.FillTextAsync($"X: {mouseX}, Y: {mouseY}, Z: {deltaZ}", 10*aspect, 70*aspect);
        await context.SetStrokeStyleAsync("#FFFFFF");
    
        foreach (var canvasObject in canvasObjects)
        {
            var isHighlighted = await canvasObject.CheckHighlight(mouseX/aspect, mouseY/aspect);
            if (canvasObject.IsDragged)
            {
                canvasObject.Drag(mouseX/aspect, mouseY/aspect);
            }
            await canvasObject.Render(context, isHighlighted, aspect);
        }
        
        await context.EndBatchAsync();
    }

    public DateTime LastRender { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        context = await canvasReference.CreateCanvas2DAsync();
        
        if (firstRender)
        {
            canvasObjects = new List<CanvasObject>();
            canvasObjects.Add(new BlockCanvasObject() { X = 80, Y = 80, Height = 40, Width = 120 });
            canvasObjects.Add(new LinkCanvasObject(80 + 120, 80 + (40 - 28) / 2, 28, 28, plusIcon));
            
            //await RenderInBlazor(0);
            await JsRuntime.InvokeAsync<object>("initRenderJS", DotNetObjectReference.Create(this));
        }
    }

    protected override Task OnInitializedAsync()
    {

        return base.OnInitializedAsync();
    }

    

    private async Task OnMouseMove(MouseEventArgs obj)
    {
        mouseX = obj.OffsetX;
        mouseY = obj.OffsetY;
        
        foreach (var canvasObject in canvasObjects)
        {
            var isHighlighted = await canvasObject.CheckHighlight(mouseX/aspect, mouseY/aspect);
            if (isHighlighted && canvasObject is { IsMouseDown: true, IsDragged: false })
            {
                canvasObject.IsDragged = true;
                canvasObject.DragStartX = mouseX/aspect;
                canvasObject.DragStartY = mouseY/aspect;
            }
        }
        
        await RenderInBlazor(0);
    }


    private async Task OnWheel(WheelEventArgs arg)
    {
        Console.WriteLine(JsonSerializer.Serialize(arg));
        deltaZ = arg.DeltaY;
        switch (arg.DeltaY)
        {
            case > 0:
                aspect += 0.1f;
                break;
            case < 0:
                aspect -= 0.1f;
                break;
        }
        await RenderInBlazor(0);
    }
    
    

    
    
    

    private async Task OnMouseDown(MouseEventArgs arg)
    {
        foreach (var canvasObject in canvasObjects)
        {
            var isHighlighted = await canvasObject.CheckHighlight(mouseX, mouseY);
            canvasObject.IsMouseDown = true;
        }
    }

    private async Task OnMouseUp(MouseEventArgs arg)
    {
        foreach (var canvasObject in canvasObjects)
        {
            var isHighlighted = await canvasObject.CheckHighlight(mouseX, mouseY);
            canvasObject.IsMouseDown = false;
            if (canvasObject.IsDragged)
            {
                await canvasObject.DragStop();
                canvasObject.IsDragged = false;
            }
        }
        await RenderInBlazor(0);
    }

}