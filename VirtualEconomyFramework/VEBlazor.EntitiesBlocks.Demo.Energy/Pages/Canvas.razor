@page "/canvas"
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using Blazor.Extensions
@using System.Text.Json
@inject IJSRuntime JsRuntime

<img @ref="plusIcon" hidden src="images/add-circle.svg" alt="" />

<div id="canvasHolder" style="width: 100%; height: 100%" @onmousemove="OnMouseMove" @onmousedown="OnMouseDown" @onmouseup="OnMouseUp" @onwheel="OnWheel">
    <BECanvas Width="800" Height="800" @ref="canvasReference"  ></BECanvas>
</div>

@code {
    private Canvas2DContext context;
    private BECanvas canvasReference;
    private double deltaZ;
    private double mouseX;
    private double mouseY;
    private List<CanvasObject> canvasObjects;
    private ElementReference plusIcon;
    private int canvasWidth = 800;
    private int canvasHeight = 800;

    [JSInvokable]
    public async Task ResizeInBlazor(double width, double height)
    {
        canvasWidth = (int)width;
        canvasHeight = (int)height;
        
        await RenderInBlazor(0);
    }

    [JSInvokable]
    public async ValueTask RenderInBlazor(float timeStamp)
    {
        
        double fps = 1.0 / (DateTime.Now - LastRender).TotalSeconds;
        LastRender = DateTime.Now;

        await context.BeginBatchAsync();
        await context.ClearRectAsync(0, 0, canvasWidth, canvasHeight);
        await context.SetFillStyleAsync("#D0D0D0");
        await context.FillRectAsync(0, 0, canvasWidth, canvasHeight);
        await context.SetFillStyleAsync("#360036");
        await context.SetFontAsync("16px consolas");
        await context.FillTextAsync($"FPS: {fps:0.000}", 10, 50);
        await context.FillTextAsync($"X: {mouseX}, Y: {mouseY}, Z: {deltaZ}", 10, 70);
        await context.SetStrokeStyleAsync("#FFFFFF");
    
        foreach (var canvasObject in canvasObjects)
        {
            var isHighlighted = await canvasObject.CheckHighlight(mouseX, mouseY);
            if (canvasObject.IsDragged)
            {
                canvasObject.Drag(mouseX, mouseY);
            }
            await canvasObject.Render(context, isHighlighted);
        }
        
        await context.EndBatchAsync();
    }

    public DateTime LastRender { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        context = await canvasReference.CreateCanvas2DAsync();
        
        if (firstRender)
        {
            canvasObjects = new List<CanvasObject>();
            canvasObjects.Add(new BlockCanvasObject() { X = 80, Y = 80, Height = 40, Width = 120 });
            canvasObjects.Add(new LinkObject(80 + 120, 80 + (40 - 28) / 2, 28, 28, plusIcon));
            
            //await RenderInBlazor(0);
            await JsRuntime.InvokeAsync<object>("initRenderJS", DotNetObjectReference.Create(this));
        }
    }

    protected override Task OnInitializedAsync()
    {

        return base.OnInitializedAsync();
    }

    

    private async Task OnMouseMove(MouseEventArgs obj)
    {
        mouseX = obj.OffsetX;
        mouseY = obj.OffsetY;
        
        foreach (var canvasObject in canvasObjects)
        {
            var isHighlighted = await canvasObject.CheckHighlight(mouseX, mouseY);
            if (isHighlighted && canvasObject is { IsMouseDown: true, IsDragged: false })
            {
                canvasObject.IsDragged = true;
                canvasObject.DragStartX = mouseX;
                canvasObject.DragStartY = mouseY;
            }
        }
        
        await RenderInBlazor(0);
    }


    private async Task OnWheel(WheelEventArgs arg)
    {
         Console.WriteLine(JsonSerializer.Serialize(arg));
        deltaZ = arg.DeltaY;
        await RenderInBlazor(0);
    }
    
    public abstract class CanvasObject
    {
        public double X { get; set; }
        public double Y { get; set; }
        public double Width { get; set; }
        public double Height { get; set; }
        public bool IsMouseDown { get; set; }
        public bool IsDragged { get; set; }
        public double DragStartX { get; set; }
        public double DragStartY { get; set; }

        public abstract ValueTask Render(Canvas2DContext canvas2DContext, bool isHighlighted);
        public abstract ValueTask<bool> CheckHighlight(double mousePosX, double mousePosY);

        public abstract ValueTask Drag(double x, double y);

        public virtual ValueTask DragStop()
        {
            return ValueTask.CompletedTask;
        }
    }

    public class BlockCanvasObject
        : CanvasObject
    {
        public override async ValueTask Render(Canvas2DContext canvas2DContext, bool isHighlighted)
        {
            await canvas2DContext.SetFillStyleAsync("#FF8080");
            await canvas2DContext.SetFillStyleAsync("#FF8080");
            await canvas2DContext.FillRectAsync(X, Y, Width, Height);
            if (isHighlighted)
            {
                await canvas2DContext.SetLineWidthAsync(4);
                await canvas2DContext.SetStrokeStyleAsync("#000");
                await canvas2DContext.StrokeRectAsync(X, Y, Width, Height);
            }
        }

        public override ValueTask<bool> CheckHighlight(double mousePosX, double mousePosY)
        {
            return ValueTask.FromResult<bool>(mousePosX>=X && mousePosX<X+Width && mousePosY>=Y && mousePosY<Y+Height);
        }

        public override ValueTask Drag(double x, double y)
        {
            return ValueTask.CompletedTask;
        }
    }
    
    public class LinkObject
        : CanvasObject
    {
        private double dragCurrentX;
        private double dragCurrentY;

        public LinkObject(double x, double y, double width, double height, ElementReference image)
        {
            X = x;
            Y = y;
            Width = width;
            Height = height;
            Image = image;
        }
        public override async ValueTask Render(Canvas2DContext canvas2DContext, bool isHighlighted)
        {
            var x = X;
            var y = Y;
            if (IsDragged)
            {
                var offsetX = DragStartX - X;
                var offsetY = DragStartY - Y;
                x = dragCurrentX - offsetX;
                y = dragCurrentY - offsetY;
            }
            await canvas2DContext.SetLineDashOffsetAsync(5);
            await canvas2DContext.SetLineWidthAsync(2);
            await canvas2DContext.SetStrokeStyleAsync("#888");
            await canvas2DContext.BeginPathAsync();
            await canvas2DContext.MoveToAsync(X + Width / 2, Y + Height / 2);
            await canvas2DContext.LineToAsync(x + Width / 2, y + Height / 2);
            await canvas2DContext.StrokeAsync();
            await canvas2DContext.DrawImageAsync(Image, x, y, Width, Height);

            if (isHighlighted)
            {
                await canvas2DContext.SetFillStyleAsync("#808000");
                await canvas2DContext.FillRectAsync(X + 15, Y - 35, 75, 35);
                await canvas2DContext.SetStrokeStyleAsync("#000");
                await canvas2DContext.SetLineWidthAsync(0.5f);
                await canvas2DContext.SetLineJoinAsync(LineJoin.Round);

                await canvas2DContext.StrokeRectAsync(X + 15, Y - 35, 75, 35);
                await canvas2DContext.SetFillStyleAsync("#FFF");
                await canvas2DContext.SetFontAsync("12px consolas");
                await canvas2DContext.FillTextAsync($"Drag me", X + 20, Y - 15);
                
            }
        }

        public override ValueTask<bool> CheckHighlight(double mousePosX, double mousePosY)
        {
            return ValueTask.FromResult<bool>(mousePosX>=X && mousePosX<X+Width && mousePosY>=Y && mousePosY<Y+Height);
        }

        public override ValueTask Drag(double x, double y)
        {
            dragCurrentX = x;
            dragCurrentY = y;
            return ValueTask.CompletedTask;
        }

        public ElementReference Image { get; set; }
    }

    private async Task OnMouseDown(MouseEventArgs arg)
    {
        foreach (var canvasObject in canvasObjects)
        {
            var isHighlighted = await canvasObject.CheckHighlight(mouseX, mouseY);
            canvasObject.IsMouseDown = true;
        }
    }

    private async Task OnMouseUp(MouseEventArgs arg)
    {
        foreach (var canvasObject in canvasObjects)
        {
            var isHighlighted = await canvasObject.CheckHighlight(mouseX, mouseY);
            canvasObject.IsMouseDown = false;
            if (canvasObject.IsDragged)
            {
                await canvasObject.DragStop();
                canvasObject.IsDragged = false;
            }
        }
        await RenderInBlazor(0);
    }

}