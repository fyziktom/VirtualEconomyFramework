@using VEDriversLite.Common

@page "/pvesimulation"

@inject AppData AppData

<PageTitle>VE Energy - PVE Simulation</PageTitle>

<Row>
    <Column>
        <Row>
            <Column>
                <PVESimulationGraph @ref=graph />
            </Column>
        </Row>
        <Row>
            <Column>
                <PVEYearGraph @ref=ygraph />
            </Column>
        </Row>
    </Column>
    <Column ColumnSize="ColumnSize.IsThird">
        <Row>
            <Column>
                <PVEBlock @ref=pveblock />
            </Column>
        </Row>
    </Column>
</Row>


@code {
    PVEBlock? pveblock;
    PVESimulationGraph? graph;
    PVEYearGraph? ygraph;

    Coordinates coord = new Coordinates(49.194103, 16.608998);
    double panelAzimuthE = MathHelpers.DegreeToRadians(-40);
    double panelAzimuthS = MathHelpers.DegreeToRadians(0);
    double panelAzimuthW = MathHelpers.DegreeToRadians(40);
    string name = "mytest";
    int DurationInDays = 1;
    DateTime start = new DateTime(2022, 1, 1, 0, 0, 0);
    DateTime end = new DateTime(2022, 1, 2, 0, 0, 0);
    IEnumerable<(string,string)> groupIds = new List<(string,string)>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!AppData.PVESimulatorLoaded)
        {
            end = start.AddDays(DurationInDays);

            panelAzimuthE = MathHelpers.DegreeToRadians(-40);
            panelAzimuthS = MathHelpers.DegreeToRadians(0);
            panelAzimuthW = MathHelpers.DegreeToRadians(60);

            var eastPanelsId = AppData.PVEGrid.AddGroup("East");
            var southPanelsId = AppData.PVEGrid.AddGroup("South");
            var westPanelsId = AppData.PVEGrid.AddGroup("West");

            SetCommonPanel();
            // set template panel in this PVE
            AddPanelToGroup(eastPanelsId, panelAzimuthE, true, 3);
            AddPanelToGroup(southPanelsId, panelAzimuthS, true, 6);
            AddPanelToGroup(westPanelsId, panelAzimuthW, true, 8);

            groupIds = AppData.PVEGrid.PVPanelsGroups.Values.Where(p => p.Id != null).Select(p => (p.Id, p.Name));
            
            AppData.PVESimulatorLoaded = true;
            await InvokeAsync(StateHasChanged);
            await Task.Delay(1);

            if (pveblock != null)
                await pveblock.Reload();

            if (graph != null)
                await graph.LoadData(start, groupIds, coord);

            if (ygraph != null)
                await ygraph.LoadData(start, groupIds, coord, false);

            await InvokeAsync(StateHasChanged);
        }
        else 
        {
            groupIds = AppData.PVEGrid.PVPanelsGroups.Values.Where(p => p.Id != null).Select(p => (p.Id, p.Name));
            if (pveblock != null)
                await pveblock.Reload();

            if (graph != null)
                await graph.LoadData(start, groupIds, coord);

            if (ygraph != null)
                await ygraph.LoadData(start, groupIds, coord, false);

        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void SetCommonPanel()
    {
        if (AppData.PVEGrid != null)
            AppData.PVEGrid.SetCommonPanel("test", 0, MathHelpers.DegreeToRadians(23), 0.05 / 365, 1, 2000, 1000, coord, 0.3, Math.PI / 4);
    }

    private void AddPanelToGroup(string groupId, double azimuth = 0, bool setAzimuth = false, int count = 1)
    {
        SetCommonPanel();
        if (setAzimuth)
        {
            AppData.PVEGrid.CommonPanel.Azimuth = azimuth;
        }
        AppData.PVEGrid.AddPanelToGroup(groupId, AppData.PVEGrid.CommonPanel, count);

    }
}
