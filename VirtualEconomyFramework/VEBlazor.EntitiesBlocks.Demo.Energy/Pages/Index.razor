@page "/"

@inject AppData AppData
@inject HttpClient Http

<PageTitle>Index</PageTitle>

<Row Margin="Margin.Is2.FromTop">
    <Column ColumnSize="ColumnSize.Is12.OnMobile.Is2.OnTablet">
        <Tabs SelectedTab="@sidebarSelectedTab" SelectedTabChanged="@OnSidebarSelectedTabChanged">
            <Items>
                <Tab Name="tree">Tree</Tab>
                <Tab Name="backup">Backup</Tab>
            </Items>
            <Content>
                <TabPanel Name="tree">
                    <Row>
                        <Column>
                            <AddEntity Item="@Item" WithButton="true" />
                        </Column>
                        <Column>
                            <AddBlock Item="@Item" WithButton="true" />
                        </Column>
                    </Row>
                    <Row>
                        <Column>
                            <EntitiesTree @ref=entitiesTree ItemChanged="@OnItemChanged" DisplayRefreshButton="true" />
                        </Column>
                    </Row>
                </TabPanel>
                <TabPanel Name="backup">
                    <LoadAndBackup DataLoaded="@OnLoadData" />
                </TabPanel>
            </Content>
        </Tabs>
    </Column>
    <Column ColumnSize="ColumnSize.Is12.OnMobile.Is10.OnTablet">
        <Row>
            <Column>
                <Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
                    <Items>
                        <Tab Name="blockstimegraph">Blocks time Graph</Tab>
                        <Tab Name="balancetimegraph">Balance time Graph</Tab>
                        <Tab Name="blockslist">Blocks List</Tab>
                    </Items>
                    <Content>
                        <TabPanel Name="blockstimegraph">
                            <Row>
                                <Column>
                                    <BlocksTimeGraph @ref=blockTimeGraph />
                                </Column>
                            </Row>
                        </TabPanel>
                        <TabPanel Name="blockslist">
                            <Row>
                                <Column>
                                    <BlocksList @ref=blocksList OnClearAllBlocksFinished="@OnClearAllBlocksFinishedHandler" />
                                </Column>
                            </Row>
                        </TabPanel>
                        <TabPanel Name="balancetimegraph">
                            <Row>
                                <Column>
                                    <ConsumptionGraph @ref=graph Item="@Item" />
                                </Column>
                            </Row>
                        </TabPanel>
                    </Content>
                </Tabs>
            </Column>
        </Row>
    </Column>
</Row>

@code {
    public TreeItem Item { get; set; } = new TreeItem();

    ConsumptionGraph? graph;
    BlocksList? blocksList;
    BlocksTimeGraph? blockTimeGraph;
    EntitiesTree? entitiesTree;
    bool firstLoad = false;
    string selectedTab = "blockstimegraph";
    string sidebarSelectedTab = "tree";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstLoad)
        {
            AppData.RootItemId = "7b27c442-ad40-4679-b6d5-8873d9763996";
            AppData.RootItemName = "network";
            var storeddata = await Http.GetStringAsync("sampledata.json");
            if (storeddata != null)
                AppData.StoredConfig = storeddata;

            var res = AppData.EntitiesHandler.LoadFromConfig(AppData.StoredConfig);
            if (res.Item1)
            {
                if (entitiesTree != null)
                {
                    var item = await entitiesTree.LoadData(AppData.RootItemId);
                    if (item != null && item.Id != null)
                        Item = item;
                    if (blocksList != null)
                        await blocksList.Load(Item);

                    await LoadDetailsAndGraphs();
                    firstLoad = true;
                }
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private Task OnSelectedTabChanged(string name)
    {
        selectedTab = name;
        return Task.CompletedTask;
    }
    private Task OnSidebarSelectedTabChanged(string name)
    {
        sidebarSelectedTab = name;
        return Task.CompletedTask;
    }

    private async Task Refresh()
    {
        await InvokeAsync( StateHasChanged );
    }

    private async Task RefreshGraphWithConsumption()
    {
        if (Item != null && Item.Id != null && graph != null)
            await graph.LoadData(Item);
    }

    private async Task OnLoadData(string e)
    {
        if (entitiesTree != null)
        {
            var item = await entitiesTree.LoadDataBasedOnItemName(AppData.RootItemName);
            if (item != null)
            {
                Item = item;
                await LoadDetailsAndGraphs();

                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task RefreshDetailsAndGraphs()
    {
        if (blocksList != null && blockTimeGraph != null)
        {
            await blocksList.Refresh();
            await blockTimeGraph.Refresh();
            await RefreshGraphWithConsumption();
        }
    }

    private async Task LoadDetailsAndGraphs()
    {
        if (blocksList != null && blockTimeGraph != null)
        {
            await blocksList.Load(Item);
            await blockTimeGraph.Load(Item);
            await RefreshGraphWithConsumption();
        }
    }

    private async Task onBlockChangedHandler(IBlock block)
    {
        if (block != null)
            await LoadDetailsAndGraphs();
    }

    private async Task OnItemChanged(TreeItem item)
    {
        if (item != null && item.Id != null)
        {
            Item = item;
            await LoadDetailsAndGraphs();
        }
    }

    private async Task OnClearAllBlocksFinishedHandler(string e)
    {
        if (!string.IsNullOrEmpty(e))
            await LoadDetailsAndGraphs();
    }

}