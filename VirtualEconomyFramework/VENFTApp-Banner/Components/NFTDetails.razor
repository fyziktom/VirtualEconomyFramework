@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NeblioAPI
@using Newtonsoft.Json
@using Markdig

<div class="row">
    <div class="col">
        <Spin Tip="Loading..." Spinning="@loading">
            @if (!string.IsNullOrEmpty(NFT.NFTOriginTxId) && !string.IsNullOrEmpty(NFT.Utxo))
            {
                <div style="position: absolute;right: 5px;top: -20px;">
                    <a href="https://explorer.nebl.io/tx/@NFT.NFTOriginTxId" target="_blank">
                        <span class="badge badge-primary">Mint Info</span>
                    </a>
                    <a href="https://explorer.nebl.io/tx/@NFT.Utxo" target="_blank">
                        <span class="badge badge-secondary" style="margin-left:5px;">Tx Info</span>
                    </a>
                    <span class="badge badge-warning" style="margin-left:5px;">C: @NFT.TxDetails.Confirmations</span>
                </div>
            }
            <div class="row">
                <div class="col d-flex justify-content-center align-items-center">
                    <span>Name: @NFT.Name</span>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex justify-content-center align-items-center">
                    <span>Author: @NFT.Author</span>
                </div>
            </div>
            @if (!string.IsNullOrEmpty(NFT.Description))
            {
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex justify-content-center align-items-center">
                        <span>Description</span>
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <span style="width:100%;">@((MarkupString)NFTDescriptionMarkuptext)</span>
                    </div>
                </div>
            }
            @if (NFT.TagsList.Count > 0)
            {
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <span>Tags</span>
                    </div>
                </div>
                <div class="row d-flex justify-content-center align-items-center">
                    @foreach (var tag in NFT.TagsList)
                    {
                        <div class="col d-flex justify-content-center align-items-center w-auto">
                            <small>#@tag</small>
                        </div>
                    }
                </div>
            }
            @if ((NFT.Type == NFTTypes.Post && !string.IsNullOrEmpty(NFT.Text)) ||
            (NFT.Type == NFTTypes.Event && !string.IsNullOrEmpty(NFT.Text)))
            {
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <span>Text</span>
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <span style="max-width:100%;">@((MarkupString) NFTmarkuptext)</span>
                    </div>
                </div>
            }
            @if (NFT.Type == NFTTypes.Ticket)
            {
                var nft = NFT as TicketNFT;
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <span>Event Details</span>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex justify-content-center align-items-center">
                        <button class="btn btn-primary" @onclick="ShowEvent">Check Event NFT</button>
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <small>Date: @nft.EventDate.ToString()</small>
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <small>Location: @nft.Location</small>
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <a href="http://www.google.com/maps/place/@nft.LocationCoordinates" target="_blank">Location Link</a>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(nft.Seat))
                {
                    <div class="row">
                        <div class="col d-flex justify-content-center align-items-center">
                            <small>Seat: @nft.Seat</small>
                        </div>
                    </div>
                }
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <span>Ticket Type</span>
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        @switch (nft.TicketDuration)
                        {
                            case DurationOfNFTTicket.Day:
                                <span class="badge badge-secondary">1 Day</span>
                                break;
                            case DurationOfNFTTicket.TwoDays:
                                <span class="badge badge-primary">2 Days</span>
                                break;
                            case DurationOfNFTTicket.ThreeDays:
                                <span class="badge badge-success">3 Days</span>
                                break;
                            case DurationOfNFTTicket.FourDays:
                                <span class="badge badge-info">4 Days</span>
                                break;
                            case DurationOfNFTTicket.FiveDays:
                                <span class="badge badge-warning">5 Days</span>
                                break;
                        }
                        @switch (nft.TicketClass)
                        {
                            case ClassOfNFTTicket.Economy:
                                <span class="badge badge-secondary">Economy</span>
                                break;
                            case ClassOfNFTTicket.Standard:
                                <span class="badge badge-primary">Standard</span>
                                break;
                            case ClassOfNFTTicket.VIP:
                                <span class="badge badge-success">VIP</span>
                                break;
                            case ClassOfNFTTicket.VIPPlus:
                                <span class="badge badge-info">VIP+</span>
                                break;
                            case ClassOfNFTTicket.General:
                                <span class="badge badge-primary">General</span>
                                break;
                            case ClassOfNFTTicket.Family:
                                <span class="badge badge-warning">Family</span>
                                break;
                            case ClassOfNFTTicket.Children:
                                <span class="badge badge-warning">Children</span>
                                break;
                        }
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <a href="@nft.AuthorLink" target="_blank">Author Link</a>
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <a href="@nft.VideoLink" target="_blank">Video Link</a>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(NFT.Link) && NFT.Type != NFTTypes.Music)
                {
                    <div class="row">
                        <div class="col d-flex justify-content-center align-items-center">
                            <a href="@NFT.Link" target="_blank">Connected Link</a>
                        </div>
                    </div>
                }
                @if (nft.Used)
                {
                    <div class="row">
                        <div class="col d-flex justify-content-center align-items-center">
                            <span><b>This ticket is Used!</b></span>
                        </div>
                    </div>
                }
            }
            @if (NFT.Type == NFTTypes.Event)
            {
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <span>Event Details</span>
                    </div>
                </div>
                var nft = NFT as EventNFT;
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <small>Date: @nft.EventDate.ToString()</small>
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <small>Location: @nft.Location</small>
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <a href="http://www.google.com/maps/place/@nft.LocationCoordinates" target="_blank">Location Link</a>
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <a href="@nft.AuthorLink" target="_blank">Author Link</a>
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <a href="@nft.VideoLink" target="_blank">Video Link</a>
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <span>Event Type</span>
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        @switch (nft.EventClass)
                        {
                            case ClassOfNFTEvent.PersonalEvent:
                                <span class="badge badge-secondary">Personal</span>
                                break;
                            case ClassOfNFTEvent.Birthday:
                                <span class="badge badge-primary">Birthday</span>
                                break;
                            case ClassOfNFTEvent.Concert:
                                <span class="badge badge-success">Concert</span>
                                break;
                            case ClassOfNFTEvent.Festival:
                                <span class="badge badge-info">Festival</span>
                                break;
                            case ClassOfNFTEvent.PlaneFlight:
                                <span class="badge badge-warning">Plane Flight</span>
                                break;
                            case ClassOfNFTEvent.OnlineMeeting:
                                <span class="badge badge-light">e-Meeting</span>
                                break;
                        }
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(NFT.Link) && NFT.Type != NFTTypes.Music)
                {
                    <div class="row">
                        <div class="col d-flex justify-content-center align-items-center">
                            <a href="@NFT.Link" target="_blank">Connected Link</a>
                        </div>
                    </div>
                }
            }

            @if (!string.IsNullOrEmpty(NFT.Link) && NFT.Type != NFTTypes.Music && NFT.Type != NFTTypes.Ticket)
            {
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <a href="@NFT.Link" target="_blank">Connected Link</a>
                    </div>
                </div>
            }
            <div class="row" style="margin-top:20px;">
                <div class="col d-flex justify-content-center align-items-center">
                    <a href="@NFT.ImageLink" target="_blank">
                        @if (NFT.Type == NFTTypes.Ticket)
                        {
                            var tnft = NFT as TicketNFT;
                            @if (!string.IsNullOrEmpty(NFT.ImageLink))
                            {
                                @if (tnft.MusicInLink)
                                {
                                    <video controls="" autoplay="" name="media" title="@NFT.Name" style="min-height: 100px; max-height: 150px; width: auto; min-width: 150px; max-width: 250px;">
                                        <source src="@NFT.Link" type="audio/mpeg">
                                    </video>
                                }
                                else
                                {
                                    <img src="@NFT.ImageLink" style="min-height:50px; max-height:150px; width:auto; min-width:50px; max-width:250px;" />
                                }
                            }
                            else
                            {
                                <Spin Tip="Loading..." Spinning="true">
                                    <div style="width:100px; height:50px;"></div>
                                </Spin>
                            }
                        }
                        else if (NFT.Type == NFTTypes.Event)
                        {
                            var enft = NFT as EventNFT;
                            @if (!string.IsNullOrEmpty(NFT.ImageLink) || !string.IsNullOrEmpty(NFT.Link))
                            {
                                @if (enft.MusicInLink)
                                {
                                    <video controls="" autoplay="" name="media" title="@NFT.Name" style="min-height: 100px; max-height: 150px; width: auto; min-width: 150px; max-width: 250px;">
                                        <source src="@NFT.Link" type="audio/mpeg">
                                    </video>
                                }
                                else
                                {
                                    <img src="@NFT.ImageLink" style="min-height:50px; max-height:150px; width:auto; min-width:50px; max-width:250px;" />
                                }
                            }
                            else
                            {
                                <Spin Tip="Loading..." Spinning="true">
                                    <div style="width:100px; height:50px;"></div>
                                </Spin>
                            }
                        }
                        else if (NFT.Type == NFTTypes.Music)
                        {
                            @if (!string.IsNullOrEmpty(NFT.Link))
                            {
                                <video controls="" autoplay="" name="media" title="@NFT.Name" style="min-height: 100px; max-height: 150px; width: auto; min-width: 150px; max-width: 250px;">
                                    <source src="@NFT.Link" type="audio/mpeg">
                                </video>
                            }
                            else
                            {
                                <Spin Tip="Loading..." Spinning="true">
                                    <div style="width:100px; height:50px;"></div>
                                </Spin>
                            }
                        }
                        else
                        {
                            @if (!string.IsNullOrEmpty(NFT.ImageLink))
                            {
                                <img src="@NFT.ImageLink" style="min-height:50px; max-height:150px; width:auto;" />
                            }
                            else if (string.IsNullOrEmpty(NFT.ImageLink) && !NFT.IsLoaded)
                            {
                                <Spin Tip="Loading...">
                                    <NoImageLoaded />
                                </Spin>
                            }
                            else
                            {
                                <NoImageLoaded />
                            }
                        }
                    </a>
                </div>
            </div>
            @if (NFT.PriceActive)
            {
                <div class="col w-100 d-flex justify-content-center align-items-center">
                    <small class="text-muted">Setted Price: @NFT.Price NEBL</small> <img style="width: 12px;margin-left: 4px; margin-bottom:2px;" src="images/neblio-icon.png" />
                </div>
            }
            @if (NFT.DogePriceActive)
            {
                <div class="col w-100 d-flex justify-content-center align-items-center">
                    <small class="text-muted">Setted Price: @NFT.DogePrice DOGE</small> <img style="width: 12px;margin-left: 4px; margin-bottom:2px;" src="images/doge.jpg" />
                </div>
            }
            <NFTHistory Utxo="@NFT.Utxo" NftType="@NFT.Type" />
        </Spin>
    </div>
</div>

<Modal Title="Event Details"
       Visible="@eventNFTDetailsVisible"
       OnOk="@eventNFTDetailsClose"
       OnCancel="@eventNFTDetailsClose">
    <Spin Tip="Loading Event Data..." Spinning="@loadingEventData">
        @if (!string.IsNullOrEmpty(loadedEventNFT.Utxo))
        {
            <div class="row" style="margin-top:20px;">
                <div class="col d-flex justify-content-center align-items-center">
                    <NFT InputNFT="@loadedEventNFT" OwnNFT="false"/>
                </div>
            </div>
        }
        else
        {
            <div style="min-width:100px; min-height:50px;"></div>
        }
    </Spin>
</Modal>

@code {
    public string NFTmarkuptext => Markdown.ToHtml(NFT.Text);
    public string NFTDescriptionMarkuptext => Markdown.ToHtml(NFT.Description);

    private INFT NFT { get; set; } = new ImageNFT("");
    [Parameter]
    public INFT InputNFT
    {
        get => NFT;
        set
        {
            if (value != null && value.Utxo != NFT.Utxo && value.IsLoaded)
            {
                if (value.IsLoaded)
                {
                    LoadNFT(value);
                }
            }
        }
    }

    private string _utxo = string.Empty;
    [Parameter]
    public string Utxo
    {
        get => _utxo;
        set
        {
            if (!string.IsNullOrEmpty(value) && _utxo != value)
            {
                _utxo = value;
                //Load();
            }
        }
    }

    [Parameter]
    public bool OwnNFT { get; set; } = false;

    bool setPriceNFTDialogVisible = false;
    bool loading = false;
    bool copyTextButtonCoppied = false;

    string status = string.Empty;
    private string songName = string.Empty;

    INFT loadedEventNFT = new EventNFT("");
    bool eventNFTDetailsVisible = false;
    bool loadingEventData = false;


    protected override Task OnInitializedAsync()
    {
        //if (!string.IsNullOrEmpty(_utxo))
            //Load();
        return base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (NFT.Type == NFTTypes.Music && !string.IsNullOrEmpty(NFT.Name) && NFT.Name != songName)
        {
            songName = NFT.Name;
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task Load()
    {
        loading = true;
        StateHasChanged();
        NFT.TxDataRefreshed -= TxDataRefreshedHandler;
        await NFT.StopRefreshingData();
        if (NFT.Type != NFTTypes.Music)
            NFT = await NFTFactory.GetNFT(NFTHelpers.TokenId, _utxo);
        else
            NFT = await NFTFactory.GetNFT(NFTHelpers.TokenId, _utxo, 0, 0, true);

        if (NFT == null)
            return;

        await NFT.StartRefreshingTxData();
        NFT.TxDataRefreshed += TxDataRefreshedHandler;
        loading = false;
        StateHasChanged();
    }

    private async Task LoadNFT(INFT nft)
    {
        loading = true;
        StateHasChanged();
        if (!string.IsNullOrEmpty(NFT.Utxo))
        {
            NFT.TxDataRefreshed -= TxDataRefreshedHandler;
            await NFT.StopRefreshingData();
        }

        NFT = await NFTFactory.CloneNFT(nft);
        if (NFT == null)
            return;

        NFT.TxDataRefreshed += TxDataRefreshedHandler;
        await NFT.StartRefreshingTxData();
        loading = false;
        StateHasChanged();
    }

    private async Task ShowEvent(MouseEventArgs e)
    {
        if (NFT.Type != NFTTypes.Ticket)
            return;
        var nft = NFT as TicketNFT;
        eventNFTDetailsVisible = true;
        loadingEventData = true;
        StateHasChanged();

        loadedEventNFT = await NFTHelpers.FindEventOnTheAddress(nft.EventAddress, nft.EventId);
        loadingEventData = false;
        if (loadedEventNFT == null)
        {
            loadedEventNFT = new EventNFT("");
            eventNFTDetailsVisible = false;
        }
        StateHasChanged();
    }

    private void eventNFTDetailsClose(MouseEventArgs e)
    {
        eventNFTDetailsVisible = false;
    }

    private void TxDataRefreshedHandler(object sender, GetTransactionInfoResponse info)
    {
        StateHasChanged();
    }
}
