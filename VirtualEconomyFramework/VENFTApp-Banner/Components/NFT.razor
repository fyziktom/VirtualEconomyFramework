@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NFT.DevicesNFTs
@using VEDriversLite.NFT.Coruzant

<div class="card" style="margin-left:10px; margin-top:10px;min-width:250px; width:250px; max-width:250px; min-height:400px; max-height:600px;">
    <div class="card-header" style="padding: 0px;">
        <div class="row" style="max-width: 250px;height:200px;margin: 0px;">
            <div class="col d-flex justify-content-center align-items-center" style="padding: 0px;">
                @switch (nft.Type)
                {
                    case NFTTypes.Image:
                        @if (!string.IsNullOrEmpty(nft.ImageLink))
                        {
                            <img src="@nft.ImageLink" @onclick="async () => await OpenModalWithImage(nft.ImageLink)" style="max-height:200px; max-width:250px;" />
                        }
                        else if (string.IsNullOrEmpty(nft.ImageLink) && !nft.IsLoaded)
                        {
                            <Spin Tip="Loading..." Style="min-width:50px;">
                                <NoImageLoaded />
                            </Spin>
                        }
                        else
                        {
                            <NoImageLoaded />
                        }
                        break;
                    case NFTTypes.Profile:
                        @if (!string.IsNullOrEmpty(nft.ImageLink))
                        {
                            <img src="@nft.ImageLink" @onclick="async () => await OpenModalWithImage(nft.ImageLink)" style="max-height:200px; max-width:250px;" />
                        }
                        else
                        {
                            <NoImageLoaded />
                        }
                        break;
                    case NFTTypes.Ticket:
                        var tnft = nft as TicketNFT;
                        @if (!string.IsNullOrEmpty(nft.ImageLink) || !string.IsNullOrEmpty(nft.Link))
                        {
                            @if (tnft.MusicInLink)
                            {
                                <video name="media" style="max-width:250px; width:250px; max-height:200px; margin-bottom:70px;" controls>
                                    <source src="@nft.Link" type="audio/mpeg" autostart="false">
                                </video>
                            }
                            else
                            {
                                @if (!string.IsNullOrEmpty(nft.ImageLink))
                                {
                                    <img src="@nft.ImageLink" @onclick="async () => await OpenModalWithImage(nft.ImageLink)" style="max-height:200px; max-width:250px;" />
                                }
                            }
                        }
                        else
                        {
                            <NoImageLoaded />
                        }
                        break;
                    case NFTTypes.Event:
                        var enft = nft as EventNFT;
                        @if (!string.IsNullOrEmpty(nft.ImageLink) || !string.IsNullOrEmpty(nft.Link))
                        {
                            @if (enft.MusicInLink)
                            {
                                <video name="media" style="max-width:250px; width:250px; max-height:200px; margin-bottom:70px;" controls>
                                    <source src="@nft.Link" type="audio/mpeg" autostart="false">
                                </video>
                            }
                            else
                            {
                                @if (!string.IsNullOrEmpty(nft.ImageLink))
                                {
                                    <img src="@nft.ImageLink" @onclick="async () => await OpenModalWithImage(nft.ImageLink)" style="max-height:200px; max-width:250px;" />
                                }
                            }
                        }
                        else
                        {
                            <NoImageLoaded />
                        }
                        break;
                    case NFTTypes.Post:
                        @if (!string.IsNullOrEmpty(nft.ImageLink))
                        {
                            <img src="@nft.ImageLink" @onclick="async () => await OpenModalWithImage(nft.ImageLink)" style="max-height:200px; max-width:250px;" />
                        }
                        else if (string.IsNullOrEmpty(nft.ImageLink) && !nft.IsLoaded)
                        {
                            <Spin Tip="Loading..." Style="min-width:50px;">
                                <NoImageLoaded />
                            </Spin>
                        }
                        else
                        {
                            <NoImageLoaded />
                        }
                        break;
                    case NFTTypes.Music:
                        @if (!string.IsNullOrEmpty(nft.Link))
                        {
                            <video name="media" style="max-width:250px; width:250px; max-height:200px; margin-bottom:70px;" controls>
                                <source src="@nft.Link" type="audio/mpeg" autostart="false">
                            </video>
                        }
                        else if (!string.IsNullOrEmpty(nft.ImageLink) && string.IsNullOrEmpty(nft.Link))
                        {
                            <video name="media" style="max-width:250px; width:250px; margin-bottom:70px;" controls>
                                <source src="@nft.Link" type="audio/mpeg" autostart="false">
                            </video>
                        }
                        break;
                }
            </div>
        </div>
    </div>

    <div class="card-body d-flex justify-content-center align-items-end">
        @if (nft.TokenId == NFTHelpers.TokenId)
        {
            <span class="badge badge-warning" style="position: absolute;right: 200px;top: 207px;">VENFT</span>
        }
        else if (nft.TokenId == CoruzantNFTHelpers.CoruzantTokenId)
        {
            <span class="badge badge-primary" style="position: absolute;right: 190px;top: 207px;">Coruzant</span>
        }
        else if (nft.TokenId == HardwarioNFTHelpers.TokenId)
        {
            <span class="badge badge-danger" style="position: absolute;right: 200px;top: 207px;">HIT</span>
        }
        <div style="position: absolute;right: 7px;top: 207px; padding:0px; margin:0px;">
            @if (nft.Type == NFTTypes.Ticket)
            {
                var tnft = nft as TicketNFT;
                @switch (tnft.TicketDuration)
                {
                    case DurationOfNFTTicket.Day:
                        <span class="badge badge-secondary">1 Day</span>
                        break;
                    case DurationOfNFTTicket.TwoDays:
                        <span class="badge badge-primary">2 Days</span>
                        break;
                    case DurationOfNFTTicket.ThreeDays:
                        <span class="badge badge-success">3 Days</span>
                        break;
                    case DurationOfNFTTicket.FourDays:
                        <span class="badge badge-info">4 Days</span>
                        break;
                    case DurationOfNFTTicket.FiveDays:
                        <span class="badge badge-warning">5 Days</span>
                        break;
                }
                @switch (tnft.TicketClass)
                {
                    case ClassOfNFTTicket.Economy:
                        <span class="badge badge-secondary">Economy</span>
                        break;
                    case ClassOfNFTTicket.Standard:
                        <span class="badge badge-primary">Standard</span>
                        break;
                    case ClassOfNFTTicket.VIP:
                        <span class="badge badge-success">VIP</span>
                        break;
                    case ClassOfNFTTicket.VIPPlus:
                        <span class="badge badge-info">VIP+</span>
                        break;
                    case ClassOfNFTTicket.General:
                        <span class="badge badge-primary">General</span>
                        break;
                    case ClassOfNFTTicket.Family:
                        <span class="badge badge-warning">Family</span>
                        break;
                    case ClassOfNFTTicket.Children:
                        <span class="badge badge-warning">Children</span>
                        break;
                }
            }
            else if (nft.Type == NFTTypes.Event)
            {
                var enft = nft as EventNFT;
                @switch (enft.EventClass)
                {
                    case ClassOfNFTEvent.PersonalEvent:
                        <span class="badge badge-secondary">Personal</span>
                        break;
                    case ClassOfNFTEvent.Birthday:
                        <span class="badge badge-primary">Birthday</span>
                        break;
                    case ClassOfNFTEvent.Concert:
                        <span class="badge badge-success">Concert</span>
                        break;
                    case ClassOfNFTEvent.Festival:
                        <span class="badge badge-info">Festival</span>
                        break;
                    case ClassOfNFTEvent.PlaneFlight:
                        <span class="badge badge-warning">Plane Flight</span>
                        break;
                    case ClassOfNFTEvent.OnlineMeeting:
                        <span class="badge badge-light">e-Meeting</span>
                        break;
                }
            }
            @switch (nft.Type)
            {
                case NFTTypes.Image:
                    <span class="badge badge-primary">Image</span>
                    break;
                case NFTTypes.Ticket:
                    <span class="badge badge-secondary">Ticket</span>
                    break;
                case NFTTypes.Event:
                    <span class="badge badge-success">Event</span>
                    break;
                case NFTTypes.Post:
                    <span class="badge badge-info">Post</span>
                    break;
                case NFTTypes.Music:
                    <span class="badge badge-warning">Music</span>
                    break;
            }
        </div>

        <div class="row" style="margin: 0px;">
            <div class="col" style="padding: 0px;">
                <div class="row text-center" style="margin: 0px;">
                    <div class="col text-center" style="padding: 0px;">
                        @if (nft.Name.Length > 20)
                        {
                            <h6 class="text-center">@nft.Name.Substring(0, 19) ...</h6>
                        }
                        else
                        {
                            <h6 class="text-center">@nft.Name</h6>
                        }
                    </div>
                </div>
                <div class="row text-center" style="margin: 0px;">
                    <div class="col text-center" style="padding: 0px;">
                        @if (!string.IsNullOrEmpty(nft.Description))
                        {
                            @if (nft.Author.Length > 30)
                            {
                                <small class="text-center">@nft.Author.Substring(0, 29) ...</small>
                            }
                            else
                            {
                                <small class="text-center">@nft.Author</small>
                            }
                        }
                    </div>
                </div>
                <div class="row text-center" style="margin: 0px;">
                    <div class="col text-center" style="padding: 0px;">
                        @if (nft.Description.Length > 80)
                        {
                            <small>@nft.Description.Substring(0, 79) ...</small>
                        }
                        else
                        {
                            <small>@nft.Description</small>
                        }
                    </div>

                </div>
            </div>
        </div>
    </div>

    <div class="card-footer d-flex justify-content-center align-items-center">
        <small class="text-muted">
            <div class="row">
                <div class="col d-flex justify-content-center align-items-center">
                    <button class="btn btn-primary" @onclick="async () => ShowNFTDetails(nft.Utxo)" style="width: 50px;height: 25px;padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;font-size: 12px;">
                        <i class="oi oi-info" style="font-size:12px;"></i>
                    </button>
                </div>
                @if (nft.Price > 0)
                {
                    <div class="col d-flex w-auto" style="margin-left:15px;">
                        <a class="btn btn-primary" href="@shareBuyNFTUtxo" target="_blank" style="width: 40px;height: 25px;padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;font-size: 12px;">
                            <i class="oi oi-dollar" style="font-size:12px;"></i>
                        </a>
                    </div>
                }
            </div>
        </small>
    </div>
</div>

<Modal Title="NFT Details"
       Visible="@nftDetailsVisible"
       OnCancel="@CloseNFTDetails"
       Footer="null">
    <NFTDetails Utxo="@nftDetailsUtxo" OwnNFT="@OwnNFT" InputNFT="@nft" />
</Modal>

<Modal Title="NFT Image"
       Style="min-height:200px; min-width:200px;"
       Visible="@modalWithImageVisible"
       OnCancel="@modalWithImageClose"
       Footer="null">
    <div class="row">
        <div class="col d-flex justify-content-center align-items-center">
            <img class="card-img-top" src="@modalWithImageLink" style="min-height:100px; height:auto; min-width:200px; width:auto;" />
        </div>
    </div>
</Modal>

@code {

    string nftDetailsUtxo = string.Empty;
    bool nftDetailsVisible = false;

    string modalWithImageLink = string.Empty;
    string shareBuyNFTUtxo = string.Empty;
    bool modalWithImageVisible = false;

    [Parameter]
    public bool HideButtons { get; set; } = false;

    [Parameter]
    public EventCallback<string> NFTSent { get; set; }

    private INFT nft = new ImageNFT("");
    [Parameter]
    public INFT InputNFT
    {
        get => nft;
        set
        {
            if (value != null && value.Utxo != nft.Utxo)
            {
                nft = value;
                shareBuyNFTUtxo = "https://ve-nft.com/buynft?utxo=" + nft.Utxo + "&index=" + nft.UtxoIndex;
                StateHasChanged();
            }
        }
    }

    string _address = string.Empty;
    [Parameter]
    public string Address
    {
        get => _address;
        set
        {
            if (!string.IsNullOrEmpty(value))
            {
                _address = value;
            }
        }
    }

    [Parameter]
    public bool OwnNFT { get; set; } = false;

    void NFTSentHandler(string nfttx)
    {
        nftDetailsVisible = false;
        NFTSent.InvokeAsync(nfttx);
    }


    private async Task CloseNFTDetails(MouseEventArgs e)
    {
        await nft.StopRefreshingData();
        nftDetailsVisible = false;
    }

    private async Task ShowNFTDetails(string utxo)
    {
        nftDetailsUtxo = utxo;
        nftDetailsVisible = true;
    }

    public async Task OpenModalWithImage(string url)
    {
        modalWithImageVisible = true;
        modalWithImageLink = url;
    }

    public async Task modalWithImageClose(MouseEventArgs e)
    {
        modalWithImageVisible = false;
    }
}
