@using Newtonsoft.Json
@using Markdig
@inject HttpClient Http
@inherits CommonComponentBase

<Row Flex="Flex.AlignItems.Center">
    <Column>
        <Span>@Intro</Span>
    </Column>
</Row>

<Row Flex="Flex.AlignItems.Center" Margin="Margin.Is3.FromTop">
    <Column>
        <Span>@FieldTitle</Span>
    </Column>
</Row>

<Row Flex="Flex.AlignItems.Center">
    <Column>
        <TextEdit Placeholder="@Hint" @bind-Text="BaseText" />
        
    </Column>
</Row>
<Row Flex="Flex.AlignItems.Center" Margin="Margin.Is2.FromTop">
    <Column>
        <Button Color="Color.Primary" Clicked="@CreateTextAction" Loading="@Loading" Block>@ButtonCaptionText</Button>
    </Column>
</Row>

<Row Flex="Flex.AlignItems.Center" Margin="Margin.Is2.FromTop">
    <Column>
        <Heading Size="HeadingSize.Is4">@LessonTitle</Heading>
    </Column>
</Row>

<Row Flex="Flex.AlignItems.Center" Margin="Margin.Is2.FromTop">
    <Column>
        <Span>@((MarkupString)NFTTextMarkuptext)</Span>
    </Column>
</Row>

    @code {

    public string Intro
    {
        get
        {
            if (Language == Languages.en2es)
                return "Please, fill the basic info of what the lesson should be about.";
            if (Language == Languages.cz2es)
                return "Vyplňte prosím základní info o čem chcete mít lekci španělštiny.";
            if (Language == Languages.de2es)
                return "Bitte füllen Sie die grundlegenden Informationen darüber aus, welche Art von Spanisch-Lektion Sie wünschen möchten.";

            return "Please, fill the basic info of what the lesson should be about.";
        }
    }

    public string FieldTitle
    {
        get
        {
            if (Language == Languages.en2es)
                return "Create lesson of spanish about...";
            if (Language == Languages.cz2es)
                return "Vytvoř lekci španělštiny o ...";
            if (Language == Languages.de2es)
                return "Erstelle eine Spanisch-Lektion über ...";

            return "Create lesson of spanish about...";
        }
    }

    public string Hint
    {
        get
        {
            if (Language == Languages.en2es)
                return "continue with what the lesson should be about...";
            if (Language == Languages.cz2es)
                return "pokračujte tím o čem by měla lekce být...";
            if (Language == Languages.de2es)
                return "das Thema, das Sie gerne in der Spanisch-Lektion behandelt hätten...";

            return "continue with what the lesson should be about...";
        }
    }

    public string ButtonCaption
    {
        get
        {
            if (Language == Languages.en2es)
                return "Create Lesson with AI";
            if (Language == Languages.cz2es)
                return "Vytvoř lekci pomocí AI";
            if (Language == Languages.de2es)
                return "Erstelle eine Lektion mit Hilfe von AI.";

            return "Create Lesson with AI";
        }
    }

    public string ButtonCaptionText
    {
        get
        {
            if (Language == Languages.en2es)
                return "Create Lesson with AI";
            if (Language == Languages.cz2es)
                return "Vytvoř lekci pomocí AI";
            if (Language == Languages.de2es)
                return "Erstelle eine Lektion mit Hilfe von AI.";

            return "Create Lesson with AI";
        }
    }

    public string LessonTitle
    {
        get
        {
            if (Language == Languages.en2es)
                return "Spanish Lesson";
            if (Language == Languages.cz2es)
                return "Lekce Španělštiny";
            if (Language == Languages.de2es)
                return "Spanisch-Lektion";

            return "Spanish Lesson";
        }
    }

    public enum PostLength
    {
        Tiny = 100,
        Short = 250,
        Medium = 500,
        Long = 750
    }

    [Inject] INotificationService? NotificationService { get; set; }
    [Inject] protected IJSRuntime? JS { get; set; } = null;

    [Parameter] public EventCallback<(string,string)> TextCreated { get; set; }

    [Parameter] public string BaseText { get; set; } = string.Empty;

    private Modal? CreateTextModal;

    public string TextByAI { get; set; } = string.Empty;
    (bool, string) Result = (false, string.Empty);
    PostLength postLength = PostLength.Medium;

    public string NFTTextMarkuptext => Markdig.Markdown.ToHtml(TextByAI, new MarkdownPipelineBuilder().UseAdvancedExtensions().Build());


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (this.JS is not null)
        {
            if (firstRender)
                await this.JS.InvokeVoidAsync("veblazor.MermaidInitialize");

            await this.JS.InvokeVoidAsync("veblazor.MermaidRender");
        }
    }

    async Task CreateTextAction()
    {
        await LoadingStatus(true);

        if (NotificationService != null)
        {
            if (Language == Languages.en2es)
                await NotificationService.Info("Creating text...", "AI's working");
            else if (Language == Languages.de2es)
                await NotificationService.Info("Erstelle Text...", "AI arbeitet");
            else
                await NotificationService.Info("Vytvářím text...", "AI pracuje");
        }

        var baset = "Vytvoř Česko-Španělskou lekci pro výuku španělštiny na téma " + BaseText.Replace("\"", "\\\"") + ". Prosím o vzorová slovíčka i věty v obou jazycích. Výstup bude Markdown."; ;

        if (Language == Languages.en2es)
            baset = "Create English to Spanish lesson for learning spanish language on topic " + BaseText.Replace("\"", "\\\"") + ". Please add example vocabularies and sentenses in both languages. Output will be Markdown.";
        else if (Language == Languages.de2es)
            baset = "Bitte erstellen Sie eine Deutsch-Spanisch-Lektion zum Thema " + BaseText.Replace("\"", "\\\"") + ". Bitte fügen Sie Vokabeln und Sätze in beiden Sprachen hinzu. Die Ausgabe erfolgt in Markdown.";
        
        using (var content = new StringContent("{ \"basetext\": \"" + baset + "\"}", System.Text.Encoding.UTF8, "application/json"))
        {
            HttpResponseMessage result = await Http.PostAsync("/api/AIGetText", content);
            if (result.StatusCode == System.Net.HttpStatusCode.OK)
            {
                string returnValue = await result.Content.ReadAsStringAsync();
                if (returnValue != null)
                    TextByAI = returnValue;

                await TextCreated.InvokeAsync((BaseText, TextByAI));
            }
        }

        if (NotificationService != null)
        {
            if (Language == Languages.cz2es)
            {
                if (!string.IsNullOrEmpty(TextByAI))
                    await NotificationService.Success("Text byl vytvořen.", "Úspěch");
                else
                    await NotificationService.Warning(Result.Item2, "Nemůžu vytvořit text.");
            }
            else if (Language == Languages.de2es)
            {
                if (!string.IsNullOrEmpty(TextByAI))
                    await NotificationService.Success("Der Text wurde erstellt.", "Erfolg");
                else
                    await NotificationService.Warning(Result.Item2, "Der Text kann nicht erstellt werden.");
            }
            else
            {
                if (!string.IsNullOrEmpty(TextByAI))
                    await NotificationService.Success("The text has been created.", "Success");
                else
                    await NotificationService.Warning(Result.Item2, "Cannot create the text.");
            }

        }

        await LoadingStatus(false);
    }
}
