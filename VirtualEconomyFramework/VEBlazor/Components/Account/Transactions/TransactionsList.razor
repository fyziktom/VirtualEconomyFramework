@inject AppData AppData
@inject TransactionsService TransactionsService
@inherits NFTComponentBase

@if ( TransactionsDetails == null )
{
    <Heading Size="HeadingSize.Is5"> No transaction found. </Heading>
}
else
{
    <Heading Size="HeadingSize.Is5">Number Of Transactions: @Transactions.Count</Heading>

    @if ( TransactionsDetails.Count > 0 )
    {
        @foreach ( var tx in TransactionsDetails )
        {
            <Row>
                <Column Flex="Flex.JustifyContent.Center.AlignContent.Center" ColumnSize="ColumnSize.Is1">
                    @if ( tx.Way == TxWay.In )
                    {
                        <Icon Name="IconName.ArrowUp" TextColor="TextColor.Success" />
                    }
                    else if ( tx.Way == TxWay.Out )
                    {
                        <Icon Name="IconName.ArrowDown" TextColor="TextColor.Danger" />
                    }
                </Column>
                <Column>
                    <Field>
                        <FieldLabel>Receiver</FieldLabel>
                        <Span Display="Display.InlineBlock.OnMobile.None.OnTablet">
                            @(tx.Receiver.Length > 8 ? tx.Receiver.Substring(0,8) + "..." : tx.Receiver)
                        </Span>
                        <Span Display="Display.None.OnMobile.InlineBlock.OnTablet.InlineBlock.OnDesktop.None.OnFullHD">
                            @(tx.Receiver.Length > 15 ? tx.Receiver.Substring(0,15) + "..." : tx.Receiver)
                        </Span>
                        <Span Display="Display.None.OnMobile.InlineBlock.OnFullHD">
                            @(tx.Receiver.Length > 30 ? tx.Receiver.Substring(0,30) + "..." : tx.Receiver)
                        </Span>
                        <FieldHelp>@tx.Time</FieldHelp>
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is2">
                    <Button Color="Color.Light" Size="Size.Small" Clicked="(e) => ShowTxDetails(tx)" Float="Float.End">
                        <Icon Name="IconName.Info" Margin="Margin.Is1.FromEnd" /><Span Display="Display.None.OnMobile.InlineBlock.OnTablet">Details</Span>
                    </Button>
                </Column>
            </Row>
        }
        <Row>
            <Column Flex="Flex.JustifyContent.Center">
                <Pagination>
                    <PaginationItem Disabled="@IsPageNavigationDisabled(PREVIOUS)" @onclick="Previous">
                        <PaginationLink>
                            <span aria-hidden="true">«</span>
                        </PaginationLink>
                    </PaginationItem>
                    @{
                        for ( var i = 1; i <= pageItems; i++ )
                        {
                            var pageNumberAsString = i.ToString();
                            <PaginationItem @key="pageNumberAsString" Active="@IsActive(pageNumberAsString)">
                                <PaginationLink Page="@pageNumberAsString" Clicked="SetActive">
                                    @pageNumberAsString
                                </PaginationLink>
                            </PaginationItem>
                        }
                    }
                    <PaginationItem Disabled="@IsPageNavigationDisabled(NEXT)" @onclick="Next">
                        <PaginationLink>
                            <span aria-hidden="true">»</span>
                        </PaginationLink>
                    </PaginationItem>
                </Pagination>
            </Column>
        </Row>
    }
}

<TransactionDetails @ref="TxDetailsComponent" />

@code {

    private TransactionDetails? TxDetailsComponent;

    private int PerPage { get; set; } = 10;
    private int Offset { get; set; } = 0;

    private string txDetailsTxId = string.Empty;

    private List<string> Transactions = new List<string>();
    private List<TxDetails> TransactionsDetails = new List<TxDetails>();

    private const string PREVIOUS = "previous";
    private const string NEXT = "next";
    private string currentPage = "1";
    private int pageItems = 5;

    private bool IsActive( string page )
        => currentPage == page;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Load();
    }

    private async Task Load()
    {
        Transactions = await LoadTransactions( IsSubAccount );
        var pit = (double)Transactions.Count / PerPage + ( Transactions.Count % PerPage > 0 ? 1 : 0 );
        if (pit > 5) pit = 5;
        pageItems = Convert.ToInt32( pit > 1 ? pit : 1 );
        TransactionsDetails = await LoadTxDetails();
        StateHasChanged();
    }

    private Task<List<String>> LoadTransactions( bool subAccount )
    {
        return TransactionsService.LoadTransactions( Address, AppData.Account, subAccount );
    }

    private async Task<List<TxDetails>> LoadTxDetails()
    {
        List<TxDetails> txDetails = new List<TxDetails>();
        foreach ( string txid in Transactions.Skip( Offset * PerPage ).Take( PerPage ) )
        {
            if ( txid != null )
            {
                var details = await TransactionsService.LoadTxDetails( txid, AppData.Account );
                txDetails.Add( details );
            }
        }
        return txDetails;
    }

    private async Task ShowTxDetails( TxDetails details )
    {
        txDetailsTxId = details.Info.Txid;
        if (TxDetailsComponent != null)
            await TxDetailsComponent.ShowDetails( details );
    }

    // Pagination section
    private async Task HandlePaginationChanged( int offset )
    {
        Offset = offset;
        TransactionsDetails = await LoadTxDetails();
        StateHasChanged();
    }

    private bool IsPageNavigationDisabled( string navigation )
    {
        if ( navigation.Equals( PREVIOUS ) )
        {
            return currentPage.Equals( "1" );
        }
        else if ( navigation.Equals( NEXT ) )
        {
            return currentPage.Equals( pageItems.ToString() );
        }
        return false;
    }

    private async Task Previous()
    {
        var currentPageAsInt = int.Parse( currentPage );
        if ( currentPageAsInt > 1 )
        {
            currentPage = ( currentPageAsInt - 1 ).ToString();
            await HandlePaginationChanged( Offset - 1 );
        }
    }

    private async Task Next()
    {
        var currentPageAsInt = int.Parse( currentPage );
        if ( currentPageAsInt < pageItems )
        {
            currentPage = ( currentPageAsInt + 1 ).ToString();
            await HandlePaginationChanged( Offset + 1 );
        }
    }

    private async void SetActive( string page )
    {
        currentPage = page;
        await HandlePaginationChanged( int.Parse( page ) - 1 );
    }
}
