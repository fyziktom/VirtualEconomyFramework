@using System.IO;
@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.Neblio
@using VEDriversLite.NeblioAPI
@inject AppData AppData

@if (DisplayButton)
{
    <Button Color="Color.Primary" Clicked="@showNewSubAccountModal" Block>Create new SubAccount</Button>
}

<Modal @ref="newSubAccountModalRef">
    <ModalContent Size="  ModalSize.Default">
        <ModalHeader>
            <ModalTitle>Add New SubAccount</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Row Margin="Margin.Is2.FromTop">
                <Column>
                    <Field>
                        <FieldLabel>Input SubAccount Name</FieldLabel>
                        <TextEdit @bind-Text="@newSubAccountName" Placeholder="Input any name" MaxLength="30" />
                    </Field>
                </Column>
            </Row>
            @if (AppData.Account.TotalSpendableBalance > AppData.DefaultAirdropMain && AppData.Account.SourceTokensBalance > AppData.DefaultAirdropTokens)
            {
                <Row Margin="Margin.Is2.FromTop">
                    <Column>
                        <Field>
                            <FieldLabel>Send Airdrop</FieldLabel>
                            <FieldBody>
                                <Check @bind-Checked="sendInitPayment" />
                            </FieldBody>
                            <FieldHelp>Keep checked if you want to send initial Airdrop of @AppData.DefaultAirdropMain NEBL and @AppData.DefaultAirdropTokens VENFT tokens on new SubAccount.</FieldHelp>
                        </Field>
                    </Column>
                </Row>
            }
            @if (!string.IsNullOrEmpty(newSubAccountName))
            {
                <Button Color="Color.Primary" Clicked="@addSubAccount" Loading="@loading" Block>Create new SubAccount</Button>
            }
            else
            {
                <Field>
                    <FieldBody>
                        <Button Color="Color.Secondary" Clicked="@addSubAccount" Disabled Block>Create new SubAccount</Button>
                    </FieldBody>
                    <FieldHelp>Fill the name first please.</FieldHelp>
                </Field>
            }
        </ModalBody>
    </ModalContent>
</Modal>

@code {
    [Inject] INotificationService? NotificationService { get; set; }

    [Parameter]
    public EventCallback<string> NewAddressCreated { get; set; }
    [Parameter]
    public bool DisplayButton { get; set; } = true; 

    private string newSubAccountName = string.Empty;
    private bool sendInitPayment = true;
    private bool loading = false;

    Modal? newSubAccountModalRef;

    public async Task showNewSubAccountModal(MouseEventArgs e)
    {
        if (newSubAccountModalRef != null)
            await newSubAccountModalRef.Show();
    }
    public async Task addSubAccountCancel(MouseEventArgs e)
    {
        if (newSubAccountModalRef != null)
            await newSubAccountModalRef.Hide();
    }

    public async Task addSubAccount()
    {
        try
        {
            loading = true;
            if (NotificationService != null)
                await NotificationService.Info("Creating SubAccount...", "Working");

            var res = await AppData.Account.AddSubAccount(newSubAccountName, sendInitPayment, AppData.DefaultAirdropMain, true, AppData.DefaultAirdropTokens, AppData.AppTokenId);
            await Task.Delay(50);
            if (res.Item1)
            {
                await AppData.MigrateSubAccountsToDb(res.Item2);

                var add = await AppData.Account.GetSubAccountAddressByName(newSubAccountName);
                if (add.Item1)
                {
                    await NewAddressCreated.InvokeAsync(add.Item2);
                    if (NotificationService != null)
                        await NotificationService.Success("Sub Account Created...", "Created");

                }
                else
                {
                    if (NotificationService != null)
                        await NotificationService.Error("Cannot create SubAccount... " + add.Item2, "Error");

                }
            }
        }
        finally
        {
            loading = false;
            if (newSubAccountModalRef != null)
                await newSubAccountModalRef.Hide();
        }
    }

}

