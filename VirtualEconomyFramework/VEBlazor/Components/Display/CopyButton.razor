@inject IJSRuntime JSRuntime

@if (!copyTextButtonCoppied)
{
    <Button Color="@ColorOfButton" @onclick="copyCodeToClipboard" Block>@ButtonText</Button>
}
else
{
    <Button Color="@ColorOfButton" @onclick="copyCodeToClipboard" Block>Copied <Icon Name="IconName.Check" /></Button>
}

@code {

    [Parameter]
    public string TextToCopy
    {
        get => textToCopy;
        set => textToCopy = value;
    }
    [Parameter]
    public string ButtonText { get; set; } = "Copy";

    [Parameter]
    public Color ColorOfButton { get; set; } = Color.Light;

    private string textToCopy = string.Empty;
    private bool copyTextButtonCoppied = false;

    private async Task copyCodeToClipboard(MouseEventArgs e)
    {
        if (string.IsNullOrEmpty(textToCopy))
            return;

        await JSRuntime.InvokeVoidAsync("veblazor.copyToClipboard", textToCopy);
        await copyCodeToClipboardButtonTextEfect();
    }

    private async Task copyCodeToClipboardButtonTextEfect()
    {
        copyTextButtonCoppied = true;
        StateHasChanged();
        await Task.Delay(1000);
        copyTextButtonCoppied = false;
        StateHasChanged();
    }
}
