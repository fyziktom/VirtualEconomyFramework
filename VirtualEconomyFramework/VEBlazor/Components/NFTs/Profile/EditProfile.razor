@using VEDriversLite.NFT
@inject AppData AppData
@inherits NFTComponentBase

<Modal @ref="modalRef">
    <ModalContent Centered Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>Edit Profile</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Row>
                <Column>
                    <Field>
                        <FieldLabel>First Name</FieldLabel>
                        <FieldBody>
                            <TextEdit Placeholder="Enter your First Name" @bind-Text="NFT.Name" @onchange="nameChanged" />
                        </FieldBody>
                    </Field>
                    <Field>
                        <FieldLabel>Surname</FieldLabel>
                        <FieldBody>
                            <TextEdit Placeholder="Enter your Surame" @bind-Text="@((NFT as ProfileNFT).Surname)" @onchange="surnameChanged" />
                        </FieldBody>
                    </Field>
                    <Field>
                        <FieldLabel>Nickname</FieldLabel>
                        <FieldBody>
                            <TextEdit Placeholder="Enter your Nickname" @bind-Text="@((NFT as ProfileNFT).Nickname)" @onchange="nicknameChanged" />
                        </FieldBody>
                    </Field>
                    <Field>
                        <FieldLabel>Bio</FieldLabel>
                        <FieldBody>
                            <MemoEdit Placeholder="Enter your Bio" Rows="7" @bind-Text="@((NFT as ProfileNFT).Description)" @onchange="descriptionChanged" />
                        </FieldBody>
                    </Field>
                </Column>
                <Column>
                    @if ( !string.IsNullOrEmpty( @NFT.ImageLink ) )
                    {
                        <Row>
                            <Column>
                                <Figure Size="FigureSize.Is128x128">
                                    <FigureImage Source="@NFT.ImageLink" AlternateText="empty-128x128" />
                                    <FigureCaption>Original Image</FigureCaption>
                                </Figure>
                            </Column>
                        </Row>
                    }
                    <Row Margin="Margin.Is3.FromTop">
                        <Column>
                            <UploadData NFT="@NFT" NFTChanged="@NFTChangedHandler" Multiple="true" SmallThumbnails="true"/>
                        </Column>
                    </Row>
                </Column>
            </Row>
            <Row Margin="Margin.Is3.FromTop">
                <Column>
                    @if (!mintingChanges)
                    {
                        @if ( minted )
                        {
                            <Alert Color="Color.Success">
                                <Icon Name="IconName.Check" />
                                <Span>Profile successfully saved! TxId: @result</Span>
                            </Alert>
                        }
                        if ( mintError )
                        {
                            <Alert Color="Color.Danger">
                                <Icon Name="IconName.Ban" />
                                <Span>Cannot save! Error: @result</Span>
                            </Alert>
                        }
                    }
                </Column>
            </Row>         
            
            <NotificationAlert />
        </ModalBody>
        <ModalFooter>
            <Button Loading="@mintingChanges" Color="Color.Light" Clicked="@MintProfile">
                <Icon Name="IconName.Edit" Margin="Margin.Is1.FromStart.Is2.FromEnd" />
                Save
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>


@code {
    Modal? modalRef;

    [Inject] INotificationService? NotificationService { get; set; }

    [Inject] IPageProgressService? PageProgressService { get; set; }

    bool mintingChanges = false;
    bool minted = false;
    string result = string.Empty;
    bool mintError = false;

    public async Task Show()
    {
        mintError = false;
        minted = false;
        if (modalRef != null)
            await modalRef.Show();
    }
    
    async Task nameChanged( ChangeEventArgs e )
    {
        if (e == null || e.Value == null) return;
        
        NFT.Name = (string)e.Value;
        await NFTChanged.InvokeAsync( NFT );
    }
    async Task surnameChanged( ChangeEventArgs e )
    {
        if (e == null || e.Value == null) return;        
        
        ( NFT as ProfileNFT ).Surname = (string)e.Value;
        await NFTChanged.InvokeAsync( NFT );
    }
    async Task nicknameChanged( ChangeEventArgs e )
    {
        if (e == null || e.Value == null) return;

        ( NFT as ProfileNFT ).Nickname = (string)e.Value;
        await NFTChanged.InvokeAsync( NFT );
    }
    async Task descriptionChanged( ChangeEventArgs e )
    {
        if (e == null || e.Value == null) return;        

        NFT.Description = (string)e.Value;
        await NFTChanged.InvokeAsync( NFT );
    }
    void NFTChangedHandler( INFT e )
    {
        if ( e is null )
            return;
            
        NFT = e;
        NFTChanged.InvokeAsync( NFT );
    }
    async Task MintProfile()
    {
        mintError = false;
        mintingChanges = true;
        if (PageProgressService != null)
            await PageProgressService.Go( null, options => { options.Color = Color.Primary; } );
            
        if (NotificationService != null)
            await NotificationService.Info( "Sending data...", "Sending" );
              
        await InvokeAsync( StateHasChanged );
        
        if ( AppData.Account.TokensSupplies.TryGetValue( AppData.AppTokenId, out var supply ) )
        {
            if ( supply.Amount > 3 )
                NFT.TokenId = AppData.AppTokenId;
            else
                NFT.TokenId = NFTHelpers.TokenId;
        }
        else
        {
            NFT.TokenId = NFTHelpers.TokenId;
        }
            
        var res = (false, string.Empty);
        if ( string.IsNullOrEmpty( NFT.Utxo ) )
            res = await AppData.Account.MintNFT( NFT );
        else
            res = await AppData.Account.ChangeNFT( NFT );

        minted = res.Item1;
        result = res.Item2;
        
        if (NotificationService != null)
        {
            if (res.Item1)
                await NotificationService.Success( "Sent Successfull.", "Send success" );
            else
                await NotificationService.Warning( res.Item2, "Cannot sent" );
        }
        if ( res.Item1 )
        {
            Console.WriteLine( "Profile saved. Txid: " + result );
            
            await InvokeAsync(StateHasChanged);
            await Task.Delay(2000); //to let read success message in modal before hide
            
            NFT.Utxo = result;
            await NFTChanged.InvokeAsync( NFT );            
            if (modalRef != null)
                await modalRef.Hide();
        }
        else
        {
            mintError = true;
            Console.WriteLine( "Cannot mint the profile: " + result );
        }

        if (PageProgressService != null)
            await PageProgressService.Go( -1 );
        mintingChanges = false;
        await InvokeAsync(StateHasChanged);
    }
}
