@using VEDriversLite
@using VEDriversLite.NFT
@inject AppData AppData
@inherits NFTDetailsBase;

@if ( NFT != null && NFT.Type == NFTTypes.Ticket )
{
    var nft = NFT as TicketNFT;
    if (nft != null)
    {
        <NFTDetails @ref="NFTDetailsComponent"
                Address="@Address" 
                IsSubAccount="@IsSubAccount" 
                IsOwnNFT="IsOwnNFT" 
                NFT="@NFT" 
                NFTSent="@NFTSentHandler" 
                OpenNFTsInWorkTab="@OpenNFTInWorkTabHandler"
                HideOpenInWorkTabButton="@HideOpenInWorkTabButton"
                SpecificInfoHeading="Ticket Details">
        <Field>
            <FieldLabel>Location</FieldLabel>
            <Text>@nft.Location</Text>
        </Field>

        @if (!string.IsNullOrEmpty(nft.LocationCoordinates))
        {
            var link = "http://www.google.com/maps/place/" + nft.LocationCoordinates;
            <Field>
                <FieldLabel>Location Coordinates</FieldLabel>
                <Text>@nft.LocationCoordinates</Text>
                <FieldHelp>
                    <a href="@("http://www.google.com/maps/place/" + nft.LocationCoordinates)" target="_blank">Open the location link</a>
                </FieldHelp>
            </Field>
        }
        <Field>
            <FieldLabel>Date Time</FieldLabel>
            <Text>@nft.EventDate</Text>
        </Field>
        @if (!string.IsNullOrEmpty(nft.AuthorLink))
        {
            <Field>
                <FieldLabel>Link</FieldLabel> 
                <a href="@nft.AuthorLink" target="_blank">@nft.AuthorLink</a>
            </Field>
        }
        <Field>
            <FieldLabel>Class</FieldLabel>
            <Text>@(Enum.GetName(typeof(ClassOfNFTTicket), nft.TicketClass))</Text>
        </Field>
        <Field>
            <FieldLabel>Duration</FieldLabel>
            <Text>@(Enum.GetName(typeof(DurationOfNFTTicket), nft.TicketDuration))</Text>
        </Field>
        @if (!string.IsNullOrEmpty(nft.AuthorLink))
        {
            <Field>
                <FieldLabel>Mint Author Address</FieldLabel>
                <Text>@nft.MintAuthorAddress</Text>
            </Field>
        }
        <Field>
            <FieldLabel>Is Used Status?</FieldLabel>
            <Text>@(nft.Used ? "Ticket Is used" : "Ticket is not used.")</Text>
        </Field>
        @if (!(NFT as TicketNFT).Used)
        {
            <Row Margin="Margin.Is2.FromTop.Is1.FromBottom">
                <Column>
                     <Button Color="Color.Primary" Clicked="@showUseTicket" Block>Use Ticket</Button>  
                         <UseTicket @ref="useTicketRef"
                                    NFT="@NFT" 
                                    Address="@Address" 
                                    IsOwnNFT="@IsOwnNFT" 
                                    IsSubAccount="@IsSubAccount" 
                                    NFTSent="@NFTSentHandler" />    
                </Column>                
            </Row>
        }
        </NFTDetails>
    }
    
}

@code {
    UseTicket? useTicketRef;

    async Task showUseTicket()
    {
        if (useTicketRef != null)
        {
            useTicketRef.ShowSaveNFTModal();
        }
    }
}