@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NFT.Imaging.Xray
@using Markdig
@inject AppData AppData
@inherits NFTComponentBase;

@if ( NFT != null && NFT.Type == NFTTypes.XrayImage )
{
    <Modal @ref="NFTDetailsModal">
        <ModalContent Centered Size="ModalSize.Large">
            <ModalHeader>
                <ModalTitle>@NFT.Name - Details</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                <Row>
                    <Column>
                        <Card Margin="Margin.Is4.FromBottom">
                            <CardBody>
                                <CardTitle Size="5">Basic Info</CardTitle>
                                <Row> 
                                    <Column> 
                                        <PanzoomImage Source="@GetImageUrl()" /> 
                                    </Column> 
                                </Row> 
                                <CardText Margin="Margin.Is2.FromTop">
                                    @NFT.Description
                                </CardText>
                                <Row Margin="Margin.Is2.FromTop" Flex="Flex.AlignContent.Center">
                                    <Column>
                                    @foreach ( var tag in NFT.TagsList )
                                    {
                                        <Badge Color="Color.Light" Margin="Margin.Is1.FromEnd">#@tag</Badge>
                                    }
                                    </Column>                                    
                                </Row>
                                <Row Margin="Margin.Is2.FromTop"> 
                                    <Column> 
                                        <CopyButton TextToCopy="@($"https://test.basedataplace.com/gallery?utxo={NFT.Utxo}:{NFT.UtxoIndex}")" ButtonText="Copy Share Link" /> 
                                    </Column> 
                                </Row>
                            </CardBody>
                        </Card>
                    </Column>
                    <Column>
                        <Card Margin="Margin.Is4.FromBottom">
                            <CardBody>
                                <CardTitle Size="5">Xray Parameters</CardTitle>
                                <CardText>
                                    <XrayParamsValues XrayParams="nft.XrayParams" />
                                </CardText>
                            </CardBody>
                        </Card>
                        @if ( !string.IsNullOrEmpty( NFT.Text ) )
                        {
                            <Card Margin="Margin.Is4.FromBottom">
                                <CardBody>
                                    <CardTitle Size="5">Description</CardTitle>
                                    <CardText>
                                        <Span>@((MarkupString)NFTTextMarkuptext)</Span>
                                    </CardText>
                                </CardBody>
                            </Card>
                        }
                        <Card Margin="Margin.Is4.FromBottom">
                            <CardBody>
                                <CardTitle Size="5">Actions</CardTitle>
                                @if (!HideOpenInWorkTabButton)
                                {                                
                                <Row>
                                    <Column>
                                        <Button Color="Color.Primary" Clicked=@OpenNFTInWorkTab Block>
                                            <Icon Name="IconName.FolderOpen" />
                                            Open In Work Tab
                                        </Button>
                                    </Column>
                                </Row>
                                }
                                @if (IsOwnNFT && AppData.IsAccountLoaded) 
                                { 
                                    <Row Margin="Margin.Is3.FromTop"> 
                                        <Column> 
                                            <Button Color="Color.Primary" Clicked=@SendNFT Block> 
                                                <Icon Name="IconName.Mail" /> 
                                                Send 
                                            </Button> 
                                        </Column> 
                                        <Column> 
                                            <Button Color="Color.Danger" Clicked=@DestroyNFT Block> 
                                                <Icon Name="IconName.Delete" /> 
                                                Destroy 
                                            </Button> 
                                        </Column> 
                                    </Row> 
                                } 
                            </CardBody>
                        </Card>
                        
                 <Card Margin="Margin.Is4.FromBottom"> 
                    <CardBody> 
                        <CardTitle Size="5">Storage Info</CardTitle> 
                        <CardText Margin="Margin.Is2.FromTop"> 
                            Image IPFS Storage info: 
                        </CardText> 
                        <Row Margin="Margin.Is2.FromTop"> 
                            <Column> 
                                <CopyButton TextToCopy="@NFT.ImageLink" ButtonText="Copy IPFS Link" /> 
                            </Column> 
                            <Column> 
                                <CopyButton TextToCopy="@(NFTHelpers.GetHashFromIPFSLink(NFT.ImageLink))" ButtonText="Copy IPFS Hash" /> 
                            </Column> 
                        </Row> 
                        <Row Margin="Margin.Is2.FromTop"> 
                            <Column> 
                                <Button Color="Color.Light" Type="ButtonType.Link" To="@NFT.ImageLink" Target="Target.Blank" Block>Open Image Link</Button> 
                            </Column> 
                        </Row> 
                         
                        <CardText Margin="Margin.Is2.FromTop"> 
                            Blockchain Storage transaction info: 
                        </CardText> 
                        <Row Margin="Margin.Is2.FromTop"> 
                            <Column> 
                                <CopyButton TextToCopy="@($"{NFT.Utxo}:{NFT.UtxoIndex}")" ButtonText="Copy Tx Hash" /> 
                            </Column> 
                            <Column> 
                                <Button Color="Color.Light" Type="ButtonType.Link" To="@($"https://explorer.nebl.io/tx/{NFT.Utxo}")" Target="Target.Blank" Block>To Explorer</Button> 
                            </Column> 
                        </Row>                          
                    </CardBody> 
                </Card> 
                    </Column>
                </Row>
            </ModalBody>
        </ModalContent>
    </Modal>
}

<DestroyNFT @ref=DestroyNFTModalComponent
            NFT="@NFT"
            Address="@Address"
            IsSubAccount="@IsSubAccount"
            NFTSent="NFTDestroyedHandler" />
<SendNFT @ref=SendNFTModalComponent
         NFT="@NFT"
         Address="@Address"
         IsSubAccount="@IsSubAccount"
         NFTSent="NFTSendHandler" />

@code {
    private Modal? NFTDetailsModal;
    private DestroyNFT? DestroyNFTModalComponent;
    private SendNFT? SendNFTModalComponent;

    private Panzoom? _panzoom;    

    public XrayImageNFT? nft { get => ( NFT.Type == NFTTypes.XrayImage ) ? ( NFT as XrayImageNFT ) : ( new XrayImageNFT( "" ) ); }


    [Parameter]
    public bool HideOpenInWorkTabButton { get; set; } = false;

    public string NFTTextMarkuptext => Markdig.Markdown.ToHtml( NFT.Text );

    public bool ShowNFTDetails()
    {
        if ( NFT == null )
            return false;

        NFTDetailsModal?.Show();
        return true;
    }
    public bool HideNFTDetails()
    {
        NFTDetailsModal?.Hide();
        return true;
    }

    async Task OpenNFTInWorkTab()
    {
        if ( NFT == null )
            return;
        await OpenNFTsInWorkTab.InvokeAsync( new List<INFT>() { NFT } );
    }

    void SendNFT()
    {
        if ( NFT == null )
            return;
        SendNFTModalComponent?.ShowSendNFTModal();
    }

    void DestroyNFT()
    {
        if ( NFT == null )
            return;
        DestroyNFTModalComponent?.ShowDestroyNFTModal();
    }
    public async Task NFTSendHandler( NFTSentResultDto e )
    {
        SendNFTModalComponent?.HideSendNFTModal();
        await NFTSent.InvokeAsync( e );
    }
    public async Task NFTDestroyedHandler( NFTSentResultDto e )
    {
        DestroyNFTModalComponent?.HideDestroyNFTModal();
        await NFTSent.InvokeAsync( e );
    }

}
