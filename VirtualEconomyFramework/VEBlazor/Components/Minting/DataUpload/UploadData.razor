@using System.IO
@using VEDriversLite.NFT

<Card Margin="Margin.Is4.FromBottom" Shadow="Shadow.Small">
    <CardBody>
       <CardTitle>
           Upload the Image
        </CardTitle>
        <Alert Color="Color.Info" Visible>
            <AlertDescription>
                You can upload any image file such as <Strong>PNG, BMP, JPEG</Strong>, but we recommend you to use the PNG format.
            </AlertDescription>
        </Alert>
        <Row Flex="Flex.AlignItems.Center">
            <Column>
                <Row>
                    <Column>
                        <Validations @ref="@validationsRef" Mode="ValidationMode.Manual">
                            <Validation Validator="ImageValidator">
                                <Field>
                                    <FieldLabel>Please select the image.</FieldLabel>
                                    <FieldBody>
                                        <FileUpload Started="@OnImageUploadStarted" Uploaded="@OnImageUploadEnded" ValidationsRef="@validationsRef" />
                                    </FieldBody>
                                </Field>
                            </Validation>
                        </Validations>
                    </Column>
                </Row>
                @if ( uploadingImage )
                {
                    <Row>
                        <Column>
                            <Span>Uploading the image...</Span>
                        </Column>
                    </Row>
                }
                @if ( !string.IsNullOrEmpty( ImageDataString ) )
                {
                    <Row>
                        <Column Flex="Flex.JustifyContent.Center">
                            <Figure Size="FigureSize.Is256x256">
                                <FigureImage Source="@ImageDataString" AlternateText="empty-256x256" />
                                <FigureCaption TextAlignment="TextAlignment.Center">Uploaded New Image</FigureCaption>
                            </Figure>
                        </Column>
                    </Row>
                    <Row>
                        <Column>
                            <Alert Color="Color.Success">Image loaded!</Alert>
                        </Column>
                    </Row>
                    <Row>
                        <Column>
                            <IPFSUpload @ref="@ipfsUploadRef" Started="@OnIPFSUploadStarted" Uploaded="@OnIPFSUploadEnded" ValidationsRef="@validationsRef" />
                        </Column>
                    </Row>
                }
            </Column>
        </Row>
    </CardBody>
</Card>


@code {
    Validations? validationsRef;
    IPFSUpload? ipfsUploadRef;

    [Parameter] public string MainIPFSLink { get; set; } = string.Empty;

    [Parameter] public EventCallback<string> MainIPFSLinkChanged { get; set; }

    [Parameter] public string PreviewIPFSLink { get; set; } = string.Empty;

    [Parameter] public EventCallback<string> PreviewIPFSLinkChanged { get; set; }

    [Parameter] public EventCallback<string> OnPropsChanged { get; set; }
    //[Parameter] public EventCallback<byte[]> OnImageDataLoaded { get; set; }

    string ImageDataString = string.Empty;
    bool uploadingImage = false;
    bool uploadingToIPFS = false;
    bool uploadFinished = false;
    string fileName = string.Empty;
    byte[] imageData = new byte[0];

    Task OnImageUploadStarted()
    {
        uploadingImage = true;

        return InvokeAsync( StateHasChanged );
    }

    public async Task LoadImage(string link, string previewlink = "", byte[] _imageData = null)
    {
        if (!string.IsNullOrEmpty(link) || _imageData?.Length > 0)
        {
            byte[] imd = null;          
            if (_imageData == null || _imageData.Length == 0)
                imd = await NFTHelpers.IPFSDownloadFromInfuraAsync(NFTHelpers.GetHashFromIPFSLink(link));
            else if (_imageData.Length > 0)
                imd = _imageData;
                
            if (imd != null)
            {
                //await OnImageDataLoaded.InvokeAsync(imd);
                ImageDataString = "data:image;base64," + Convert.ToBase64String( imd );
                this.imageData = imd;
                uploadFinished = true;
                StateHasChanged();
                await Task.Delay(1);
                
                if (ipfsUploadRef != null)
                    await ipfsUploadRef.LoadIPFSLink(link);
                await InvokeAsync( StateHasChanged );
            }
        }
    }

    async Task OnImageUploadEnded( string fileName, byte[] data )
    {
        uploadingImage = false;

        this.fileName = fileName;
        this.imageData = data;
        ImageDataString = "data:image;base64," + Convert.ToBase64String( imageData );

        await InvokeAsync( StateHasChanged );

        if ( ipfsUploadRef != null )
            await ipfsUploadRef.UploadToIPFS( fileName, imageData );

        await OnPropsChanged.InvokeAsync();
    }

    Task OnIPFSUploadStarted()
    {
        uploadingToIPFS = true;

        return InvokeAsync( StateHasChanged );
    }

    async Task OnIPFSUploadEnded( string mainIPFSLink )
    {
        uploadingToIPFS = false;

        MainIPFSLink = mainIPFSLink;
        await MainIPFSLinkChanged.InvokeAsync( MainIPFSLink );
    }

    void ImageValidator( ValidatorEventArgs e )
    {
        if ( !string.IsNullOrEmpty( ImageDataString ) )
            e.Status = ValidationStatus.Success;
        else
            e.Status = ValidationStatus.Error;
    }

    public Task<bool> IsValidated()
    {
        if (validationsRef != null)
            return validationsRef.ValidateAll();
        else
            return Task.FromResult(false);
    }
}
