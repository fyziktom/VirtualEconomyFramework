@using System.IO
@using VEDriversLite.NFT
@using VEDriversLite.NFT.Dto
@inherits NFTComponentBase
@inject AppData AppData

<Card Margin="Margin.Is4.FromBottom" Shadow="Shadow.Small">
    <CardBody>
       <CardTitle>
           Upload the Image
        </CardTitle>
        <Alert Color="Color.Info" Visible>
            <AlertDescription>
                You can upload any image file such as <Strong>PNG, BMP, JPEG</Strong>, but we recommend you to use the PNG format.
            </AlertDescription>
        </Alert>
        <Row Flex="Flex.AlignItems.Center">
            <Column>
                <Row>
                    <Column>
                        <Validations @ref="@validationsRef" Mode="ValidationMode.Manual">
                            <Validation Validator="ImageValidator">
                                <Field>
                                    <FieldLabel>Please select the image.</FieldLabel>
                                    <FieldBody>
                                        <FileUpload Started="@OnImageUploadStarted" Uploaded="@OnImageUploadEnded" ValidationsRef="@validationsRef" Multiple="@Multiple" Filter="@Filter" />
                                    </FieldBody>
                                </Field>
                            </Validation>
                        </Validations>
                    </Column>
                </Row>
                @if (uploadingImage)
                {
                    <Row>
                        <Column>
                            <Span>Uploading the image...</Span>
                        </Column>
                    </Row>
                }
                    <Row Margin="Margin.Is2.FromTop">
                        <Column>
                            @if (itemType == DataItemType.Image)
                            {
                                <Figure Size="@(SmallThumbnails ? FigureSize.Is64x64 : FigureSize.Is256x256)">
                                    <FigureImage Source="@ImageDataString" AlternateText="empty-256x256" />
                                    <FigureCaption TextAlignment="TextAlignment.Center">Last Uploaded Image</FigureCaption>
                                 </Figure>
                            }
                            else if (itemType == DataItemType.PDF)
                            {
                                <Figure Size="@(SmallThumbnails ? FigureSize.Is64x64 : FigureSize.Is256x256)">
                                    <FigureImage Source="_content/VEBlazor/images/pdf-image.png" AlternateText="empty-256x256" />
                                    <FigureCaption TextAlignment="TextAlignment.Center">Uploaded New PDF Document: @fileName</FigureCaption>
                                 </Figure>
                            }
                        </Column>
                    </Row>

                    <Row>
                        <Column>
                            <Alert Color="Color.Success">File loaded!</Alert>
                        </Column>
                    </Row>
                    <Row>
                        <Column>
                            <IPFSUpload @ref="@ipfsUploadRef" Started="@OnIPFSUploadStarted" Uploaded="@OnIPFSUploadEnded" ValidationsRef="@validationsRef" />
                        </Column>
                    </Row>
                    <Row Margin="Margin.Is2.FromTop">
                        <Column>
                            <Span>Loaded Images</Span>
                        </Column>
                    </Row>
                    <Row Margin="Margin.Is2.FromTop">
                        <Column>
                            <CardGroup>
                                @if (NFT.DataItems != null && NFT.DataItems.Count > 0)
                                {
                                    @foreach (var item in NFT.DataItems)
                                    {
                                        <Card Style="@(SmallThumbnails ? "max-width:90px; min-width:90px; width:90px;" : "max-width:300px; min-width:200px;")" Margin="Margin.Is1.FromEnd">
                                            @if (!SmallThumbnails)
                                            {
                                                <CardHeader>@(item.Hash.Length > 20 ? string.Concat(item.Hash.Substring(0,20), "...") : item.Hash)</CardHeader>
                                            }
                                            @if (item.Type == DataItemType.Image)
                                            {
                                                <CardImage Source="@(NFTHelpers.GetIPFSLinkFromHash(item.Hash))"></CardImage>
                                            }
                                            else if (item.Type == DataItemType.PDF)
                                            {
                                                <CardImage Source="_content/VEBlazor/images/pdf-image.png"></CardImage>
                                            }
                                            <CardBody Height="Height.Is100">
                                                @if (item.Type == DataItemType.PDF)
                                                {
                                                    <Row>
                                                        <Column>
                                                            <Button Color="Color.Primary" Type="ButtonType.Link" To="@(NFTHelpers.GetIPFSLinkFromHash(item.Hash))" Target="Target.Blank" Block>Open PDF in new Tab</Button>
                                                        </Column>
                                                    </Row>
                                                }
                                                else 
                                                {
                                                    <Row Height="Height.Is100" Flex="Flex.AlignItems.Baseline" Margin="Margin.Is2.FromBottom">
                                                        <Column Height="Height.Is100">
                                                            <Row>
                                                                <Column Flex="Flex.JustifyContent.Center">
                                                                    <Check Checked="@item.IsMain" TValue="bool" CheckedChanged="@((e) => onCheckedChangedHandler(e, item))" >@(SmallThumbnails ? "" : "Set as Main")</Check>
                                                                </Column>
                                                            </Row>
                                                            @if (SmallThumbnails)
                                                            {
                                                                <Row>
                                                                    <Column Flex="Flex.JustifyContent.Center">
                                                                        <Span>Main</Span>
                                                                    </Column>
                                                                </Row>
                                                            }
                                                        </Column>
                                                    </Row>
                                                }
                                            </CardBody>
                                            <CardFooter>
                                                <Button Color="Color.Danger" Clicked="@(async () => await OnDeleteImageClicked(item))" Block>
                                                    <Icon Name="IconName.Delete" Margin="Margin.Is1.FromEnd" />@(SmallThumbnails ? "" : "Delete Image")
                                                </Button>
                                            </CardFooter>
                                        </Card>
                                    }
                                }
                            </CardGroup>
                        </Column>
                    </Row>
                
            </Column>
        </Row>
    </CardBody>
</Card>

@code {
    Validations? validationsRef;
    IPFSUpload? ipfsUploadRef;

    [Parameter] public bool Multiple { get; set; } = false;
    [Parameter] public bool SmallThumbnails { get; set; } = false;
    [Parameter] public string Filter { get; set; } = ".jpeg, .png, .gif, .bmp, .jfif, .pdf";
    [Parameter] public EventCallback<string> OnPropsChanged { get; set; }

    public string ImageDataString
    {
        get
        {
            if (imageNeedsReload)
            {
                var i = NFTComponentBase.GetImageStringFromBytes(imageData);
                imageString = i;
                imageNeedsReload = false;
            }
            return imageString;
        }
    }
    bool uploadingImage = false;
    bool uploadingToIPFS = false;
    string fileName = string.Empty;
    string imageString = string.Empty;
    bool imageNeedsReload = true;
    byte[] imageData = new byte[0];
    DataItemType itemType = DataItemType.Image;

    Task OnImageUploadStarted()
    {
        uploadingImage = true;

        return InvokeAsync( StateHasChanged );
    }

    public async Task LoadImage(string link, string previewlink = "", byte[] _imageData = null)
    {
        if (!string.IsNullOrEmpty(link) || _imageData?.Length > 0)
        {
            byte[] imd = null;          
            if (_imageData == null || _imageData.Length == 0)
                imd = await NFTHelpers.IPFSDownloadFromInfuraAsync(NFTHelpers.GetHashFromIPFSLink(link));
            else if (_imageData.Length > 0)
                imd = _imageData;

            if (imd != null)
            {
                this.imageData = imd;
                imageNeedsReload = true;
                await InvokeAsync( StateHasChanged );

                if (ipfsUploadRef != null)
                    await ipfsUploadRef.LoadIPFSLink(link);
                await InvokeAsync( StateHasChanged );
            }
        }
    }

    async Task OnImageUploadEnded( string fileName, byte[] data )
    {
        uploadingImage = false;
        this.imageData = data;
        imageNeedsReload = true;
        this.fileName = fileName;
        itemType = NFTDataItem.GetItemType(fileName);

        await InvokeAsync( StateHasChanged );

        if ( ipfsUploadRef != null )
            await ipfsUploadRef.UploadToIPFS( fileName, data );
    }

    Task OnIPFSUploadStarted()
    {
        uploadingToIPFS = true;

        return InvokeAsync( StateHasChanged );
    }

    async Task OnIPFSUploadEnded( string mainIPFSLink )
    {
        uploadingToIPFS = false;
        NFT.ImageLink = mainIPFSLink;
        
        NFT.DataItems.Add(new NFTDataItem() {
            Type = itemType,
            Hash = NFTHelpers.GetHashFromIPFSLink(mainIPFSLink)
        });
    }

    void ImageValidator( ValidatorEventArgs e )
    {
        if ( !string.IsNullOrEmpty( ImageDataString ) )
            e.Status = ValidationStatus.Success;
        else
            e.Status = ValidationStatus.Error;
    }

    public Task<bool> IsValidated()
    {
        if (validationsRef != null)
            return validationsRef.ValidateAll();
        else
            return Task.FromResult(false);
    }

    public async Task OnDeleteImageClicked(NFTDataItem item)
    {
        if (NFT.DataItems is not null && NFT.DataItems.Count > 0)
        {
            NFT.DataItems.Remove(item);
            await InvokeAsync( StateHasChanged );
        }
    }
    public void onCheckedChangedHandler(bool e, NFTDataItem item)
    {
        if (NFT.DataItems is not null && NFT.DataItems.Count > 0)
        {
            foreach (var i in NFT.DataItems)
                i.IsMain = false;

            item.IsMain = e;
            if (e) NFT.ImageLink = NFTHelpers.GetIPFSLinkFromHash(item.Hash);
            
            StateHasChanged();
        }
    }
}
