@using System.IO
@using VEDriversLite
@using VEDriversLite.NFT
@inject AppData AppData

<Card Margin="Margin.Is4.FromBottom" Shadow="Shadow.Small">
    <CardBody>
       <CardTitle>
           Advanced - Ticket Airdrop
        </CardTitle>
        <Alert Color="Color.Info" Visible>
            <AlertDescription>
                You can upload text file with receivers addresses. Each address should be placed on separate line.
            </AlertDescription>
        </Alert>
        <Row Flex="Flex.AlignItems.Center">
            <Column>
                <Row>
                    <Column>
                        <Validations @ref="@validationsRef" Mode="ValidationMode.Manual">
                            <Validation Validator="ImageValidator">
                                <Field>
                                    <FieldLabel>Please select the file.</FieldLabel>
                                    <FieldBody>
                                        <FileUpload Started="@OnFileUploadStarted" Uploaded="@OnFileUploadEnded" ValidationsRef="@validationsRef"/>
                                    </FieldBody>
                                </Field>
                            </Validation>
                        </Validations>                        
                    </Column>
                </Row>
                @if ( uploadingFile )
                {
                    <Row>
                        <Column>
                            <Span>Uploading the image...</Span>
                        </Column>
                    </Row>
                }
                @if ( !string.IsNullOrEmpty( fileString ) )
                {
                    <Row Margin="Margin.Is2.FromTop">
                        <Column>
                            <Alert Color="Color.Success">File loaded!</Alert>
                        </Column>
                    </Row>
                    <Row Margin="Margin.Is1.FromTop">
                        <Column>
                            <Field>
                                <FieldLabel>File content</FieldLabel>
                                <MemoEdit Text="@fileString" AutoSize />
                            </Field>
                        </Column>
                    </Row>
                    <Row>
                        <Column>
                            <Button Color="Color.Primary" Clicked="@Update" Block>Update</Button>
                        </Column>
                            </Row>
                    <Row Margin="Margin.Is2.FromTop">
                        <Column>
                            <Heading Size="HeadingSize.Is5">Loaded addresses as receivers</Heading>
                        </Column>
                    </Row>
                    <Row Margin="Margin.Is1.FromTop">
                        <Column>
                            <ListGroup>
                                @foreach(var addr in addresses)
                                {
                                <ListGroupItem>
                                    <Row>
                                        <Column>@addr.Address</Column>
                                        <Column><Check Checked="@addr.UseAsReceiver" TValue="bool" CheckedChanged="@((e) => addr.UseAsReceiver = e)">Send to this address</Check></Column>
                                    </Row>
                                </ListGroupItem>
                                }
                            </ListGroup>
                        </Column>
                    </Row>
                    <Row Margin="Margin.Is2.FromTop">
                        <Column>
                            <Button Loading="@minting" Color="Color.Primary" Clicked="@SendNFTs" Block>Send</Button>
                        </Column>
                    </Row>
                    <Row Margin="Margin.Is2.FromTop">
                        <Column>
                            <ListGroup>
                                @foreach(var adt in AddressTx)
                                {
                                    <ListGroupItem>
                                        <Span>@adt.Key - <a href="https://explorer.nebl.io/tx/@adt.Value" target="_blank" >@adt.Value</a></Span>
                                    </ListGroupItem>
                                }
                            </ListGroup>
                        </Column>
                    </Row>
                }
            </Column>
        </Row>
    </CardBody>
</Card>


@code {

    Validations? validationsRef;

    private class ReceiversListItem
    {
        public string Address { get; set; } = string.Empty;
        public bool UseAsReceiver { get; set; } = true;
    }

    [Parameter] public string FileString { get; set; } = string.Empty;

    [Parameter] public EventCallback<string> FileStringChanged { get; set; }

    [Parameter] public INFT NFT { get; set; }

    bool minting = false;
    bool minted = false;
    string fileString = string.Empty;
    string resultAddressDictAsString = string.Empty;
    bool uploadingFile = false;
    bool uploadingToIPFS = false;
    bool uploadFinished = false;
    string fileName = string.Empty;
    byte[] fileData = new byte[0];
    List<ReceiversListItem> addresses { get; set; } = new List<ReceiversListItem>();
    Dictionary<string, string> AddressTx { get; set; } = new Dictionary<string, string>();

    Task OnFileUploadStarted()
    {
        uploadingFile = true;
        return InvokeAsync( StateHasChanged );
    }

    async Task OnFileUploadEnded( string fileName, byte[] data )
    {
        uploadingFile = false;

        this.fileName = fileName;
        this.fileData = data;
        try
        {
            fileString = System.Text.Encoding.UTF8.GetString(data);
            ParseAdresses();
        }
        catch(Exception ex )
        {
            Console.WriteLine("Cannot parse the file data to the text. " + ex.Message);
        }
        await InvokeAsync( StateHasChanged );

        await FileStringChanged.InvokeAsync(fileString);
    }

    void Update()
    {    
        ParseAdresses();
        StateHasChanged();
    }

    void ParseAdresses()
    {
        addresses.Clear();
        using (var reader = new StringReader(fileString))
        {
            for (string line = reader.ReadLine(); line != null; line = reader.ReadLine())
            {
                var address = NeblioTransactionHelpers.ValidateNeblioAddress(line);
                if (!string.IsNullOrEmpty(address))
                    addresses.Add(new ReceiversListItem() { Address = address, UseAsReceiver = true });
            }
        }
    }

    async Task SendNFTs()
    {
        if (NFT == null)
            return;

        try
        {
            minting = true;
            StateHasChanged();

            var addrs = this.addresses.Where(x => x.UseAsReceiver).Select(x => x.Address).ToList();
            Console.WriteLine($"Airdrop started.");
            AppData.Account.NewMintingProcessInfo += Account_NewMintingProcessInfo;
            var res = await AppData.Account.MintMultiNFTLargeAmount(NFT, addrs.Count, "", addrs);
            AppData.Account.NewMintingProcessInfo -= Account_NewMintingProcessInfo;

            minted = res.Item1;

            if (res.Item2 != null)
            {
                AddressTx = res.Item2;
                resultAddressDictAsString =  Newtonsoft.Json.JsonConvert.SerializeObject(res.Item2, Newtonsoft.Json.Formatting.Indented);
            }
            
            minting = false;
            Console.WriteLine($"Airdrop result:");
            Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(res.Item2, Newtonsoft.Json.Formatting.Indented));
            Console.WriteLine("----------------------------------------");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Cannot mint all the tickets. " + ex.Message);
        }
        StateHasChanged();
    }
    
    private static void Account_NewMintingProcessInfo(object sender, string e)
    {
        Console.WriteLine("New multimint info: " + e);
    }

        void ImageValidator( ValidatorEventArgs e )
    {
        if ( !string.IsNullOrEmpty( fileString ) )
            e.Status = ValidationStatus.Success;
        else
            e.Status = ValidationStatus.Error;
    }

    public Task<bool> IsValidated()
    {
        if (validationsRef != null)
            return validationsRef.ValidateAll();
        else
            return Task.FromResult(false);
    }

}
