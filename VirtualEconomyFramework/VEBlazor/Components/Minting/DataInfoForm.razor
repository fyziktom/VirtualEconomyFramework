@inject AppData AppData
@inherits NFTComponentBase

<Card Margin="Margin.Is4.FromBottom" Shadow="Shadow.Small">
    <CardBody>
        <CardTitle>
            Information about the data
        </CardTitle>
        <Button Color="Color.Primary" Clicked="@CreateDescriptionForNFT" Loading="creatingDescription" Block>Create description by ChatGPT based on TextField</Button>

        <Validations @ref="@validationsRef" Mode="ValidationMode.Manual">
            <Validation Validator="ValidationRule.IsNotEmpty">
                <Field>
                    <FieldLabel>Please enter the name.</FieldLabel>
                    <TextEdit Placeholder="Enter name" @bind-Text="@NFT.Name">
                        <Feedback>
                            <ValidationError>Missing name.</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Field>
            </Validation>
            <Field>
                <FieldLabel>Please enter the tags.</FieldLabel>
                <SpaceTags @bind-Tags="@NFT.Tags"/>
                <FieldHelp>Please separate the tags with the space. You do not need to add # character as prefix.</FieldHelp>
            </Field>

            <Field>
                <FieldLabel>Please enter the short description.</FieldLabel>
                <TextEdit Placeholder="Enter short description" @bind-Text="@NFT.Description"/>
                <FieldHelp>If you need to write longer description please use the text field.</FieldHelp>
            </Field>
            <VEFramework.VEBlazor.Components.AI.CreateTextByAIButton TextCreated="@TextCreatedHandler" />
            <Field>
                <FieldLabel>Here you can enter the longer description.</FieldLabel>
                <Markdown @ref="markdownRef" @bind-Value="@NFT.Text" AutoRefresh="@(new MarkdownAutoRefresh() {Delay = 300 })"/>
                <FieldHelp>You can use Markdown formating in this editor.</FieldHelp>
            </Field>
        </Validations>
    </CardBody>
</Card>

@code {
    [Inject] INotificationService? NotificationService { get; set; }

    Validations validationsRef;
    Markdown markdownRef;

    bool creatingDescription = false;

    public Task<bool> IsValidated()
    {
        return validationsRef.ValidateAll();
    }

    public void Refresh()
    {
        markdownRef.SetValueAsync( NFT.Text );
    }

    public async Task TextCreatedHandler(string e)
    {
        if (!string.IsNullOrEmpty(e))
        {
            NFT.Text = e;
            await markdownRef.SetValueAsync(NFT.Text);
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task CreateDescriptionForNFT()
    {
        if (string.IsNullOrEmpty(NFT.Text))
        {
            if (NotificationService != null)
                await NotificationService.Error("Cannot create NFT Info without filled Text field.", "Fill the Text field");

            return;
        }

        if (AppData.Assistant != null)
        {
            creatingDescription = true;
            await InvokeAsync(StateHasChanged);

            if (NotificationService != null)
                await NotificationService.Info("Createing NFT Name, Description and Tags...", "AI working");

            var res = await AppData.Assistant.GetNewDataForNFT(NFT.Text);
            if (res.Item1)
            {
                if (NotificationService != null)
                    await NotificationService.Success("NFT info created...", "Done");

                NFT.Name = res.Item2.Name;
                NFT.Description = res.Item2.Description;
                NFT.Tags = res.Item2.Tags;
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                if (NotificationService != null)
                    await NotificationService.Error("Cannot create NFT Info.", "Error");
            }

            creatingDescription = false;
            await InvokeAsync(StateHasChanged);

        }
        else
        {
            if (NotificationService != null)
                await NotificationService.Warning("Cannot use AI without setup of OpenAI API Key. Please fill it in the profile tab in settings.", "OpenAI API Key missing");                  
        }
    }
}
