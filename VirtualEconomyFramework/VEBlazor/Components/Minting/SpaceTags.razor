@*<Addons>
    <Addon AddonType="AddonType.Body">
        <Autocomplete TItem="string"
                    TValue="string"
                    Data="@DummyTags"
                    TextField="@(( item ) => item)"
                    ValueField="@(( item ) => item)"
                    Placeholder="@Placeholder"
                    Multiple
                    FreeTyping
                    SelectedValues="@TagNames"
                    SelectedTexts="@TagNames"
                    SelectedTextsChanged="@OnTagNamesChanged"
                    Validator="@Validator">
        </Autocomplete>
    </Addon>
    <Addon AddonType="AddonType.End">
        <Button Color="Color.Info" Clicked="@Clear">
            <Icon Name="IconName.Clear" IconSize="IconSize.Small" TextColor="TextColor.Danger" Margin="Margin.Is1.FromEnd" />
            Clear
        </Button>
    </Addon>
</Addons>*@

@inject AppData AppData
<Row Width="Width.Is100">
    <Column>
        <Row>
            <Column>
                <Autocomplete TItem="string"
                              TValue="string"
                              Data="@DummyTags"
                              TextField="@(( item ) => item)"
                              ValueField="@(( item ) => item)"
                              Placeholder="@Placeholder"
                              SelectionMode="AutocompleteSelectionMode.Multiple"
                              FreeTyping
                              SelectedValues="@TagNames"
                              SelectedTexts="@TagNames"
                              SelectedTextsChanged="@OnTagNamesChanged">
                </Autocomplete>
            </Column>
        </Row>

        @if ( AppData.DefaultTags != null )
        {
            <Row>
                <Column>
                    @foreach ( var t in AppData.DefaultTags )
                    {
                        <Badge Color="new Blazorise.Color(t.Value.Color)" @onclick="() => AddTag(t.Key)" Margin="Margin.Is1.FromEnd" Style="cursor:pointer;">#@t.Key</Badge>
                    }
                </Column>
            </Row>
        }
    </Column>
</Row>

@code {

    [Parameter] public string? Tags { get; set; }
    [Parameter] public EventCallback<string> TagsChanged { get; set; }
    [Parameter] public EventCallback<List<string>> TagsListChanged { get; set; }
    [Parameter] public string Placeholder { get; set; } = "Tags...";
    [Parameter] public Action<ValidatorEventArgs> Validator { get; set; } = ValidationRule.None;

    public IEnumerable<string> DummyTags
    {
        get
        {
            var tgs = VEDriversLite.NFT.NFTDataContext.Tags.Values.OrderByDescending(t => t.Count)
                                                                         .Select(t => t.Name).ToList();
            foreach (var t in tagNames)
            {
                if (!tgs.Contains(t))
                    tgs.Add(t);
            }
            return tgs;
        }
    }

    private List<string> tagNames = new List<string>();                                                                     
    public List<string> TagNames
    {
        get
        {
            tagNames = Tags?.Split(" ")?.Where(x => !string.IsNullOrEmpty(x))?.ToList() ?? new List<string>();
            return tagNames;
        }
    }

    public async Task OnTagNamesChanged(List<string> values)
    {
        {
            foreach (var v in values)
            {
                if (v.Contains(" "))
                    continue;
                if (!VEDriversLite.NFT.NFTDataContext.Tags.ContainsKey(v))
                    VEDriversLite.NFT.NFTDataContext.Tags.TryAdd(v, new VEDriversLite.NFT.Tags.Tag() { Name = v, Count = 1 });
            }
            await InvokeAsync(StateHasChanged);

            Tags = string.Join(" ", values ?? Enumerable.Empty<string>()).Trim();

            await InvokeAsync(StateHasChanged);

            await TagsChanged.InvokeAsync(Tags);
        }
    }
    
    async Task AddTag( string tag )
    {
            
        if ( TagNames.Contains( tag ) )
            return;

        if (!VEDriversLite.NFT.NFTDataContext.Tags.ContainsKey(tag))
            VEDriversLite.NFT.NFTDataContext.Tags.TryAdd(tag, new VEDriversLite.NFT.Tags.Tag() { Name = tag });

            if ( Tags == "" )
        Tags += $"{tag}";
            else
            Tags += $" {tag}";

        await InvokeAsync(StateHasChanged);
        await OnTagNamesChanged(TagNames);
    }

    async Task Clear()
    {
        Tags = string.Empty;
        await InvokeAsync(StateHasChanged);
        await TagsChanged.InvokeAsync( Tags );
    }
}
