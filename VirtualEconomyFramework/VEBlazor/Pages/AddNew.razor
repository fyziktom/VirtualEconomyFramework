@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NFT.Imaging.Xray
@inherits NFTComponentBase
@inject AppData AppData

@if (NFT != null)
{
    <Container Fluid Margin="Margin.Is4.FromBottom">
        <Steps SelectedStep="@selectedStep" SelectedStepChanged="@OnSelectedStepChanged">
            <Items>
                <Step Name="stepUpload">Upload</Step>
                <Step Name="stepData">Data Info</Step>
                <Step Name="specificParams">@SpecificParamsStepHeader</Step>
                <Step Name="stepFinish">
                    <Marker>
                        <Icon Name="IconName.Flag" />
                    </Marker>
                    <Caption>
                        Finish
                    </Caption>
                </Step>
            </Items>
            <Content>
                <StepPanel Name="stepUpload">
                    <MintingToolbar ShowNextButton="true" ToolActionHandler="@OnToolActionHandler" CanProceed="@OnCanProceed" />
                    <Row>
                        <Column>
                            <UploadData @ref="@uploadDataRef" @bind-MainIPFSLink="@AppData.NFTInMintingForm.ImageLink" @bind-PreviewIPFSLink="@AppData.NFTInMintingForm.Preview" />
                        </Column>
                    </Row>
                    <MintingToolbar ShowNextButton="true" ToolActionHandler="@OnToolActionHandler" CanProceed="@OnCanProceed" />
                </StepPanel>
                <StepPanel Name="stepData">
                    <MintingToolbar ShowNextButton="true" ShowPrevButton="true" ToolActionHandler="@OnToolActionHandler" CanProceed="@OnCanProceed" />
                    <Row>
                        <Column>
                            <DataInfoForm @ref="@dataInfoFormRef"
                                          @bind-Name="@AppData.NFTInMintingForm.Name"
                                          @bind-Description="@AppData.NFTInMintingForm.Description"
                                          @bind-Text="@AppData.NFTInMintingForm.Text"
                                          @bind-Tags="@AppData.NFTInMintingForm.Tags" />
                        </Column>
                    </Row>
                    <MintingToolbar ShowNextButton="true" ShowPrevButton="true" ToolActionHandler="@OnToolActionHandler" CanProceed="@OnCanProceed" />
                </StepPanel>
                <StepPanel Name="specificParams">
                    @if (SpecificParamsStepContent != null)
                    {
                        <MintingToolbar ShowNextButton="true" ShowPrevButton="true" ToolActionHandler="@OnToolActionHandler" CanProceed="@OnCanProceed" />
                        <ErrorBoundary>
                            @SpecificParamsStepContent
                        </ErrorBoundary>
                        <MintingToolbar ShowNextButton="true" ShowPrevButton="true" ToolActionHandler="@OnToolActionHandler" CanProceed="@OnCanProceed" />
                    }
                </StepPanel>

                <StepPanel Name="stepFinish">
                    <MintingToolbar ShowPrevButton="true" ShowFinishButton="@(!minting)" ToolActionHandler="@OnToolActionHandler" CanProceed="@OnCanProceed" />
                    <Row>
                        <Column Flex="Flex.JustifyContent.Center">
                            <Span>Now you can confirm the storage of the data.</Span>
                        </Column>
                    </Row>
                    <Row>
                        <Column Flex="Flex.JustifyContent.Center">
                            <Span>Here you can check the expected result:</Span>
                        </Column>
                    </Row>
                    <Row Margin="Margin.Is3.FromTop">
                        <Column Flex="Flex.JustifyContent.Center">
                            <NFTCard NFT="@AppData.NFTInMintingForm" OpenNFTDetailsRequest="OpenNFTDetailsRequestHandler" />
                        </Column>
                    </Row>
                    <Row Margin="Margin.Is3.FromTop">
                        <Column Flex="Flex.JustifyContent.Center">
                            @if ( IsMinted )
                            {
                                if ( mintingResult.Item1 )
                                {
                                    <Alert Color="Color.Success" Visible>
                                        <AlertMessage>Data Stored :)</AlertMessage>
                                        <AlertDescription>Transaction Hash is: <a href="https://explorer.nebl.io/tx/@mintingResult.Item2" target="_blank">@mintingResult.Item2</a></AlertDescription>
                                    </Alert>
                                }
                                else
                                {
                                    <Alert Color="Color.Danger" Visible>
                                        <AlertMessage>Cannot save</AlertMessage>
                                        <AlertDescription>@mintingResult.Item2</AlertDescription>
                                    </Alert>
                                }
                            }
                        </Column>
                    </Row>
                    <MintingToolbar ShowPrevButton="true" ShowFinishButton="@(!minting)" ToolActionHandler="@OnToolActionHandler" CanProceed="@OnCanProceed" />
                </StepPanel>
            </Content>
        </Steps>
    </Container>

    <OpenNFTDetailsFactory @ref="openNFTDetailsFactory"
                           Address="@Address"
                           IsSubAccount="@false"
                           HideOpenInWorkTabButton="true"
                           IsOwnNFT="@false" />
} 

@code {
    [Inject] INotificationService? NotificationService { get; set; }

    [Parameter]
    public RenderFragment SpecificParamsStepHeader { get; set; }
    [Parameter]
    public RenderFragment SpecificParamsStepContent { get; set; }
    [Parameter]
    public NFTTypes NFTType { get; set; } = NFTTypes.Image;

    OpenNFTDetailsFactory? openNFTDetailsFactory;
    string selectedStep = "stepUpload";

    bool IsMinted = false;
    bool minting = false;
    (bool, string) mintingResult = (false, string.Empty);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await RefreshImageInUploadComponent();
        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task RefreshImageInUploadComponent()
    {    
        if (uploadDataRef != null)
            await uploadDataRef.LoadImage(NFT.ImageLink);
    }

    private Task OnSelectedStepChanged( string name )
    {
        selectedStep = name;

        return Task.CompletedTask;
    }

    async Task OpenNFTDetailsRequestHandler(INFT nft)
    {    
        if (nft != null && openNFTDetailsFactory != null)
            await openNFTDetailsFactory.OpenNFTDetails(nft);
    }
    
    private async Task mintNFT( string[] args )
    {
        NFT = AppData.NFTInMintingForm;

        Console.WriteLine( $"Name: {NFT.Name}" );
        Console.WriteLine( $"Description: {NFT.Description}" );
        Console.WriteLine( $"Text: {NFT.Text}" );
        Console.WriteLine( $"Tags: {NFT.Tags}" );
        Console.WriteLine( $"ImageLink: {NFT.ImageLink}" );
        Console.WriteLine( $"Preview: {NFT.Preview}" );

        if ( string.IsNullOrEmpty( NFT.ImageLink ) )
        {
            mintingResult.Item1 = false;
            mintingResult.Item2 = "Cannot save the data without the Image.";
            return;
        }
        if ( selectedStep == "stepFinish" )
        {
            if ( AppData.Account.TokensSupplies.TryGetValue( NFTHelpers.BDPTokenId, out var supply ) )
            {
                if ( supply.Amount > 3 )
                    NFT.TokenId = NFTHelpers.BDPTokenId;
                else
                    NFT.TokenId = NFTHelpers.TokenId;
            }
            else
            {
                NFT.TokenId = NFTHelpers.TokenId;
            }

            var res = await AppData.Account.MintNFT( NFT );
            mintingResult = res;
            if ( res.Item1 )
            {            
                IsMinted = true;
                if (NotificationService != null)
                    await NotificationService.Success( "Image saved :)", "Saved" );
            }                
            else
            {
                if (NotificationService != null)
                    await NotificationService.Success( "Cannot save the data. " + res.Item2, "Cannot Save" );                
                IsMinted = false;
            }
        }
    }

    async Task OnToolActionHandler( MintingToolbarActionDto e )
    {
        if ( e == null )
            return;
        switch ( e.Type )
        {
            case MintingToolbarActionType.NextStep:
                NextStep( e.Args );
                break;
            case MintingToolbarActionType.PreviousStep:
                PreviousStep( e.Args );
                break;
            case MintingToolbarActionType.Finish:
                await mintNFT( e.Args );
                break;
        }
    }

    void NextStep( string[] args )
    {
        if ( selectedStep == "stepUpload" )
            selectedStep = "stepData";
        else if ( selectedStep == "stepData" )
            selectedStep = "specificParams";
        else if ( selectedStep == "specificParams" )
            selectedStep = "stepFinish";
    }

    void PreviousStep( string[] args )
    {
        if ( selectedStep == "stepFinish" )
            selectedStep = "specificParams";
        else if ( selectedStep == "specificParams" )
            selectedStep = "stepData";
        else if ( selectedStep == "stepData" )
            selectedStep = "stepUpload";
    }

    UploadData? uploadDataRef;
    DataInfoForm? dataInfoFormRef;

    async Task<bool> OnCanProceed()
    {
        if ( uploadDataRef != null && selectedStep == "stepUpload" )
        {
            return await uploadDataRef.IsValidated();
        }

        if ( dataInfoFormRef != null && selectedStep == "stepData" )
        {
            return await dataInfoFormRef.IsValidated();
        }

        return true;
    }
}
